
pn_serial_protocol_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000412c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d88  08004238  08004238  00014238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004fc0  08004fc0  00020084  2**0
                  CONTENTS
  4 .ARM          00000000  08004fc0  08004fc0  00020084  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004fc0  08004fc0  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004fc0  08004fc0  00014fc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004fc4  08004fc4  00014fc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08004fc8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001238  20000084  0800504c  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200012bc  0800504c  000212bc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   000093f0  00000000  00000000  000200ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002395  00000000  00000000  0002949d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000910  00000000  00000000  0002b838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000828  00000000  00000000  0002c148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018a60  00000000  00000000  0002c970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b520  00000000  00000000  000453d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083e59  00000000  00000000  000508f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d4749  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a90  00000000  00000000  000d479c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000084 	.word	0x20000084
 8000128:	00000000 	.word	0x00000000
 800012c:	08004220 	.word	0x08004220

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000088 	.word	0x20000088
 8000148:	08004220 	.word	0x08004220

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fade 	bl	8000710 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f80f 	bl	8000176 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f8d8 	bl	800030c <MX_GPIO_Init>
  MX_DMA_Init();
 800015c:	f000 f8b8 	bl	80002d0 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000160:	f000 f862 	bl	8000228 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000164:	f000 f88a 	bl	800027c <MX_USART2_UART_Init>
  MX_CRC_Init();
 8000168:	f000 f84a 	bl	8000200 <MX_CRC_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  init();
 800016c:	f002 f92a 	bl	80023c4 <init>
  while (1)
  {
	  loop();
 8000170:	f002 f940 	bl	80023f4 <loop>
  {
 8000174:	e7fc      	b.n	8000170 <main+0x24>

08000176 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000176:	b580      	push	{r7, lr}
 8000178:	b090      	sub	sp, #64	; 0x40
 800017a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800017c:	f107 0318 	add.w	r3, r7, #24
 8000180:	2228      	movs	r2, #40	; 0x28
 8000182:	2100      	movs	r1, #0
 8000184:	4618      	mov	r0, r3
 8000186:	f003 f899 	bl	80032bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800018a:	1d3b      	adds	r3, r7, #4
 800018c:	2200      	movs	r2, #0
 800018e:	601a      	str	r2, [r3, #0]
 8000190:	605a      	str	r2, [r3, #4]
 8000192:	609a      	str	r2, [r3, #8]
 8000194:	60da      	str	r2, [r3, #12]
 8000196:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000198:	2301      	movs	r3, #1
 800019a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800019c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001a0:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001a2:	2300      	movs	r3, #0
 80001a4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001a6:	2301      	movs	r3, #1
 80001a8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001aa:	2302      	movs	r3, #2
 80001ac:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001b2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001b4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80001b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001ba:	f107 0318 	add.w	r3, r7, #24
 80001be:	4618      	mov	r0, r3
 80001c0:	f001 f810 	bl	80011e4 <HAL_RCC_OscConfig>
 80001c4:	4603      	mov	r3, r0
 80001c6:	2b00      	cmp	r3, #0
 80001c8:	d001      	beq.n	80001ce <SystemClock_Config+0x58>
  {
    Error_Handler();
 80001ca:	f000 f8d7 	bl	800037c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001ce:	230f      	movs	r3, #15
 80001d0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001d2:	2302      	movs	r3, #2
 80001d4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001d6:	2300      	movs	r3, #0
 80001d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001e0:	2300      	movs	r3, #0
 80001e2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001e4:	1d3b      	adds	r3, r7, #4
 80001e6:	2102      	movs	r1, #2
 80001e8:	4618      	mov	r0, r3
 80001ea:	f001 fa7d 	bl	80016e8 <HAL_RCC_ClockConfig>
 80001ee:	4603      	mov	r3, r0
 80001f0:	2b00      	cmp	r3, #0
 80001f2:	d001      	beq.n	80001f8 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80001f4:	f000 f8c2 	bl	800037c <Error_Handler>
  }
}
 80001f8:	bf00      	nop
 80001fa:	3740      	adds	r7, #64	; 0x40
 80001fc:	46bd      	mov	sp, r7
 80001fe:	bd80      	pop	{r7, pc}

08000200 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000204:	4b06      	ldr	r3, [pc, #24]	; (8000220 <MX_CRC_Init+0x20>)
 8000206:	4a07      	ldr	r2, [pc, #28]	; (8000224 <MX_CRC_Init+0x24>)
 8000208:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800020a:	4805      	ldr	r0, [pc, #20]	; (8000220 <MX_CRC_Init+0x20>)
 800020c:	f000 fbef 	bl	80009ee <HAL_CRC_Init>
 8000210:	4603      	mov	r3, r0
 8000212:	2b00      	cmp	r3, #0
 8000214:	d001      	beq.n	800021a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000216:	f000 f8b1 	bl	800037c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800021a:	bf00      	nop
 800021c:	bd80      	pop	{r7, pc}
 800021e:	bf00      	nop
 8000220:	200000a0 	.word	0x200000a0
 8000224:	40023000 	.word	0x40023000

08000228 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800022c:	4b11      	ldr	r3, [pc, #68]	; (8000274 <MX_USART1_UART_Init+0x4c>)
 800022e:	4a12      	ldr	r2, [pc, #72]	; (8000278 <MX_USART1_UART_Init+0x50>)
 8000230:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000232:	4b10      	ldr	r3, [pc, #64]	; (8000274 <MX_USART1_UART_Init+0x4c>)
 8000234:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000238:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800023a:	4b0e      	ldr	r3, [pc, #56]	; (8000274 <MX_USART1_UART_Init+0x4c>)
 800023c:	2200      	movs	r2, #0
 800023e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000240:	4b0c      	ldr	r3, [pc, #48]	; (8000274 <MX_USART1_UART_Init+0x4c>)
 8000242:	2200      	movs	r2, #0
 8000244:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000246:	4b0b      	ldr	r3, [pc, #44]	; (8000274 <MX_USART1_UART_Init+0x4c>)
 8000248:	2200      	movs	r2, #0
 800024a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800024c:	4b09      	ldr	r3, [pc, #36]	; (8000274 <MX_USART1_UART_Init+0x4c>)
 800024e:	220c      	movs	r2, #12
 8000250:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000252:	4b08      	ldr	r3, [pc, #32]	; (8000274 <MX_USART1_UART_Init+0x4c>)
 8000254:	2200      	movs	r2, #0
 8000256:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000258:	4b06      	ldr	r3, [pc, #24]	; (8000274 <MX_USART1_UART_Init+0x4c>)
 800025a:	2200      	movs	r2, #0
 800025c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800025e:	4805      	ldr	r0, [pc, #20]	; (8000274 <MX_USART1_UART_Init+0x4c>)
 8000260:	f001 fbda 	bl	8001a18 <HAL_UART_Init>
 8000264:	4603      	mov	r3, r0
 8000266:	2b00      	cmp	r3, #0
 8000268:	d001      	beq.n	800026e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800026a:	f000 f887 	bl	800037c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800026e:	bf00      	nop
 8000270:	bd80      	pop	{r7, pc}
 8000272:	bf00      	nop
 8000274:	200000a8 	.word	0x200000a8
 8000278:	40013800 	.word	0x40013800

0800027c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000280:	4b11      	ldr	r3, [pc, #68]	; (80002c8 <MX_USART2_UART_Init+0x4c>)
 8000282:	4a12      	ldr	r2, [pc, #72]	; (80002cc <MX_USART2_UART_Init+0x50>)
 8000284:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000286:	4b10      	ldr	r3, [pc, #64]	; (80002c8 <MX_USART2_UART_Init+0x4c>)
 8000288:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800028c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800028e:	4b0e      	ldr	r3, [pc, #56]	; (80002c8 <MX_USART2_UART_Init+0x4c>)
 8000290:	2200      	movs	r2, #0
 8000292:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000294:	4b0c      	ldr	r3, [pc, #48]	; (80002c8 <MX_USART2_UART_Init+0x4c>)
 8000296:	2200      	movs	r2, #0
 8000298:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800029a:	4b0b      	ldr	r3, [pc, #44]	; (80002c8 <MX_USART2_UART_Init+0x4c>)
 800029c:	2200      	movs	r2, #0
 800029e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80002a0:	4b09      	ldr	r3, [pc, #36]	; (80002c8 <MX_USART2_UART_Init+0x4c>)
 80002a2:	220c      	movs	r2, #12
 80002a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002a6:	4b08      	ldr	r3, [pc, #32]	; (80002c8 <MX_USART2_UART_Init+0x4c>)
 80002a8:	2200      	movs	r2, #0
 80002aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80002ac:	4b06      	ldr	r3, [pc, #24]	; (80002c8 <MX_USART2_UART_Init+0x4c>)
 80002ae:	2200      	movs	r2, #0
 80002b0:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart2) != HAL_OK)
 80002b2:	4805      	ldr	r0, [pc, #20]	; (80002c8 <MX_USART2_UART_Init+0x4c>)
 80002b4:	f001 fbfd 	bl	8001ab2 <HAL_HalfDuplex_Init>
 80002b8:	4603      	mov	r3, r0
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d001      	beq.n	80002c2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80002be:	f000 f85d 	bl	800037c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80002c2:	bf00      	nop
 80002c4:	bd80      	pop	{r7, pc}
 80002c6:	bf00      	nop
 80002c8:	200000ec 	.word	0x200000ec
 80002cc:	40004400 	.word	0x40004400

080002d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b082      	sub	sp, #8
 80002d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80002d6:	4b0c      	ldr	r3, [pc, #48]	; (8000308 <MX_DMA_Init+0x38>)
 80002d8:	695b      	ldr	r3, [r3, #20]
 80002da:	4a0b      	ldr	r2, [pc, #44]	; (8000308 <MX_DMA_Init+0x38>)
 80002dc:	f043 0301 	orr.w	r3, r3, #1
 80002e0:	6153      	str	r3, [r2, #20]
 80002e2:	4b09      	ldr	r3, [pc, #36]	; (8000308 <MX_DMA_Init+0x38>)
 80002e4:	695b      	ldr	r3, [r3, #20]
 80002e6:	f003 0301 	and.w	r3, r3, #1
 80002ea:	607b      	str	r3, [r7, #4]
 80002ec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80002ee:	2200      	movs	r2, #0
 80002f0:	2100      	movs	r1, #0
 80002f2:	200f      	movs	r0, #15
 80002f4:	f000 fb45 	bl	8000982 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80002f8:	200f      	movs	r0, #15
 80002fa:	f000 fb5e 	bl	80009ba <HAL_NVIC_EnableIRQ>

}
 80002fe:	bf00      	nop
 8000300:	3708      	adds	r7, #8
 8000302:	46bd      	mov	sp, r7
 8000304:	bd80      	pop	{r7, pc}
 8000306:	bf00      	nop
 8000308:	40021000 	.word	0x40021000

0800030c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800030c:	b480      	push	{r7}
 800030e:	b083      	sub	sp, #12
 8000310:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000312:	4b0e      	ldr	r3, [pc, #56]	; (800034c <MX_GPIO_Init+0x40>)
 8000314:	699b      	ldr	r3, [r3, #24]
 8000316:	4a0d      	ldr	r2, [pc, #52]	; (800034c <MX_GPIO_Init+0x40>)
 8000318:	f043 0320 	orr.w	r3, r3, #32
 800031c:	6193      	str	r3, [r2, #24]
 800031e:	4b0b      	ldr	r3, [pc, #44]	; (800034c <MX_GPIO_Init+0x40>)
 8000320:	699b      	ldr	r3, [r3, #24]
 8000322:	f003 0320 	and.w	r3, r3, #32
 8000326:	607b      	str	r3, [r7, #4]
 8000328:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800032a:	4b08      	ldr	r3, [pc, #32]	; (800034c <MX_GPIO_Init+0x40>)
 800032c:	699b      	ldr	r3, [r3, #24]
 800032e:	4a07      	ldr	r2, [pc, #28]	; (800034c <MX_GPIO_Init+0x40>)
 8000330:	f043 0304 	orr.w	r3, r3, #4
 8000334:	6193      	str	r3, [r2, #24]
 8000336:	4b05      	ldr	r3, [pc, #20]	; (800034c <MX_GPIO_Init+0x40>)
 8000338:	699b      	ldr	r3, [r3, #24]
 800033a:	f003 0304 	and.w	r3, r3, #4
 800033e:	603b      	str	r3, [r7, #0]
 8000340:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000342:	bf00      	nop
 8000344:	370c      	adds	r7, #12
 8000346:	46bd      	mov	sp, r7
 8000348:	bc80      	pop	{r7}
 800034a:	4770      	bx	lr
 800034c:	40021000 	.word	0x40021000

08000350 <_write>:

/* USER CODE BEGIN 4 */
int _write(int fp, char *data, int len) {
 8000350:	b580      	push	{r7, lr}
 8000352:	b084      	sub	sp, #16
 8000354:	af00      	add	r7, sp, #0
 8000356:	60f8      	str	r0, [r7, #12]
 8000358:	60b9      	str	r1, [r7, #8]
 800035a:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) data, len, HAL_MAX_DELAY);
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	b29a      	uxth	r2, r3
 8000360:	f04f 33ff 	mov.w	r3, #4294967295
 8000364:	68b9      	ldr	r1, [r7, #8]
 8000366:	4804      	ldr	r0, [pc, #16]	; (8000378 <_write+0x28>)
 8000368:	f001 fbf8 	bl	8001b5c <HAL_UART_Transmit>
	return len;
 800036c:	687b      	ldr	r3, [r7, #4]
}
 800036e:	4618      	mov	r0, r3
 8000370:	3710      	adds	r7, #16
 8000372:	46bd      	mov	sp, r7
 8000374:	bd80      	pop	{r7, pc}
 8000376:	bf00      	nop
 8000378:	200000ec 	.word	0x200000ec

0800037c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800037c:	b480      	push	{r7}
 800037e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000380:	b672      	cpsid	i
}
 8000382:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000384:	e7fe      	b.n	8000384 <Error_Handler+0x8>
	...

08000388 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000388:	b480      	push	{r7}
 800038a:	b083      	sub	sp, #12
 800038c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800038e:	4b0e      	ldr	r3, [pc, #56]	; (80003c8 <HAL_MspInit+0x40>)
 8000390:	699b      	ldr	r3, [r3, #24]
 8000392:	4a0d      	ldr	r2, [pc, #52]	; (80003c8 <HAL_MspInit+0x40>)
 8000394:	f043 0301 	orr.w	r3, r3, #1
 8000398:	6193      	str	r3, [r2, #24]
 800039a:	4b0b      	ldr	r3, [pc, #44]	; (80003c8 <HAL_MspInit+0x40>)
 800039c:	699b      	ldr	r3, [r3, #24]
 800039e:	f003 0301 	and.w	r3, r3, #1
 80003a2:	607b      	str	r3, [r7, #4]
 80003a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003a6:	4b08      	ldr	r3, [pc, #32]	; (80003c8 <HAL_MspInit+0x40>)
 80003a8:	69db      	ldr	r3, [r3, #28]
 80003aa:	4a07      	ldr	r2, [pc, #28]	; (80003c8 <HAL_MspInit+0x40>)
 80003ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003b0:	61d3      	str	r3, [r2, #28]
 80003b2:	4b05      	ldr	r3, [pc, #20]	; (80003c8 <HAL_MspInit+0x40>)
 80003b4:	69db      	ldr	r3, [r3, #28]
 80003b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003ba:	603b      	str	r3, [r7, #0]
 80003bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003be:	bf00      	nop
 80003c0:	370c      	adds	r7, #12
 80003c2:	46bd      	mov	sp, r7
 80003c4:	bc80      	pop	{r7}
 80003c6:	4770      	bx	lr
 80003c8:	40021000 	.word	0x40021000

080003cc <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80003cc:	b480      	push	{r7}
 80003ce:	b085      	sub	sp, #20
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	4a09      	ldr	r2, [pc, #36]	; (8000400 <HAL_CRC_MspInit+0x34>)
 80003da:	4293      	cmp	r3, r2
 80003dc:	d10b      	bne.n	80003f6 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80003de:	4b09      	ldr	r3, [pc, #36]	; (8000404 <HAL_CRC_MspInit+0x38>)
 80003e0:	695b      	ldr	r3, [r3, #20]
 80003e2:	4a08      	ldr	r2, [pc, #32]	; (8000404 <HAL_CRC_MspInit+0x38>)
 80003e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003e8:	6153      	str	r3, [r2, #20]
 80003ea:	4b06      	ldr	r3, [pc, #24]	; (8000404 <HAL_CRC_MspInit+0x38>)
 80003ec:	695b      	ldr	r3, [r3, #20]
 80003ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80003f2:	60fb      	str	r3, [r7, #12]
 80003f4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80003f6:	bf00      	nop
 80003f8:	3714      	adds	r7, #20
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bc80      	pop	{r7}
 80003fe:	4770      	bx	lr
 8000400:	40023000 	.word	0x40023000
 8000404:	40021000 	.word	0x40021000

08000408 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b08a      	sub	sp, #40	; 0x28
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000410:	f107 0318 	add.w	r3, r7, #24
 8000414:	2200      	movs	r2, #0
 8000416:	601a      	str	r2, [r3, #0]
 8000418:	605a      	str	r2, [r3, #4]
 800041a:	609a      	str	r2, [r3, #8]
 800041c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	4a44      	ldr	r2, [pc, #272]	; (8000534 <HAL_UART_MspInit+0x12c>)
 8000424:	4293      	cmp	r3, r2
 8000426:	d158      	bne.n	80004da <HAL_UART_MspInit+0xd2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000428:	4b43      	ldr	r3, [pc, #268]	; (8000538 <HAL_UART_MspInit+0x130>)
 800042a:	699b      	ldr	r3, [r3, #24]
 800042c:	4a42      	ldr	r2, [pc, #264]	; (8000538 <HAL_UART_MspInit+0x130>)
 800042e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000432:	6193      	str	r3, [r2, #24]
 8000434:	4b40      	ldr	r3, [pc, #256]	; (8000538 <HAL_UART_MspInit+0x130>)
 8000436:	699b      	ldr	r3, [r3, #24]
 8000438:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800043c:	617b      	str	r3, [r7, #20]
 800043e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000440:	4b3d      	ldr	r3, [pc, #244]	; (8000538 <HAL_UART_MspInit+0x130>)
 8000442:	699b      	ldr	r3, [r3, #24]
 8000444:	4a3c      	ldr	r2, [pc, #240]	; (8000538 <HAL_UART_MspInit+0x130>)
 8000446:	f043 0304 	orr.w	r3, r3, #4
 800044a:	6193      	str	r3, [r2, #24]
 800044c:	4b3a      	ldr	r3, [pc, #232]	; (8000538 <HAL_UART_MspInit+0x130>)
 800044e:	699b      	ldr	r3, [r3, #24]
 8000450:	f003 0304 	and.w	r3, r3, #4
 8000454:	613b      	str	r3, [r7, #16]
 8000456:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000458:	f44f 7300 	mov.w	r3, #512	; 0x200
 800045c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800045e:	2302      	movs	r3, #2
 8000460:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000462:	2303      	movs	r3, #3
 8000464:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000466:	f107 0318 	add.w	r3, r7, #24
 800046a:	4619      	mov	r1, r3
 800046c:	4833      	ldr	r0, [pc, #204]	; (800053c <HAL_UART_MspInit+0x134>)
 800046e:	f000 fd35 	bl	8000edc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000472:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000476:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000478:	2300      	movs	r3, #0
 800047a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800047c:	2300      	movs	r3, #0
 800047e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000480:	f107 0318 	add.w	r3, r7, #24
 8000484:	4619      	mov	r1, r3
 8000486:	482d      	ldr	r0, [pc, #180]	; (800053c <HAL_UART_MspInit+0x134>)
 8000488:	f000 fd28 	bl	8000edc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 800048c:	4b2c      	ldr	r3, [pc, #176]	; (8000540 <HAL_UART_MspInit+0x138>)
 800048e:	4a2d      	ldr	r2, [pc, #180]	; (8000544 <HAL_UART_MspInit+0x13c>)
 8000490:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000492:	4b2b      	ldr	r3, [pc, #172]	; (8000540 <HAL_UART_MspInit+0x138>)
 8000494:	2200      	movs	r2, #0
 8000496:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000498:	4b29      	ldr	r3, [pc, #164]	; (8000540 <HAL_UART_MspInit+0x138>)
 800049a:	2200      	movs	r2, #0
 800049c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800049e:	4b28      	ldr	r3, [pc, #160]	; (8000540 <HAL_UART_MspInit+0x138>)
 80004a0:	2280      	movs	r2, #128	; 0x80
 80004a2:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80004a4:	4b26      	ldr	r3, [pc, #152]	; (8000540 <HAL_UART_MspInit+0x138>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80004aa:	4b25      	ldr	r3, [pc, #148]	; (8000540 <HAL_UART_MspInit+0x138>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80004b0:	4b23      	ldr	r3, [pc, #140]	; (8000540 <HAL_UART_MspInit+0x138>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80004b6:	4b22      	ldr	r3, [pc, #136]	; (8000540 <HAL_UART_MspInit+0x138>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80004bc:	4820      	ldr	r0, [pc, #128]	; (8000540 <HAL_UART_MspInit+0x138>)
 80004be:	f000 fae5 	bl	8000a8c <HAL_DMA_Init>
 80004c2:	4603      	mov	r3, r0
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d001      	beq.n	80004cc <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 80004c8:	f7ff ff58 	bl	800037c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	4a1c      	ldr	r2, [pc, #112]	; (8000540 <HAL_UART_MspInit+0x138>)
 80004d0:	639a      	str	r2, [r3, #56]	; 0x38
 80004d2:	4a1b      	ldr	r2, [pc, #108]	; (8000540 <HAL_UART_MspInit+0x138>)
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80004d8:	e028      	b.n	800052c <HAL_UART_MspInit+0x124>
  else if(huart->Instance==USART2)
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	4a1a      	ldr	r2, [pc, #104]	; (8000548 <HAL_UART_MspInit+0x140>)
 80004e0:	4293      	cmp	r3, r2
 80004e2:	d123      	bne.n	800052c <HAL_UART_MspInit+0x124>
    __HAL_RCC_USART2_CLK_ENABLE();
 80004e4:	4b14      	ldr	r3, [pc, #80]	; (8000538 <HAL_UART_MspInit+0x130>)
 80004e6:	69db      	ldr	r3, [r3, #28]
 80004e8:	4a13      	ldr	r2, [pc, #76]	; (8000538 <HAL_UART_MspInit+0x130>)
 80004ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004ee:	61d3      	str	r3, [r2, #28]
 80004f0:	4b11      	ldr	r3, [pc, #68]	; (8000538 <HAL_UART_MspInit+0x130>)
 80004f2:	69db      	ldr	r3, [r3, #28]
 80004f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004f8:	60fb      	str	r3, [r7, #12]
 80004fa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004fc:	4b0e      	ldr	r3, [pc, #56]	; (8000538 <HAL_UART_MspInit+0x130>)
 80004fe:	699b      	ldr	r3, [r3, #24]
 8000500:	4a0d      	ldr	r2, [pc, #52]	; (8000538 <HAL_UART_MspInit+0x130>)
 8000502:	f043 0304 	orr.w	r3, r3, #4
 8000506:	6193      	str	r3, [r2, #24]
 8000508:	4b0b      	ldr	r3, [pc, #44]	; (8000538 <HAL_UART_MspInit+0x130>)
 800050a:	699b      	ldr	r3, [r3, #24]
 800050c:	f003 0304 	and.w	r3, r3, #4
 8000510:	60bb      	str	r3, [r7, #8]
 8000512:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000514:	2304      	movs	r3, #4
 8000516:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000518:	2312      	movs	r3, #18
 800051a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800051c:	2303      	movs	r3, #3
 800051e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000520:	f107 0318 	add.w	r3, r7, #24
 8000524:	4619      	mov	r1, r3
 8000526:	4805      	ldr	r0, [pc, #20]	; (800053c <HAL_UART_MspInit+0x134>)
 8000528:	f000 fcd8 	bl	8000edc <HAL_GPIO_Init>
}
 800052c:	bf00      	nop
 800052e:	3728      	adds	r7, #40	; 0x28
 8000530:	46bd      	mov	sp, r7
 8000532:	bd80      	pop	{r7, pc}
 8000534:	40013800 	.word	0x40013800
 8000538:	40021000 	.word	0x40021000
 800053c:	40010800 	.word	0x40010800
 8000540:	20000130 	.word	0x20000130
 8000544:	40020058 	.word	0x40020058
 8000548:	40004400 	.word	0x40004400

0800054c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000550:	e7fe      	b.n	8000550 <NMI_Handler+0x4>

08000552 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000552:	b480      	push	{r7}
 8000554:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000556:	e7fe      	b.n	8000556 <HardFault_Handler+0x4>

08000558 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000558:	b480      	push	{r7}
 800055a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800055c:	e7fe      	b.n	800055c <MemManage_Handler+0x4>

0800055e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800055e:	b480      	push	{r7}
 8000560:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000562:	e7fe      	b.n	8000562 <BusFault_Handler+0x4>

08000564 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000564:	b480      	push	{r7}
 8000566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000568:	e7fe      	b.n	8000568 <UsageFault_Handler+0x4>

0800056a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800056a:	b480      	push	{r7}
 800056c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800056e:	bf00      	nop
 8000570:	46bd      	mov	sp, r7
 8000572:	bc80      	pop	{r7}
 8000574:	4770      	bx	lr

08000576 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000576:	b480      	push	{r7}
 8000578:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800057a:	bf00      	nop
 800057c:	46bd      	mov	sp, r7
 800057e:	bc80      	pop	{r7}
 8000580:	4770      	bx	lr

08000582 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000582:	b480      	push	{r7}
 8000584:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000586:	bf00      	nop
 8000588:	46bd      	mov	sp, r7
 800058a:	bc80      	pop	{r7}
 800058c:	4770      	bx	lr

0800058e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800058e:	b580      	push	{r7, lr}
 8000590:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000592:	f000 f903 	bl	800079c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000596:	bf00      	nop
 8000598:	bd80      	pop	{r7, pc}
	...

0800059c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80005a0:	4802      	ldr	r0, [pc, #8]	; (80005ac <DMA1_Channel5_IRQHandler+0x10>)
 80005a2:	f000 fb67 	bl	8000c74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80005a6:	bf00      	nop
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	20000130 	.word	0x20000130

080005b0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b086      	sub	sp, #24
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	60f8      	str	r0, [r7, #12]
 80005b8:	60b9      	str	r1, [r7, #8]
 80005ba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005bc:	2300      	movs	r3, #0
 80005be:	617b      	str	r3, [r7, #20]
 80005c0:	e00a      	b.n	80005d8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80005c2:	f3af 8000 	nop.w
 80005c6:	4601      	mov	r1, r0
 80005c8:	68bb      	ldr	r3, [r7, #8]
 80005ca:	1c5a      	adds	r2, r3, #1
 80005cc:	60ba      	str	r2, [r7, #8]
 80005ce:	b2ca      	uxtb	r2, r1
 80005d0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005d2:	697b      	ldr	r3, [r7, #20]
 80005d4:	3301      	adds	r3, #1
 80005d6:	617b      	str	r3, [r7, #20]
 80005d8:	697a      	ldr	r2, [r7, #20]
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	429a      	cmp	r2, r3
 80005de:	dbf0      	blt.n	80005c2 <_read+0x12>
  }

  return len;
 80005e0:	687b      	ldr	r3, [r7, #4]
}
 80005e2:	4618      	mov	r0, r3
 80005e4:	3718      	adds	r7, #24
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}

080005ea <_close>:
  }
  return len;
}

int _close(int file)
{
 80005ea:	b480      	push	{r7}
 80005ec:	b083      	sub	sp, #12
 80005ee:	af00      	add	r7, sp, #0
 80005f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80005f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80005f6:	4618      	mov	r0, r3
 80005f8:	370c      	adds	r7, #12
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bc80      	pop	{r7}
 80005fe:	4770      	bx	lr

08000600 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000600:	b480      	push	{r7}
 8000602:	b083      	sub	sp, #12
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
 8000608:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800060a:	683b      	ldr	r3, [r7, #0]
 800060c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000610:	605a      	str	r2, [r3, #4]
  return 0;
 8000612:	2300      	movs	r3, #0
}
 8000614:	4618      	mov	r0, r3
 8000616:	370c      	adds	r7, #12
 8000618:	46bd      	mov	sp, r7
 800061a:	bc80      	pop	{r7}
 800061c:	4770      	bx	lr

0800061e <_isatty>:

int _isatty(int file)
{
 800061e:	b480      	push	{r7}
 8000620:	b083      	sub	sp, #12
 8000622:	af00      	add	r7, sp, #0
 8000624:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000626:	2301      	movs	r3, #1
}
 8000628:	4618      	mov	r0, r3
 800062a:	370c      	adds	r7, #12
 800062c:	46bd      	mov	sp, r7
 800062e:	bc80      	pop	{r7}
 8000630:	4770      	bx	lr

08000632 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000632:	b480      	push	{r7}
 8000634:	b085      	sub	sp, #20
 8000636:	af00      	add	r7, sp, #0
 8000638:	60f8      	str	r0, [r7, #12]
 800063a:	60b9      	str	r1, [r7, #8]
 800063c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800063e:	2300      	movs	r3, #0
}
 8000640:	4618      	mov	r0, r3
 8000642:	3714      	adds	r7, #20
 8000644:	46bd      	mov	sp, r7
 8000646:	bc80      	pop	{r7}
 8000648:	4770      	bx	lr
	...

0800064c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b086      	sub	sp, #24
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000654:	4a14      	ldr	r2, [pc, #80]	; (80006a8 <_sbrk+0x5c>)
 8000656:	4b15      	ldr	r3, [pc, #84]	; (80006ac <_sbrk+0x60>)
 8000658:	1ad3      	subs	r3, r2, r3
 800065a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800065c:	697b      	ldr	r3, [r7, #20]
 800065e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000660:	4b13      	ldr	r3, [pc, #76]	; (80006b0 <_sbrk+0x64>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d102      	bne.n	800066e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000668:	4b11      	ldr	r3, [pc, #68]	; (80006b0 <_sbrk+0x64>)
 800066a:	4a12      	ldr	r2, [pc, #72]	; (80006b4 <_sbrk+0x68>)
 800066c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800066e:	4b10      	ldr	r3, [pc, #64]	; (80006b0 <_sbrk+0x64>)
 8000670:	681a      	ldr	r2, [r3, #0]
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	4413      	add	r3, r2
 8000676:	693a      	ldr	r2, [r7, #16]
 8000678:	429a      	cmp	r2, r3
 800067a:	d207      	bcs.n	800068c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800067c:	f002 fdf4 	bl	8003268 <__errno>
 8000680:	4603      	mov	r3, r0
 8000682:	220c      	movs	r2, #12
 8000684:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000686:	f04f 33ff 	mov.w	r3, #4294967295
 800068a:	e009      	b.n	80006a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800068c:	4b08      	ldr	r3, [pc, #32]	; (80006b0 <_sbrk+0x64>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000692:	4b07      	ldr	r3, [pc, #28]	; (80006b0 <_sbrk+0x64>)
 8000694:	681a      	ldr	r2, [r3, #0]
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	4413      	add	r3, r2
 800069a:	4a05      	ldr	r2, [pc, #20]	; (80006b0 <_sbrk+0x64>)
 800069c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800069e:	68fb      	ldr	r3, [r7, #12]
}
 80006a0:	4618      	mov	r0, r3
 80006a2:	3718      	adds	r7, #24
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	20005000 	.word	0x20005000
 80006ac:	00000400 	.word	0x00000400
 80006b0:	20000174 	.word	0x20000174
 80006b4:	200012c0 	.word	0x200012c0

080006b8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006bc:	bf00      	nop
 80006be:	46bd      	mov	sp, r7
 80006c0:	bc80      	pop	{r7}
 80006c2:	4770      	bx	lr

080006c4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006c4:	480c      	ldr	r0, [pc, #48]	; (80006f8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80006c6:	490d      	ldr	r1, [pc, #52]	; (80006fc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80006c8:	4a0d      	ldr	r2, [pc, #52]	; (8000700 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80006ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006cc:	e002      	b.n	80006d4 <LoopCopyDataInit>

080006ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006d2:	3304      	adds	r3, #4

080006d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006d8:	d3f9      	bcc.n	80006ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006da:	4a0a      	ldr	r2, [pc, #40]	; (8000704 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80006dc:	4c0a      	ldr	r4, [pc, #40]	; (8000708 <LoopFillZerobss+0x22>)
  movs r3, #0
 80006de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006e0:	e001      	b.n	80006e6 <LoopFillZerobss>

080006e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006e4:	3204      	adds	r2, #4

080006e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006e8:	d3fb      	bcc.n	80006e2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80006ea:	f7ff ffe5 	bl	80006b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006ee:	f002 fdc1 	bl	8003274 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006f2:	f7ff fd2b 	bl	800014c <main>
  bx lr
 80006f6:	4770      	bx	lr
  ldr r0, =_sdata
 80006f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006fc:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8000700:	08004fc8 	.word	0x08004fc8
  ldr r2, =_sbss
 8000704:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8000708:	200012bc 	.word	0x200012bc

0800070c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800070c:	e7fe      	b.n	800070c <ADC1_2_IRQHandler>
	...

08000710 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000714:	4b08      	ldr	r3, [pc, #32]	; (8000738 <HAL_Init+0x28>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4a07      	ldr	r2, [pc, #28]	; (8000738 <HAL_Init+0x28>)
 800071a:	f043 0310 	orr.w	r3, r3, #16
 800071e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000720:	2003      	movs	r0, #3
 8000722:	f000 f923 	bl	800096c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000726:	200f      	movs	r0, #15
 8000728:	f000 f808 	bl	800073c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800072c:	f7ff fe2c 	bl	8000388 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000730:	2300      	movs	r3, #0
}
 8000732:	4618      	mov	r0, r3
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	40022000 	.word	0x40022000

0800073c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000744:	4b12      	ldr	r3, [pc, #72]	; (8000790 <HAL_InitTick+0x54>)
 8000746:	681a      	ldr	r2, [r3, #0]
 8000748:	4b12      	ldr	r3, [pc, #72]	; (8000794 <HAL_InitTick+0x58>)
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	4619      	mov	r1, r3
 800074e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000752:	fbb3 f3f1 	udiv	r3, r3, r1
 8000756:	fbb2 f3f3 	udiv	r3, r2, r3
 800075a:	4618      	mov	r0, r3
 800075c:	f000 f93b 	bl	80009d6 <HAL_SYSTICK_Config>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000766:	2301      	movs	r3, #1
 8000768:	e00e      	b.n	8000788 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	2b0f      	cmp	r3, #15
 800076e:	d80a      	bhi.n	8000786 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000770:	2200      	movs	r2, #0
 8000772:	6879      	ldr	r1, [r7, #4]
 8000774:	f04f 30ff 	mov.w	r0, #4294967295
 8000778:	f000 f903 	bl	8000982 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800077c:	4a06      	ldr	r2, [pc, #24]	; (8000798 <HAL_InitTick+0x5c>)
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000782:	2300      	movs	r3, #0
 8000784:	e000      	b.n	8000788 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000786:	2301      	movs	r3, #1
}
 8000788:	4618      	mov	r0, r3
 800078a:	3708      	adds	r7, #8
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	20000000 	.word	0x20000000
 8000794:	20000008 	.word	0x20000008
 8000798:	20000004 	.word	0x20000004

0800079c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007a0:	4b05      	ldr	r3, [pc, #20]	; (80007b8 <HAL_IncTick+0x1c>)
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	461a      	mov	r2, r3
 80007a6:	4b05      	ldr	r3, [pc, #20]	; (80007bc <HAL_IncTick+0x20>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	4413      	add	r3, r2
 80007ac:	4a03      	ldr	r2, [pc, #12]	; (80007bc <HAL_IncTick+0x20>)
 80007ae:	6013      	str	r3, [r2, #0]
}
 80007b0:	bf00      	nop
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bc80      	pop	{r7}
 80007b6:	4770      	bx	lr
 80007b8:	20000008 	.word	0x20000008
 80007bc:	20000178 	.word	0x20000178

080007c0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  return uwTick;
 80007c4:	4b02      	ldr	r3, [pc, #8]	; (80007d0 <HAL_GetTick+0x10>)
 80007c6:	681b      	ldr	r3, [r3, #0]
}
 80007c8:	4618      	mov	r0, r3
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bc80      	pop	{r7}
 80007ce:	4770      	bx	lr
 80007d0:	20000178 	.word	0x20000178

080007d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b085      	sub	sp, #20
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	f003 0307 	and.w	r3, r3, #7
 80007e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007e4:	4b0c      	ldr	r3, [pc, #48]	; (8000818 <__NVIC_SetPriorityGrouping+0x44>)
 80007e6:	68db      	ldr	r3, [r3, #12]
 80007e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007ea:	68ba      	ldr	r2, [r7, #8]
 80007ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007f0:	4013      	ands	r3, r2
 80007f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007f8:	68bb      	ldr	r3, [r7, #8]
 80007fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000800:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000804:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000806:	4a04      	ldr	r2, [pc, #16]	; (8000818 <__NVIC_SetPriorityGrouping+0x44>)
 8000808:	68bb      	ldr	r3, [r7, #8]
 800080a:	60d3      	str	r3, [r2, #12]
}
 800080c:	bf00      	nop
 800080e:	3714      	adds	r7, #20
 8000810:	46bd      	mov	sp, r7
 8000812:	bc80      	pop	{r7}
 8000814:	4770      	bx	lr
 8000816:	bf00      	nop
 8000818:	e000ed00 	.word	0xe000ed00

0800081c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000820:	4b04      	ldr	r3, [pc, #16]	; (8000834 <__NVIC_GetPriorityGrouping+0x18>)
 8000822:	68db      	ldr	r3, [r3, #12]
 8000824:	0a1b      	lsrs	r3, r3, #8
 8000826:	f003 0307 	and.w	r3, r3, #7
}
 800082a:	4618      	mov	r0, r3
 800082c:	46bd      	mov	sp, r7
 800082e:	bc80      	pop	{r7}
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop
 8000834:	e000ed00 	.word	0xe000ed00

08000838 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000838:	b480      	push	{r7}
 800083a:	b083      	sub	sp, #12
 800083c:	af00      	add	r7, sp, #0
 800083e:	4603      	mov	r3, r0
 8000840:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000846:	2b00      	cmp	r3, #0
 8000848:	db0b      	blt.n	8000862 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800084a:	79fb      	ldrb	r3, [r7, #7]
 800084c:	f003 021f 	and.w	r2, r3, #31
 8000850:	4906      	ldr	r1, [pc, #24]	; (800086c <__NVIC_EnableIRQ+0x34>)
 8000852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000856:	095b      	lsrs	r3, r3, #5
 8000858:	2001      	movs	r0, #1
 800085a:	fa00 f202 	lsl.w	r2, r0, r2
 800085e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000862:	bf00      	nop
 8000864:	370c      	adds	r7, #12
 8000866:	46bd      	mov	sp, r7
 8000868:	bc80      	pop	{r7}
 800086a:	4770      	bx	lr
 800086c:	e000e100 	.word	0xe000e100

08000870 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000870:	b480      	push	{r7}
 8000872:	b083      	sub	sp, #12
 8000874:	af00      	add	r7, sp, #0
 8000876:	4603      	mov	r3, r0
 8000878:	6039      	str	r1, [r7, #0]
 800087a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800087c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000880:	2b00      	cmp	r3, #0
 8000882:	db0a      	blt.n	800089a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000884:	683b      	ldr	r3, [r7, #0]
 8000886:	b2da      	uxtb	r2, r3
 8000888:	490c      	ldr	r1, [pc, #48]	; (80008bc <__NVIC_SetPriority+0x4c>)
 800088a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800088e:	0112      	lsls	r2, r2, #4
 8000890:	b2d2      	uxtb	r2, r2
 8000892:	440b      	add	r3, r1
 8000894:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000898:	e00a      	b.n	80008b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800089a:	683b      	ldr	r3, [r7, #0]
 800089c:	b2da      	uxtb	r2, r3
 800089e:	4908      	ldr	r1, [pc, #32]	; (80008c0 <__NVIC_SetPriority+0x50>)
 80008a0:	79fb      	ldrb	r3, [r7, #7]
 80008a2:	f003 030f 	and.w	r3, r3, #15
 80008a6:	3b04      	subs	r3, #4
 80008a8:	0112      	lsls	r2, r2, #4
 80008aa:	b2d2      	uxtb	r2, r2
 80008ac:	440b      	add	r3, r1
 80008ae:	761a      	strb	r2, [r3, #24]
}
 80008b0:	bf00      	nop
 80008b2:	370c      	adds	r7, #12
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bc80      	pop	{r7}
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop
 80008bc:	e000e100 	.word	0xe000e100
 80008c0:	e000ed00 	.word	0xe000ed00

080008c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008c4:	b480      	push	{r7}
 80008c6:	b089      	sub	sp, #36	; 0x24
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	60f8      	str	r0, [r7, #12]
 80008cc:	60b9      	str	r1, [r7, #8]
 80008ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	f003 0307 	and.w	r3, r3, #7
 80008d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008d8:	69fb      	ldr	r3, [r7, #28]
 80008da:	f1c3 0307 	rsb	r3, r3, #7
 80008de:	2b04      	cmp	r3, #4
 80008e0:	bf28      	it	cs
 80008e2:	2304      	movcs	r3, #4
 80008e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008e6:	69fb      	ldr	r3, [r7, #28]
 80008e8:	3304      	adds	r3, #4
 80008ea:	2b06      	cmp	r3, #6
 80008ec:	d902      	bls.n	80008f4 <NVIC_EncodePriority+0x30>
 80008ee:	69fb      	ldr	r3, [r7, #28]
 80008f0:	3b03      	subs	r3, #3
 80008f2:	e000      	b.n	80008f6 <NVIC_EncodePriority+0x32>
 80008f4:	2300      	movs	r3, #0
 80008f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008f8:	f04f 32ff 	mov.w	r2, #4294967295
 80008fc:	69bb      	ldr	r3, [r7, #24]
 80008fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000902:	43da      	mvns	r2, r3
 8000904:	68bb      	ldr	r3, [r7, #8]
 8000906:	401a      	ands	r2, r3
 8000908:	697b      	ldr	r3, [r7, #20]
 800090a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800090c:	f04f 31ff 	mov.w	r1, #4294967295
 8000910:	697b      	ldr	r3, [r7, #20]
 8000912:	fa01 f303 	lsl.w	r3, r1, r3
 8000916:	43d9      	mvns	r1, r3
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800091c:	4313      	orrs	r3, r2
         );
}
 800091e:	4618      	mov	r0, r3
 8000920:	3724      	adds	r7, #36	; 0x24
 8000922:	46bd      	mov	sp, r7
 8000924:	bc80      	pop	{r7}
 8000926:	4770      	bx	lr

08000928 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	3b01      	subs	r3, #1
 8000934:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000938:	d301      	bcc.n	800093e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800093a:	2301      	movs	r3, #1
 800093c:	e00f      	b.n	800095e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800093e:	4a0a      	ldr	r2, [pc, #40]	; (8000968 <SysTick_Config+0x40>)
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	3b01      	subs	r3, #1
 8000944:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000946:	210f      	movs	r1, #15
 8000948:	f04f 30ff 	mov.w	r0, #4294967295
 800094c:	f7ff ff90 	bl	8000870 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000950:	4b05      	ldr	r3, [pc, #20]	; (8000968 <SysTick_Config+0x40>)
 8000952:	2200      	movs	r2, #0
 8000954:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000956:	4b04      	ldr	r3, [pc, #16]	; (8000968 <SysTick_Config+0x40>)
 8000958:	2207      	movs	r2, #7
 800095a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800095c:	2300      	movs	r3, #0
}
 800095e:	4618      	mov	r0, r3
 8000960:	3708      	adds	r7, #8
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	e000e010 	.word	0xe000e010

0800096c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000974:	6878      	ldr	r0, [r7, #4]
 8000976:	f7ff ff2d 	bl	80007d4 <__NVIC_SetPriorityGrouping>
}
 800097a:	bf00      	nop
 800097c:	3708      	adds	r7, #8
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}

08000982 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000982:	b580      	push	{r7, lr}
 8000984:	b086      	sub	sp, #24
 8000986:	af00      	add	r7, sp, #0
 8000988:	4603      	mov	r3, r0
 800098a:	60b9      	str	r1, [r7, #8]
 800098c:	607a      	str	r2, [r7, #4]
 800098e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000990:	2300      	movs	r3, #0
 8000992:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000994:	f7ff ff42 	bl	800081c <__NVIC_GetPriorityGrouping>
 8000998:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800099a:	687a      	ldr	r2, [r7, #4]
 800099c:	68b9      	ldr	r1, [r7, #8]
 800099e:	6978      	ldr	r0, [r7, #20]
 80009a0:	f7ff ff90 	bl	80008c4 <NVIC_EncodePriority>
 80009a4:	4602      	mov	r2, r0
 80009a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009aa:	4611      	mov	r1, r2
 80009ac:	4618      	mov	r0, r3
 80009ae:	f7ff ff5f 	bl	8000870 <__NVIC_SetPriority>
}
 80009b2:	bf00      	nop
 80009b4:	3718      	adds	r7, #24
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}

080009ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009ba:	b580      	push	{r7, lr}
 80009bc:	b082      	sub	sp, #8
 80009be:	af00      	add	r7, sp, #0
 80009c0:	4603      	mov	r3, r0
 80009c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009c8:	4618      	mov	r0, r3
 80009ca:	f7ff ff35 	bl	8000838 <__NVIC_EnableIRQ>
}
 80009ce:	bf00      	nop
 80009d0:	3708      	adds	r7, #8
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}

080009d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009d6:	b580      	push	{r7, lr}
 80009d8:	b082      	sub	sp, #8
 80009da:	af00      	add	r7, sp, #0
 80009dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009de:	6878      	ldr	r0, [r7, #4]
 80009e0:	f7ff ffa2 	bl	8000928 <SysTick_Config>
 80009e4:	4603      	mov	r3, r0
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	3708      	adds	r7, #8
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}

080009ee <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80009ee:	b580      	push	{r7, lr}
 80009f0:	b082      	sub	sp, #8
 80009f2:	af00      	add	r7, sp, #0
 80009f4:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d101      	bne.n	8000a00 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80009fc:	2301      	movs	r3, #1
 80009fe:	e00e      	b.n	8000a1e <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	795b      	ldrb	r3, [r3, #5]
 8000a04:	b2db      	uxtb	r3, r3
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d105      	bne.n	8000a16 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8000a10:	6878      	ldr	r0, [r7, #4]
 8000a12:	f7ff fcdb 	bl	80003cc <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	2201      	movs	r2, #1
 8000a1a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8000a1c:	2300      	movs	r3, #0
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	3708      	adds	r7, #8
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}

08000a26 <HAL_CRC_Calculate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8000a26:	b480      	push	{r7}
 8000a28:	b087      	sub	sp, #28
 8000a2a:	af00      	add	r7, sp, #0
 8000a2c:	60f8      	str	r0, [r7, #12]
 8000a2e:	60b9      	str	r1, [r7, #8]
 8000a30:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8000a32:	2300      	movs	r3, #0
 8000a34:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	2202      	movs	r2, #2
 8000a3a:	715a      	strb	r2, [r3, #5]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	689a      	ldr	r2, [r3, #8]
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	f042 0201 	orr.w	r2, r2, #1
 8000a4a:	609a      	str	r2, [r3, #8]

  /* Enter 32-bit input data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	617b      	str	r3, [r7, #20]
 8000a50:	e00a      	b.n	8000a68 <HAL_CRC_Calculate+0x42>
  {
    hcrc->Instance->DR = pBuffer[index];
 8000a52:	697b      	ldr	r3, [r7, #20]
 8000a54:	009b      	lsls	r3, r3, #2
 8000a56:	68ba      	ldr	r2, [r7, #8]
 8000a58:	441a      	add	r2, r3
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	6812      	ldr	r2, [r2, #0]
 8000a60:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 8000a62:	697b      	ldr	r3, [r7, #20]
 8000a64:	3301      	adds	r3, #1
 8000a66:	617b      	str	r3, [r7, #20]
 8000a68:	697a      	ldr	r2, [r7, #20]
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	429a      	cmp	r2, r3
 8000a6e:	d3f0      	bcc.n	8000a52 <HAL_CRC_Calculate+0x2c>
  }
  temp = hcrc->Instance->DR;
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 8000a7e:	693b      	ldr	r3, [r7, #16]
}
 8000a80:	4618      	mov	r0, r3
 8000a82:	371c      	adds	r7, #28
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bc80      	pop	{r7}
 8000a88:	4770      	bx	lr
	...

08000a8c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b085      	sub	sp, #20
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000a94:	2300      	movs	r3, #0
 8000a96:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d101      	bne.n	8000aa2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	e043      	b.n	8000b2a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	461a      	mov	r2, r3
 8000aa8:	4b22      	ldr	r3, [pc, #136]	; (8000b34 <HAL_DMA_Init+0xa8>)
 8000aaa:	4413      	add	r3, r2
 8000aac:	4a22      	ldr	r2, [pc, #136]	; (8000b38 <HAL_DMA_Init+0xac>)
 8000aae:	fba2 2303 	umull	r2, r3, r2, r3
 8000ab2:	091b      	lsrs	r3, r3, #4
 8000ab4:	009a      	lsls	r2, r3, #2
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	4a1f      	ldr	r2, [pc, #124]	; (8000b3c <HAL_DMA_Init+0xb0>)
 8000abe:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	2202      	movs	r2, #2
 8000ac4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000ad6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000ada:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000ae4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	68db      	ldr	r3, [r3, #12]
 8000aea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000af0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	695b      	ldr	r3, [r3, #20]
 8000af6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000afc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	69db      	ldr	r3, [r3, #28]
 8000b02:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000b04:	68fa      	ldr	r2, [r7, #12]
 8000b06:	4313      	orrs	r3, r2
 8000b08:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	68fa      	ldr	r2, [r7, #12]
 8000b10:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	2200      	movs	r2, #0
 8000b16:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	2200      	movs	r2, #0
 8000b24:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000b28:	2300      	movs	r3, #0
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	3714      	adds	r7, #20
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bc80      	pop	{r7}
 8000b32:	4770      	bx	lr
 8000b34:	bffdfff8 	.word	0xbffdfff8
 8000b38:	cccccccd 	.word	0xcccccccd
 8000b3c:	40020000 	.word	0x40020000

08000b40 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b086      	sub	sp, #24
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	60f8      	str	r0, [r7, #12]
 8000b48:	60b9      	str	r1, [r7, #8]
 8000b4a:	607a      	str	r2, [r7, #4]
 8000b4c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b58:	2b01      	cmp	r3, #1
 8000b5a:	d101      	bne.n	8000b60 <HAL_DMA_Start_IT+0x20>
 8000b5c:	2302      	movs	r3, #2
 8000b5e:	e04a      	b.n	8000bf6 <HAL_DMA_Start_IT+0xb6>
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	2201      	movs	r2, #1
 8000b64:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000b6e:	2b01      	cmp	r3, #1
 8000b70:	d13a      	bne.n	8000be8 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	2202      	movs	r2, #2
 8000b76:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	681a      	ldr	r2, [r3, #0]
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	f022 0201 	bic.w	r2, r2, #1
 8000b8e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	687a      	ldr	r2, [r7, #4]
 8000b94:	68b9      	ldr	r1, [r7, #8]
 8000b96:	68f8      	ldr	r0, [r7, #12]
 8000b98:	f000 f972 	bl	8000e80 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d008      	beq.n	8000bb6 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	681a      	ldr	r2, [r3, #0]
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	f042 020e 	orr.w	r2, r2, #14
 8000bb2:	601a      	str	r2, [r3, #0]
 8000bb4:	e00f      	b.n	8000bd6 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	681a      	ldr	r2, [r3, #0]
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	f022 0204 	bic.w	r2, r2, #4
 8000bc4:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	681a      	ldr	r2, [r3, #0]
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	f042 020a 	orr.w	r2, r2, #10
 8000bd4:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	681a      	ldr	r2, [r3, #0]
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	f042 0201 	orr.w	r2, r2, #1
 8000be4:	601a      	str	r2, [r3, #0]
 8000be6:	e005      	b.n	8000bf4 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	2200      	movs	r2, #0
 8000bec:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000bf0:	2302      	movs	r3, #2
 8000bf2:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8000bf4:	7dfb      	ldrb	r3, [r7, #23]
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	3718      	adds	r7, #24
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}

08000bfe <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000bfe:	b480      	push	{r7}
 8000c00:	b085      	sub	sp, #20
 8000c02:	af00      	add	r7, sp, #0
 8000c04:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c06:	2300      	movs	r3, #0
 8000c08:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000c10:	2b02      	cmp	r3, #2
 8000c12:	d008      	beq.n	8000c26 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	2204      	movs	r2, #4
 8000c18:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000c22:	2301      	movs	r3, #1
 8000c24:	e020      	b.n	8000c68 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	681a      	ldr	r2, [r3, #0]
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	f022 020e 	bic.w	r2, r2, #14
 8000c34:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	681a      	ldr	r2, [r3, #0]
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	f022 0201 	bic.w	r2, r2, #1
 8000c44:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c4e:	2101      	movs	r1, #1
 8000c50:	fa01 f202 	lsl.w	r2, r1, r2
 8000c54:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	2201      	movs	r2, #1
 8000c5a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	2200      	movs	r2, #0
 8000c62:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000c66:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c68:	4618      	mov	r0, r3
 8000c6a:	3714      	adds	r7, #20
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bc80      	pop	{r7}
 8000c70:	4770      	bx	lr
	...

08000c74 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b084      	sub	sp, #16
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c90:	2204      	movs	r2, #4
 8000c92:	409a      	lsls	r2, r3
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	4013      	ands	r3, r2
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d04f      	beq.n	8000d3c <HAL_DMA_IRQHandler+0xc8>
 8000c9c:	68bb      	ldr	r3, [r7, #8]
 8000c9e:	f003 0304 	and.w	r3, r3, #4
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d04a      	beq.n	8000d3c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	f003 0320 	and.w	r3, r3, #32
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d107      	bne.n	8000cc4 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	681a      	ldr	r2, [r3, #0]
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	f022 0204 	bic.w	r2, r2, #4
 8000cc2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a66      	ldr	r2, [pc, #408]	; (8000e64 <HAL_DMA_IRQHandler+0x1f0>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d029      	beq.n	8000d22 <HAL_DMA_IRQHandler+0xae>
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	4a65      	ldr	r2, [pc, #404]	; (8000e68 <HAL_DMA_IRQHandler+0x1f4>)
 8000cd4:	4293      	cmp	r3, r2
 8000cd6:	d022      	beq.n	8000d1e <HAL_DMA_IRQHandler+0xaa>
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a63      	ldr	r2, [pc, #396]	; (8000e6c <HAL_DMA_IRQHandler+0x1f8>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d01a      	beq.n	8000d18 <HAL_DMA_IRQHandler+0xa4>
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4a62      	ldr	r2, [pc, #392]	; (8000e70 <HAL_DMA_IRQHandler+0x1fc>)
 8000ce8:	4293      	cmp	r3, r2
 8000cea:	d012      	beq.n	8000d12 <HAL_DMA_IRQHandler+0x9e>
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a60      	ldr	r2, [pc, #384]	; (8000e74 <HAL_DMA_IRQHandler+0x200>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d00a      	beq.n	8000d0c <HAL_DMA_IRQHandler+0x98>
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	4a5f      	ldr	r2, [pc, #380]	; (8000e78 <HAL_DMA_IRQHandler+0x204>)
 8000cfc:	4293      	cmp	r3, r2
 8000cfe:	d102      	bne.n	8000d06 <HAL_DMA_IRQHandler+0x92>
 8000d00:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d04:	e00e      	b.n	8000d24 <HAL_DMA_IRQHandler+0xb0>
 8000d06:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000d0a:	e00b      	b.n	8000d24 <HAL_DMA_IRQHandler+0xb0>
 8000d0c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000d10:	e008      	b.n	8000d24 <HAL_DMA_IRQHandler+0xb0>
 8000d12:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000d16:	e005      	b.n	8000d24 <HAL_DMA_IRQHandler+0xb0>
 8000d18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d1c:	e002      	b.n	8000d24 <HAL_DMA_IRQHandler+0xb0>
 8000d1e:	2340      	movs	r3, #64	; 0x40
 8000d20:	e000      	b.n	8000d24 <HAL_DMA_IRQHandler+0xb0>
 8000d22:	2304      	movs	r3, #4
 8000d24:	4a55      	ldr	r2, [pc, #340]	; (8000e7c <HAL_DMA_IRQHandler+0x208>)
 8000d26:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	f000 8094 	beq.w	8000e5a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d36:	6878      	ldr	r0, [r7, #4]
 8000d38:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8000d3a:	e08e      	b.n	8000e5a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d40:	2202      	movs	r2, #2
 8000d42:	409a      	lsls	r2, r3
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	4013      	ands	r3, r2
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d056      	beq.n	8000dfa <HAL_DMA_IRQHandler+0x186>
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	f003 0302 	and.w	r3, r3, #2
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d051      	beq.n	8000dfa <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	f003 0320 	and.w	r3, r3, #32
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d10b      	bne.n	8000d7c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	681a      	ldr	r2, [r3, #0]
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	f022 020a 	bic.w	r2, r2, #10
 8000d72:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	2201      	movs	r2, #1
 8000d78:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a38      	ldr	r2, [pc, #224]	; (8000e64 <HAL_DMA_IRQHandler+0x1f0>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d029      	beq.n	8000dda <HAL_DMA_IRQHandler+0x166>
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	4a37      	ldr	r2, [pc, #220]	; (8000e68 <HAL_DMA_IRQHandler+0x1f4>)
 8000d8c:	4293      	cmp	r3, r2
 8000d8e:	d022      	beq.n	8000dd6 <HAL_DMA_IRQHandler+0x162>
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a35      	ldr	r2, [pc, #212]	; (8000e6c <HAL_DMA_IRQHandler+0x1f8>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d01a      	beq.n	8000dd0 <HAL_DMA_IRQHandler+0x15c>
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	4a34      	ldr	r2, [pc, #208]	; (8000e70 <HAL_DMA_IRQHandler+0x1fc>)
 8000da0:	4293      	cmp	r3, r2
 8000da2:	d012      	beq.n	8000dca <HAL_DMA_IRQHandler+0x156>
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a32      	ldr	r2, [pc, #200]	; (8000e74 <HAL_DMA_IRQHandler+0x200>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d00a      	beq.n	8000dc4 <HAL_DMA_IRQHandler+0x150>
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4a31      	ldr	r2, [pc, #196]	; (8000e78 <HAL_DMA_IRQHandler+0x204>)
 8000db4:	4293      	cmp	r3, r2
 8000db6:	d102      	bne.n	8000dbe <HAL_DMA_IRQHandler+0x14a>
 8000db8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000dbc:	e00e      	b.n	8000ddc <HAL_DMA_IRQHandler+0x168>
 8000dbe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000dc2:	e00b      	b.n	8000ddc <HAL_DMA_IRQHandler+0x168>
 8000dc4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000dc8:	e008      	b.n	8000ddc <HAL_DMA_IRQHandler+0x168>
 8000dca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dce:	e005      	b.n	8000ddc <HAL_DMA_IRQHandler+0x168>
 8000dd0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000dd4:	e002      	b.n	8000ddc <HAL_DMA_IRQHandler+0x168>
 8000dd6:	2320      	movs	r3, #32
 8000dd8:	e000      	b.n	8000ddc <HAL_DMA_IRQHandler+0x168>
 8000dda:	2302      	movs	r3, #2
 8000ddc:	4a27      	ldr	r2, [pc, #156]	; (8000e7c <HAL_DMA_IRQHandler+0x208>)
 8000dde:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	2200      	movs	r2, #0
 8000de4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d034      	beq.n	8000e5a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000df4:	6878      	ldr	r0, [r7, #4]
 8000df6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000df8:	e02f      	b.n	8000e5a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfe:	2208      	movs	r2, #8
 8000e00:	409a      	lsls	r2, r3
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	4013      	ands	r3, r2
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d028      	beq.n	8000e5c <HAL_DMA_IRQHandler+0x1e8>
 8000e0a:	68bb      	ldr	r3, [r7, #8]
 8000e0c:	f003 0308 	and.w	r3, r3, #8
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d023      	beq.n	8000e5c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	f022 020e 	bic.w	r2, r2, #14
 8000e22:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e2c:	2101      	movs	r1, #1
 8000e2e:	fa01 f202 	lsl.w	r2, r1, r2
 8000e32:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	2201      	movs	r2, #1
 8000e38:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	2200      	movs	r2, #0
 8000e46:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d004      	beq.n	8000e5c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e56:	6878      	ldr	r0, [r7, #4]
 8000e58:	4798      	blx	r3
    }
  }
  return;
 8000e5a:	bf00      	nop
 8000e5c:	bf00      	nop
}
 8000e5e:	3710      	adds	r7, #16
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	40020008 	.word	0x40020008
 8000e68:	4002001c 	.word	0x4002001c
 8000e6c:	40020030 	.word	0x40020030
 8000e70:	40020044 	.word	0x40020044
 8000e74:	40020058 	.word	0x40020058
 8000e78:	4002006c 	.word	0x4002006c
 8000e7c:	40020000 	.word	0x40020000

08000e80 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b085      	sub	sp, #20
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	60f8      	str	r0, [r7, #12]
 8000e88:	60b9      	str	r1, [r7, #8]
 8000e8a:	607a      	str	r2, [r7, #4]
 8000e8c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e96:	2101      	movs	r1, #1
 8000e98:	fa01 f202 	lsl.w	r2, r1, r2
 8000e9c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	683a      	ldr	r2, [r7, #0]
 8000ea4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	2b10      	cmp	r3, #16
 8000eac:	d108      	bne.n	8000ec0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	687a      	ldr	r2, [r7, #4]
 8000eb4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	68ba      	ldr	r2, [r7, #8]
 8000ebc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000ebe:	e007      	b.n	8000ed0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	68ba      	ldr	r2, [r7, #8]
 8000ec6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	687a      	ldr	r2, [r7, #4]
 8000ece:	60da      	str	r2, [r3, #12]
}
 8000ed0:	bf00      	nop
 8000ed2:	3714      	adds	r7, #20
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bc80      	pop	{r7}
 8000ed8:	4770      	bx	lr
	...

08000edc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b08b      	sub	sp, #44	; 0x2c
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
 8000ee4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000eea:	2300      	movs	r3, #0
 8000eec:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000eee:	e169      	b.n	80011c4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	69fa      	ldr	r2, [r7, #28]
 8000f00:	4013      	ands	r3, r2
 8000f02:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000f04:	69ba      	ldr	r2, [r7, #24]
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	429a      	cmp	r2, r3
 8000f0a:	f040 8158 	bne.w	80011be <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	4a9a      	ldr	r2, [pc, #616]	; (800117c <HAL_GPIO_Init+0x2a0>)
 8000f14:	4293      	cmp	r3, r2
 8000f16:	d05e      	beq.n	8000fd6 <HAL_GPIO_Init+0xfa>
 8000f18:	4a98      	ldr	r2, [pc, #608]	; (800117c <HAL_GPIO_Init+0x2a0>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d875      	bhi.n	800100a <HAL_GPIO_Init+0x12e>
 8000f1e:	4a98      	ldr	r2, [pc, #608]	; (8001180 <HAL_GPIO_Init+0x2a4>)
 8000f20:	4293      	cmp	r3, r2
 8000f22:	d058      	beq.n	8000fd6 <HAL_GPIO_Init+0xfa>
 8000f24:	4a96      	ldr	r2, [pc, #600]	; (8001180 <HAL_GPIO_Init+0x2a4>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d86f      	bhi.n	800100a <HAL_GPIO_Init+0x12e>
 8000f2a:	4a96      	ldr	r2, [pc, #600]	; (8001184 <HAL_GPIO_Init+0x2a8>)
 8000f2c:	4293      	cmp	r3, r2
 8000f2e:	d052      	beq.n	8000fd6 <HAL_GPIO_Init+0xfa>
 8000f30:	4a94      	ldr	r2, [pc, #592]	; (8001184 <HAL_GPIO_Init+0x2a8>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d869      	bhi.n	800100a <HAL_GPIO_Init+0x12e>
 8000f36:	4a94      	ldr	r2, [pc, #592]	; (8001188 <HAL_GPIO_Init+0x2ac>)
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d04c      	beq.n	8000fd6 <HAL_GPIO_Init+0xfa>
 8000f3c:	4a92      	ldr	r2, [pc, #584]	; (8001188 <HAL_GPIO_Init+0x2ac>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d863      	bhi.n	800100a <HAL_GPIO_Init+0x12e>
 8000f42:	4a92      	ldr	r2, [pc, #584]	; (800118c <HAL_GPIO_Init+0x2b0>)
 8000f44:	4293      	cmp	r3, r2
 8000f46:	d046      	beq.n	8000fd6 <HAL_GPIO_Init+0xfa>
 8000f48:	4a90      	ldr	r2, [pc, #576]	; (800118c <HAL_GPIO_Init+0x2b0>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d85d      	bhi.n	800100a <HAL_GPIO_Init+0x12e>
 8000f4e:	2b12      	cmp	r3, #18
 8000f50:	d82a      	bhi.n	8000fa8 <HAL_GPIO_Init+0xcc>
 8000f52:	2b12      	cmp	r3, #18
 8000f54:	d859      	bhi.n	800100a <HAL_GPIO_Init+0x12e>
 8000f56:	a201      	add	r2, pc, #4	; (adr r2, 8000f5c <HAL_GPIO_Init+0x80>)
 8000f58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f5c:	08000fd7 	.word	0x08000fd7
 8000f60:	08000fb1 	.word	0x08000fb1
 8000f64:	08000fc3 	.word	0x08000fc3
 8000f68:	08001005 	.word	0x08001005
 8000f6c:	0800100b 	.word	0x0800100b
 8000f70:	0800100b 	.word	0x0800100b
 8000f74:	0800100b 	.word	0x0800100b
 8000f78:	0800100b 	.word	0x0800100b
 8000f7c:	0800100b 	.word	0x0800100b
 8000f80:	0800100b 	.word	0x0800100b
 8000f84:	0800100b 	.word	0x0800100b
 8000f88:	0800100b 	.word	0x0800100b
 8000f8c:	0800100b 	.word	0x0800100b
 8000f90:	0800100b 	.word	0x0800100b
 8000f94:	0800100b 	.word	0x0800100b
 8000f98:	0800100b 	.word	0x0800100b
 8000f9c:	0800100b 	.word	0x0800100b
 8000fa0:	08000fb9 	.word	0x08000fb9
 8000fa4:	08000fcd 	.word	0x08000fcd
 8000fa8:	4a79      	ldr	r2, [pc, #484]	; (8001190 <HAL_GPIO_Init+0x2b4>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d013      	beq.n	8000fd6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000fae:	e02c      	b.n	800100a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	68db      	ldr	r3, [r3, #12]
 8000fb4:	623b      	str	r3, [r7, #32]
          break;
 8000fb6:	e029      	b.n	800100c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	68db      	ldr	r3, [r3, #12]
 8000fbc:	3304      	adds	r3, #4
 8000fbe:	623b      	str	r3, [r7, #32]
          break;
 8000fc0:	e024      	b.n	800100c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	68db      	ldr	r3, [r3, #12]
 8000fc6:	3308      	adds	r3, #8
 8000fc8:	623b      	str	r3, [r7, #32]
          break;
 8000fca:	e01f      	b.n	800100c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	68db      	ldr	r3, [r3, #12]
 8000fd0:	330c      	adds	r3, #12
 8000fd2:	623b      	str	r3, [r7, #32]
          break;
 8000fd4:	e01a      	b.n	800100c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	689b      	ldr	r3, [r3, #8]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d102      	bne.n	8000fe4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000fde:	2304      	movs	r3, #4
 8000fe0:	623b      	str	r3, [r7, #32]
          break;
 8000fe2:	e013      	b.n	800100c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	689b      	ldr	r3, [r3, #8]
 8000fe8:	2b01      	cmp	r3, #1
 8000fea:	d105      	bne.n	8000ff8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000fec:	2308      	movs	r3, #8
 8000fee:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	69fa      	ldr	r2, [r7, #28]
 8000ff4:	611a      	str	r2, [r3, #16]
          break;
 8000ff6:	e009      	b.n	800100c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ff8:	2308      	movs	r3, #8
 8000ffa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	69fa      	ldr	r2, [r7, #28]
 8001000:	615a      	str	r2, [r3, #20]
          break;
 8001002:	e003      	b.n	800100c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001004:	2300      	movs	r3, #0
 8001006:	623b      	str	r3, [r7, #32]
          break;
 8001008:	e000      	b.n	800100c <HAL_GPIO_Init+0x130>
          break;
 800100a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800100c:	69bb      	ldr	r3, [r7, #24]
 800100e:	2bff      	cmp	r3, #255	; 0xff
 8001010:	d801      	bhi.n	8001016 <HAL_GPIO_Init+0x13a>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	e001      	b.n	800101a <HAL_GPIO_Init+0x13e>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	3304      	adds	r3, #4
 800101a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800101c:	69bb      	ldr	r3, [r7, #24]
 800101e:	2bff      	cmp	r3, #255	; 0xff
 8001020:	d802      	bhi.n	8001028 <HAL_GPIO_Init+0x14c>
 8001022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001024:	009b      	lsls	r3, r3, #2
 8001026:	e002      	b.n	800102e <HAL_GPIO_Init+0x152>
 8001028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800102a:	3b08      	subs	r3, #8
 800102c:	009b      	lsls	r3, r3, #2
 800102e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	681a      	ldr	r2, [r3, #0]
 8001034:	210f      	movs	r1, #15
 8001036:	693b      	ldr	r3, [r7, #16]
 8001038:	fa01 f303 	lsl.w	r3, r1, r3
 800103c:	43db      	mvns	r3, r3
 800103e:	401a      	ands	r2, r3
 8001040:	6a39      	ldr	r1, [r7, #32]
 8001042:	693b      	ldr	r3, [r7, #16]
 8001044:	fa01 f303 	lsl.w	r3, r1, r3
 8001048:	431a      	orrs	r2, r3
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001056:	2b00      	cmp	r3, #0
 8001058:	f000 80b1 	beq.w	80011be <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800105c:	4b4d      	ldr	r3, [pc, #308]	; (8001194 <HAL_GPIO_Init+0x2b8>)
 800105e:	699b      	ldr	r3, [r3, #24]
 8001060:	4a4c      	ldr	r2, [pc, #304]	; (8001194 <HAL_GPIO_Init+0x2b8>)
 8001062:	f043 0301 	orr.w	r3, r3, #1
 8001066:	6193      	str	r3, [r2, #24]
 8001068:	4b4a      	ldr	r3, [pc, #296]	; (8001194 <HAL_GPIO_Init+0x2b8>)
 800106a:	699b      	ldr	r3, [r3, #24]
 800106c:	f003 0301 	and.w	r3, r3, #1
 8001070:	60bb      	str	r3, [r7, #8]
 8001072:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001074:	4a48      	ldr	r2, [pc, #288]	; (8001198 <HAL_GPIO_Init+0x2bc>)
 8001076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001078:	089b      	lsrs	r3, r3, #2
 800107a:	3302      	adds	r3, #2
 800107c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001080:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001084:	f003 0303 	and.w	r3, r3, #3
 8001088:	009b      	lsls	r3, r3, #2
 800108a:	220f      	movs	r2, #15
 800108c:	fa02 f303 	lsl.w	r3, r2, r3
 8001090:	43db      	mvns	r3, r3
 8001092:	68fa      	ldr	r2, [r7, #12]
 8001094:	4013      	ands	r3, r2
 8001096:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	4a40      	ldr	r2, [pc, #256]	; (800119c <HAL_GPIO_Init+0x2c0>)
 800109c:	4293      	cmp	r3, r2
 800109e:	d013      	beq.n	80010c8 <HAL_GPIO_Init+0x1ec>
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	4a3f      	ldr	r2, [pc, #252]	; (80011a0 <HAL_GPIO_Init+0x2c4>)
 80010a4:	4293      	cmp	r3, r2
 80010a6:	d00d      	beq.n	80010c4 <HAL_GPIO_Init+0x1e8>
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	4a3e      	ldr	r2, [pc, #248]	; (80011a4 <HAL_GPIO_Init+0x2c8>)
 80010ac:	4293      	cmp	r3, r2
 80010ae:	d007      	beq.n	80010c0 <HAL_GPIO_Init+0x1e4>
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	4a3d      	ldr	r2, [pc, #244]	; (80011a8 <HAL_GPIO_Init+0x2cc>)
 80010b4:	4293      	cmp	r3, r2
 80010b6:	d101      	bne.n	80010bc <HAL_GPIO_Init+0x1e0>
 80010b8:	2303      	movs	r3, #3
 80010ba:	e006      	b.n	80010ca <HAL_GPIO_Init+0x1ee>
 80010bc:	2304      	movs	r3, #4
 80010be:	e004      	b.n	80010ca <HAL_GPIO_Init+0x1ee>
 80010c0:	2302      	movs	r3, #2
 80010c2:	e002      	b.n	80010ca <HAL_GPIO_Init+0x1ee>
 80010c4:	2301      	movs	r3, #1
 80010c6:	e000      	b.n	80010ca <HAL_GPIO_Init+0x1ee>
 80010c8:	2300      	movs	r3, #0
 80010ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010cc:	f002 0203 	and.w	r2, r2, #3
 80010d0:	0092      	lsls	r2, r2, #2
 80010d2:	4093      	lsls	r3, r2
 80010d4:	68fa      	ldr	r2, [r7, #12]
 80010d6:	4313      	orrs	r3, r2
 80010d8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80010da:	492f      	ldr	r1, [pc, #188]	; (8001198 <HAL_GPIO_Init+0x2bc>)
 80010dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010de:	089b      	lsrs	r3, r3, #2
 80010e0:	3302      	adds	r3, #2
 80010e2:	68fa      	ldr	r2, [r7, #12]
 80010e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d006      	beq.n	8001102 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80010f4:	4b2d      	ldr	r3, [pc, #180]	; (80011ac <HAL_GPIO_Init+0x2d0>)
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	492c      	ldr	r1, [pc, #176]	; (80011ac <HAL_GPIO_Init+0x2d0>)
 80010fa:	69bb      	ldr	r3, [r7, #24]
 80010fc:	4313      	orrs	r3, r2
 80010fe:	600b      	str	r3, [r1, #0]
 8001100:	e006      	b.n	8001110 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001102:	4b2a      	ldr	r3, [pc, #168]	; (80011ac <HAL_GPIO_Init+0x2d0>)
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	69bb      	ldr	r3, [r7, #24]
 8001108:	43db      	mvns	r3, r3
 800110a:	4928      	ldr	r1, [pc, #160]	; (80011ac <HAL_GPIO_Init+0x2d0>)
 800110c:	4013      	ands	r3, r2
 800110e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001118:	2b00      	cmp	r3, #0
 800111a:	d006      	beq.n	800112a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800111c:	4b23      	ldr	r3, [pc, #140]	; (80011ac <HAL_GPIO_Init+0x2d0>)
 800111e:	685a      	ldr	r2, [r3, #4]
 8001120:	4922      	ldr	r1, [pc, #136]	; (80011ac <HAL_GPIO_Init+0x2d0>)
 8001122:	69bb      	ldr	r3, [r7, #24]
 8001124:	4313      	orrs	r3, r2
 8001126:	604b      	str	r3, [r1, #4]
 8001128:	e006      	b.n	8001138 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800112a:	4b20      	ldr	r3, [pc, #128]	; (80011ac <HAL_GPIO_Init+0x2d0>)
 800112c:	685a      	ldr	r2, [r3, #4]
 800112e:	69bb      	ldr	r3, [r7, #24]
 8001130:	43db      	mvns	r3, r3
 8001132:	491e      	ldr	r1, [pc, #120]	; (80011ac <HAL_GPIO_Init+0x2d0>)
 8001134:	4013      	ands	r3, r2
 8001136:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001140:	2b00      	cmp	r3, #0
 8001142:	d006      	beq.n	8001152 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001144:	4b19      	ldr	r3, [pc, #100]	; (80011ac <HAL_GPIO_Init+0x2d0>)
 8001146:	689a      	ldr	r2, [r3, #8]
 8001148:	4918      	ldr	r1, [pc, #96]	; (80011ac <HAL_GPIO_Init+0x2d0>)
 800114a:	69bb      	ldr	r3, [r7, #24]
 800114c:	4313      	orrs	r3, r2
 800114e:	608b      	str	r3, [r1, #8]
 8001150:	e006      	b.n	8001160 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001152:	4b16      	ldr	r3, [pc, #88]	; (80011ac <HAL_GPIO_Init+0x2d0>)
 8001154:	689a      	ldr	r2, [r3, #8]
 8001156:	69bb      	ldr	r3, [r7, #24]
 8001158:	43db      	mvns	r3, r3
 800115a:	4914      	ldr	r1, [pc, #80]	; (80011ac <HAL_GPIO_Init+0x2d0>)
 800115c:	4013      	ands	r3, r2
 800115e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001168:	2b00      	cmp	r3, #0
 800116a:	d021      	beq.n	80011b0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800116c:	4b0f      	ldr	r3, [pc, #60]	; (80011ac <HAL_GPIO_Init+0x2d0>)
 800116e:	68da      	ldr	r2, [r3, #12]
 8001170:	490e      	ldr	r1, [pc, #56]	; (80011ac <HAL_GPIO_Init+0x2d0>)
 8001172:	69bb      	ldr	r3, [r7, #24]
 8001174:	4313      	orrs	r3, r2
 8001176:	60cb      	str	r3, [r1, #12]
 8001178:	e021      	b.n	80011be <HAL_GPIO_Init+0x2e2>
 800117a:	bf00      	nop
 800117c:	10320000 	.word	0x10320000
 8001180:	10310000 	.word	0x10310000
 8001184:	10220000 	.word	0x10220000
 8001188:	10210000 	.word	0x10210000
 800118c:	10120000 	.word	0x10120000
 8001190:	10110000 	.word	0x10110000
 8001194:	40021000 	.word	0x40021000
 8001198:	40010000 	.word	0x40010000
 800119c:	40010800 	.word	0x40010800
 80011a0:	40010c00 	.word	0x40010c00
 80011a4:	40011000 	.word	0x40011000
 80011a8:	40011400 	.word	0x40011400
 80011ac:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80011b0:	4b0b      	ldr	r3, [pc, #44]	; (80011e0 <HAL_GPIO_Init+0x304>)
 80011b2:	68da      	ldr	r2, [r3, #12]
 80011b4:	69bb      	ldr	r3, [r7, #24]
 80011b6:	43db      	mvns	r3, r3
 80011b8:	4909      	ldr	r1, [pc, #36]	; (80011e0 <HAL_GPIO_Init+0x304>)
 80011ba:	4013      	ands	r3, r2
 80011bc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80011be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011c0:	3301      	adds	r3, #1
 80011c2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ca:	fa22 f303 	lsr.w	r3, r2, r3
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	f47f ae8e 	bne.w	8000ef0 <HAL_GPIO_Init+0x14>
  }
}
 80011d4:	bf00      	nop
 80011d6:	bf00      	nop
 80011d8:	372c      	adds	r7, #44	; 0x2c
 80011da:	46bd      	mov	sp, r7
 80011dc:	bc80      	pop	{r7}
 80011de:	4770      	bx	lr
 80011e0:	40010400 	.word	0x40010400

080011e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b086      	sub	sp, #24
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d101      	bne.n	80011f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011f2:	2301      	movs	r3, #1
 80011f4:	e272      	b.n	80016dc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f003 0301 	and.w	r3, r3, #1
 80011fe:	2b00      	cmp	r3, #0
 8001200:	f000 8087 	beq.w	8001312 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001204:	4b92      	ldr	r3, [pc, #584]	; (8001450 <HAL_RCC_OscConfig+0x26c>)
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	f003 030c 	and.w	r3, r3, #12
 800120c:	2b04      	cmp	r3, #4
 800120e:	d00c      	beq.n	800122a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001210:	4b8f      	ldr	r3, [pc, #572]	; (8001450 <HAL_RCC_OscConfig+0x26c>)
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f003 030c 	and.w	r3, r3, #12
 8001218:	2b08      	cmp	r3, #8
 800121a:	d112      	bne.n	8001242 <HAL_RCC_OscConfig+0x5e>
 800121c:	4b8c      	ldr	r3, [pc, #560]	; (8001450 <HAL_RCC_OscConfig+0x26c>)
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001224:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001228:	d10b      	bne.n	8001242 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800122a:	4b89      	ldr	r3, [pc, #548]	; (8001450 <HAL_RCC_OscConfig+0x26c>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001232:	2b00      	cmp	r3, #0
 8001234:	d06c      	beq.n	8001310 <HAL_RCC_OscConfig+0x12c>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d168      	bne.n	8001310 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800123e:	2301      	movs	r3, #1
 8001240:	e24c      	b.n	80016dc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800124a:	d106      	bne.n	800125a <HAL_RCC_OscConfig+0x76>
 800124c:	4b80      	ldr	r3, [pc, #512]	; (8001450 <HAL_RCC_OscConfig+0x26c>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a7f      	ldr	r2, [pc, #508]	; (8001450 <HAL_RCC_OscConfig+0x26c>)
 8001252:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001256:	6013      	str	r3, [r2, #0]
 8001258:	e02e      	b.n	80012b8 <HAL_RCC_OscConfig+0xd4>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d10c      	bne.n	800127c <HAL_RCC_OscConfig+0x98>
 8001262:	4b7b      	ldr	r3, [pc, #492]	; (8001450 <HAL_RCC_OscConfig+0x26c>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4a7a      	ldr	r2, [pc, #488]	; (8001450 <HAL_RCC_OscConfig+0x26c>)
 8001268:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800126c:	6013      	str	r3, [r2, #0]
 800126e:	4b78      	ldr	r3, [pc, #480]	; (8001450 <HAL_RCC_OscConfig+0x26c>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4a77      	ldr	r2, [pc, #476]	; (8001450 <HAL_RCC_OscConfig+0x26c>)
 8001274:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001278:	6013      	str	r3, [r2, #0]
 800127a:	e01d      	b.n	80012b8 <HAL_RCC_OscConfig+0xd4>
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001284:	d10c      	bne.n	80012a0 <HAL_RCC_OscConfig+0xbc>
 8001286:	4b72      	ldr	r3, [pc, #456]	; (8001450 <HAL_RCC_OscConfig+0x26c>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4a71      	ldr	r2, [pc, #452]	; (8001450 <HAL_RCC_OscConfig+0x26c>)
 800128c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001290:	6013      	str	r3, [r2, #0]
 8001292:	4b6f      	ldr	r3, [pc, #444]	; (8001450 <HAL_RCC_OscConfig+0x26c>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a6e      	ldr	r2, [pc, #440]	; (8001450 <HAL_RCC_OscConfig+0x26c>)
 8001298:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800129c:	6013      	str	r3, [r2, #0]
 800129e:	e00b      	b.n	80012b8 <HAL_RCC_OscConfig+0xd4>
 80012a0:	4b6b      	ldr	r3, [pc, #428]	; (8001450 <HAL_RCC_OscConfig+0x26c>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a6a      	ldr	r2, [pc, #424]	; (8001450 <HAL_RCC_OscConfig+0x26c>)
 80012a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012aa:	6013      	str	r3, [r2, #0]
 80012ac:	4b68      	ldr	r3, [pc, #416]	; (8001450 <HAL_RCC_OscConfig+0x26c>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a67      	ldr	r2, [pc, #412]	; (8001450 <HAL_RCC_OscConfig+0x26c>)
 80012b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012b6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d013      	beq.n	80012e8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012c0:	f7ff fa7e 	bl	80007c0 <HAL_GetTick>
 80012c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012c6:	e008      	b.n	80012da <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012c8:	f7ff fa7a 	bl	80007c0 <HAL_GetTick>
 80012cc:	4602      	mov	r2, r0
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	1ad3      	subs	r3, r2, r3
 80012d2:	2b64      	cmp	r3, #100	; 0x64
 80012d4:	d901      	bls.n	80012da <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80012d6:	2303      	movs	r3, #3
 80012d8:	e200      	b.n	80016dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012da:	4b5d      	ldr	r3, [pc, #372]	; (8001450 <HAL_RCC_OscConfig+0x26c>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d0f0      	beq.n	80012c8 <HAL_RCC_OscConfig+0xe4>
 80012e6:	e014      	b.n	8001312 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012e8:	f7ff fa6a 	bl	80007c0 <HAL_GetTick>
 80012ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012ee:	e008      	b.n	8001302 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012f0:	f7ff fa66 	bl	80007c0 <HAL_GetTick>
 80012f4:	4602      	mov	r2, r0
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	2b64      	cmp	r3, #100	; 0x64
 80012fc:	d901      	bls.n	8001302 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80012fe:	2303      	movs	r3, #3
 8001300:	e1ec      	b.n	80016dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001302:	4b53      	ldr	r3, [pc, #332]	; (8001450 <HAL_RCC_OscConfig+0x26c>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800130a:	2b00      	cmp	r3, #0
 800130c:	d1f0      	bne.n	80012f0 <HAL_RCC_OscConfig+0x10c>
 800130e:	e000      	b.n	8001312 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001310:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f003 0302 	and.w	r3, r3, #2
 800131a:	2b00      	cmp	r3, #0
 800131c:	d063      	beq.n	80013e6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800131e:	4b4c      	ldr	r3, [pc, #304]	; (8001450 <HAL_RCC_OscConfig+0x26c>)
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	f003 030c 	and.w	r3, r3, #12
 8001326:	2b00      	cmp	r3, #0
 8001328:	d00b      	beq.n	8001342 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800132a:	4b49      	ldr	r3, [pc, #292]	; (8001450 <HAL_RCC_OscConfig+0x26c>)
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	f003 030c 	and.w	r3, r3, #12
 8001332:	2b08      	cmp	r3, #8
 8001334:	d11c      	bne.n	8001370 <HAL_RCC_OscConfig+0x18c>
 8001336:	4b46      	ldr	r3, [pc, #280]	; (8001450 <HAL_RCC_OscConfig+0x26c>)
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800133e:	2b00      	cmp	r3, #0
 8001340:	d116      	bne.n	8001370 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001342:	4b43      	ldr	r3, [pc, #268]	; (8001450 <HAL_RCC_OscConfig+0x26c>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f003 0302 	and.w	r3, r3, #2
 800134a:	2b00      	cmp	r3, #0
 800134c:	d005      	beq.n	800135a <HAL_RCC_OscConfig+0x176>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	691b      	ldr	r3, [r3, #16]
 8001352:	2b01      	cmp	r3, #1
 8001354:	d001      	beq.n	800135a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001356:	2301      	movs	r3, #1
 8001358:	e1c0      	b.n	80016dc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800135a:	4b3d      	ldr	r3, [pc, #244]	; (8001450 <HAL_RCC_OscConfig+0x26c>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	695b      	ldr	r3, [r3, #20]
 8001366:	00db      	lsls	r3, r3, #3
 8001368:	4939      	ldr	r1, [pc, #228]	; (8001450 <HAL_RCC_OscConfig+0x26c>)
 800136a:	4313      	orrs	r3, r2
 800136c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800136e:	e03a      	b.n	80013e6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	691b      	ldr	r3, [r3, #16]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d020      	beq.n	80013ba <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001378:	4b36      	ldr	r3, [pc, #216]	; (8001454 <HAL_RCC_OscConfig+0x270>)
 800137a:	2201      	movs	r2, #1
 800137c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800137e:	f7ff fa1f 	bl	80007c0 <HAL_GetTick>
 8001382:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001384:	e008      	b.n	8001398 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001386:	f7ff fa1b 	bl	80007c0 <HAL_GetTick>
 800138a:	4602      	mov	r2, r0
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	1ad3      	subs	r3, r2, r3
 8001390:	2b02      	cmp	r3, #2
 8001392:	d901      	bls.n	8001398 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001394:	2303      	movs	r3, #3
 8001396:	e1a1      	b.n	80016dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001398:	4b2d      	ldr	r3, [pc, #180]	; (8001450 <HAL_RCC_OscConfig+0x26c>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f003 0302 	and.w	r3, r3, #2
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d0f0      	beq.n	8001386 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013a4:	4b2a      	ldr	r3, [pc, #168]	; (8001450 <HAL_RCC_OscConfig+0x26c>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	695b      	ldr	r3, [r3, #20]
 80013b0:	00db      	lsls	r3, r3, #3
 80013b2:	4927      	ldr	r1, [pc, #156]	; (8001450 <HAL_RCC_OscConfig+0x26c>)
 80013b4:	4313      	orrs	r3, r2
 80013b6:	600b      	str	r3, [r1, #0]
 80013b8:	e015      	b.n	80013e6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013ba:	4b26      	ldr	r3, [pc, #152]	; (8001454 <HAL_RCC_OscConfig+0x270>)
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013c0:	f7ff f9fe 	bl	80007c0 <HAL_GetTick>
 80013c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013c6:	e008      	b.n	80013da <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013c8:	f7ff f9fa 	bl	80007c0 <HAL_GetTick>
 80013cc:	4602      	mov	r2, r0
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	2b02      	cmp	r3, #2
 80013d4:	d901      	bls.n	80013da <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80013d6:	2303      	movs	r3, #3
 80013d8:	e180      	b.n	80016dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013da:	4b1d      	ldr	r3, [pc, #116]	; (8001450 <HAL_RCC_OscConfig+0x26c>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f003 0302 	and.w	r3, r3, #2
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d1f0      	bne.n	80013c8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f003 0308 	and.w	r3, r3, #8
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d03a      	beq.n	8001468 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	699b      	ldr	r3, [r3, #24]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d019      	beq.n	800142e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013fa:	4b17      	ldr	r3, [pc, #92]	; (8001458 <HAL_RCC_OscConfig+0x274>)
 80013fc:	2201      	movs	r2, #1
 80013fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001400:	f7ff f9de 	bl	80007c0 <HAL_GetTick>
 8001404:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001406:	e008      	b.n	800141a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001408:	f7ff f9da 	bl	80007c0 <HAL_GetTick>
 800140c:	4602      	mov	r2, r0
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	1ad3      	subs	r3, r2, r3
 8001412:	2b02      	cmp	r3, #2
 8001414:	d901      	bls.n	800141a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001416:	2303      	movs	r3, #3
 8001418:	e160      	b.n	80016dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800141a:	4b0d      	ldr	r3, [pc, #52]	; (8001450 <HAL_RCC_OscConfig+0x26c>)
 800141c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800141e:	f003 0302 	and.w	r3, r3, #2
 8001422:	2b00      	cmp	r3, #0
 8001424:	d0f0      	beq.n	8001408 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001426:	2001      	movs	r0, #1
 8001428:	f000 fad8 	bl	80019dc <RCC_Delay>
 800142c:	e01c      	b.n	8001468 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800142e:	4b0a      	ldr	r3, [pc, #40]	; (8001458 <HAL_RCC_OscConfig+0x274>)
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001434:	f7ff f9c4 	bl	80007c0 <HAL_GetTick>
 8001438:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800143a:	e00f      	b.n	800145c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800143c:	f7ff f9c0 	bl	80007c0 <HAL_GetTick>
 8001440:	4602      	mov	r2, r0
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	2b02      	cmp	r3, #2
 8001448:	d908      	bls.n	800145c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800144a:	2303      	movs	r3, #3
 800144c:	e146      	b.n	80016dc <HAL_RCC_OscConfig+0x4f8>
 800144e:	bf00      	nop
 8001450:	40021000 	.word	0x40021000
 8001454:	42420000 	.word	0x42420000
 8001458:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800145c:	4b92      	ldr	r3, [pc, #584]	; (80016a8 <HAL_RCC_OscConfig+0x4c4>)
 800145e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001460:	f003 0302 	and.w	r3, r3, #2
 8001464:	2b00      	cmp	r3, #0
 8001466:	d1e9      	bne.n	800143c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f003 0304 	and.w	r3, r3, #4
 8001470:	2b00      	cmp	r3, #0
 8001472:	f000 80a6 	beq.w	80015c2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001476:	2300      	movs	r3, #0
 8001478:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800147a:	4b8b      	ldr	r3, [pc, #556]	; (80016a8 <HAL_RCC_OscConfig+0x4c4>)
 800147c:	69db      	ldr	r3, [r3, #28]
 800147e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001482:	2b00      	cmp	r3, #0
 8001484:	d10d      	bne.n	80014a2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001486:	4b88      	ldr	r3, [pc, #544]	; (80016a8 <HAL_RCC_OscConfig+0x4c4>)
 8001488:	69db      	ldr	r3, [r3, #28]
 800148a:	4a87      	ldr	r2, [pc, #540]	; (80016a8 <HAL_RCC_OscConfig+0x4c4>)
 800148c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001490:	61d3      	str	r3, [r2, #28]
 8001492:	4b85      	ldr	r3, [pc, #532]	; (80016a8 <HAL_RCC_OscConfig+0x4c4>)
 8001494:	69db      	ldr	r3, [r3, #28]
 8001496:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800149a:	60bb      	str	r3, [r7, #8]
 800149c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800149e:	2301      	movs	r3, #1
 80014a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014a2:	4b82      	ldr	r3, [pc, #520]	; (80016ac <HAL_RCC_OscConfig+0x4c8>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d118      	bne.n	80014e0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014ae:	4b7f      	ldr	r3, [pc, #508]	; (80016ac <HAL_RCC_OscConfig+0x4c8>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a7e      	ldr	r2, [pc, #504]	; (80016ac <HAL_RCC_OscConfig+0x4c8>)
 80014b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014ba:	f7ff f981 	bl	80007c0 <HAL_GetTick>
 80014be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014c0:	e008      	b.n	80014d4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014c2:	f7ff f97d 	bl	80007c0 <HAL_GetTick>
 80014c6:	4602      	mov	r2, r0
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	1ad3      	subs	r3, r2, r3
 80014cc:	2b64      	cmp	r3, #100	; 0x64
 80014ce:	d901      	bls.n	80014d4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80014d0:	2303      	movs	r3, #3
 80014d2:	e103      	b.n	80016dc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014d4:	4b75      	ldr	r3, [pc, #468]	; (80016ac <HAL_RCC_OscConfig+0x4c8>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d0f0      	beq.n	80014c2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	68db      	ldr	r3, [r3, #12]
 80014e4:	2b01      	cmp	r3, #1
 80014e6:	d106      	bne.n	80014f6 <HAL_RCC_OscConfig+0x312>
 80014e8:	4b6f      	ldr	r3, [pc, #444]	; (80016a8 <HAL_RCC_OscConfig+0x4c4>)
 80014ea:	6a1b      	ldr	r3, [r3, #32]
 80014ec:	4a6e      	ldr	r2, [pc, #440]	; (80016a8 <HAL_RCC_OscConfig+0x4c4>)
 80014ee:	f043 0301 	orr.w	r3, r3, #1
 80014f2:	6213      	str	r3, [r2, #32]
 80014f4:	e02d      	b.n	8001552 <HAL_RCC_OscConfig+0x36e>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	68db      	ldr	r3, [r3, #12]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d10c      	bne.n	8001518 <HAL_RCC_OscConfig+0x334>
 80014fe:	4b6a      	ldr	r3, [pc, #424]	; (80016a8 <HAL_RCC_OscConfig+0x4c4>)
 8001500:	6a1b      	ldr	r3, [r3, #32]
 8001502:	4a69      	ldr	r2, [pc, #420]	; (80016a8 <HAL_RCC_OscConfig+0x4c4>)
 8001504:	f023 0301 	bic.w	r3, r3, #1
 8001508:	6213      	str	r3, [r2, #32]
 800150a:	4b67      	ldr	r3, [pc, #412]	; (80016a8 <HAL_RCC_OscConfig+0x4c4>)
 800150c:	6a1b      	ldr	r3, [r3, #32]
 800150e:	4a66      	ldr	r2, [pc, #408]	; (80016a8 <HAL_RCC_OscConfig+0x4c4>)
 8001510:	f023 0304 	bic.w	r3, r3, #4
 8001514:	6213      	str	r3, [r2, #32]
 8001516:	e01c      	b.n	8001552 <HAL_RCC_OscConfig+0x36e>
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	68db      	ldr	r3, [r3, #12]
 800151c:	2b05      	cmp	r3, #5
 800151e:	d10c      	bne.n	800153a <HAL_RCC_OscConfig+0x356>
 8001520:	4b61      	ldr	r3, [pc, #388]	; (80016a8 <HAL_RCC_OscConfig+0x4c4>)
 8001522:	6a1b      	ldr	r3, [r3, #32]
 8001524:	4a60      	ldr	r2, [pc, #384]	; (80016a8 <HAL_RCC_OscConfig+0x4c4>)
 8001526:	f043 0304 	orr.w	r3, r3, #4
 800152a:	6213      	str	r3, [r2, #32]
 800152c:	4b5e      	ldr	r3, [pc, #376]	; (80016a8 <HAL_RCC_OscConfig+0x4c4>)
 800152e:	6a1b      	ldr	r3, [r3, #32]
 8001530:	4a5d      	ldr	r2, [pc, #372]	; (80016a8 <HAL_RCC_OscConfig+0x4c4>)
 8001532:	f043 0301 	orr.w	r3, r3, #1
 8001536:	6213      	str	r3, [r2, #32]
 8001538:	e00b      	b.n	8001552 <HAL_RCC_OscConfig+0x36e>
 800153a:	4b5b      	ldr	r3, [pc, #364]	; (80016a8 <HAL_RCC_OscConfig+0x4c4>)
 800153c:	6a1b      	ldr	r3, [r3, #32]
 800153e:	4a5a      	ldr	r2, [pc, #360]	; (80016a8 <HAL_RCC_OscConfig+0x4c4>)
 8001540:	f023 0301 	bic.w	r3, r3, #1
 8001544:	6213      	str	r3, [r2, #32]
 8001546:	4b58      	ldr	r3, [pc, #352]	; (80016a8 <HAL_RCC_OscConfig+0x4c4>)
 8001548:	6a1b      	ldr	r3, [r3, #32]
 800154a:	4a57      	ldr	r2, [pc, #348]	; (80016a8 <HAL_RCC_OscConfig+0x4c4>)
 800154c:	f023 0304 	bic.w	r3, r3, #4
 8001550:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	68db      	ldr	r3, [r3, #12]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d015      	beq.n	8001586 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800155a:	f7ff f931 	bl	80007c0 <HAL_GetTick>
 800155e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001560:	e00a      	b.n	8001578 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001562:	f7ff f92d 	bl	80007c0 <HAL_GetTick>
 8001566:	4602      	mov	r2, r0
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	1ad3      	subs	r3, r2, r3
 800156c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001570:	4293      	cmp	r3, r2
 8001572:	d901      	bls.n	8001578 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001574:	2303      	movs	r3, #3
 8001576:	e0b1      	b.n	80016dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001578:	4b4b      	ldr	r3, [pc, #300]	; (80016a8 <HAL_RCC_OscConfig+0x4c4>)
 800157a:	6a1b      	ldr	r3, [r3, #32]
 800157c:	f003 0302 	and.w	r3, r3, #2
 8001580:	2b00      	cmp	r3, #0
 8001582:	d0ee      	beq.n	8001562 <HAL_RCC_OscConfig+0x37e>
 8001584:	e014      	b.n	80015b0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001586:	f7ff f91b 	bl	80007c0 <HAL_GetTick>
 800158a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800158c:	e00a      	b.n	80015a4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800158e:	f7ff f917 	bl	80007c0 <HAL_GetTick>
 8001592:	4602      	mov	r2, r0
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	1ad3      	subs	r3, r2, r3
 8001598:	f241 3288 	movw	r2, #5000	; 0x1388
 800159c:	4293      	cmp	r3, r2
 800159e:	d901      	bls.n	80015a4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80015a0:	2303      	movs	r3, #3
 80015a2:	e09b      	b.n	80016dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015a4:	4b40      	ldr	r3, [pc, #256]	; (80016a8 <HAL_RCC_OscConfig+0x4c4>)
 80015a6:	6a1b      	ldr	r3, [r3, #32]
 80015a8:	f003 0302 	and.w	r3, r3, #2
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d1ee      	bne.n	800158e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80015b0:	7dfb      	ldrb	r3, [r7, #23]
 80015b2:	2b01      	cmp	r3, #1
 80015b4:	d105      	bne.n	80015c2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015b6:	4b3c      	ldr	r3, [pc, #240]	; (80016a8 <HAL_RCC_OscConfig+0x4c4>)
 80015b8:	69db      	ldr	r3, [r3, #28]
 80015ba:	4a3b      	ldr	r2, [pc, #236]	; (80016a8 <HAL_RCC_OscConfig+0x4c4>)
 80015bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015c0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	69db      	ldr	r3, [r3, #28]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	f000 8087 	beq.w	80016da <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015cc:	4b36      	ldr	r3, [pc, #216]	; (80016a8 <HAL_RCC_OscConfig+0x4c4>)
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f003 030c 	and.w	r3, r3, #12
 80015d4:	2b08      	cmp	r3, #8
 80015d6:	d061      	beq.n	800169c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	69db      	ldr	r3, [r3, #28]
 80015dc:	2b02      	cmp	r3, #2
 80015de:	d146      	bne.n	800166e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015e0:	4b33      	ldr	r3, [pc, #204]	; (80016b0 <HAL_RCC_OscConfig+0x4cc>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015e6:	f7ff f8eb 	bl	80007c0 <HAL_GetTick>
 80015ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015ec:	e008      	b.n	8001600 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015ee:	f7ff f8e7 	bl	80007c0 <HAL_GetTick>
 80015f2:	4602      	mov	r2, r0
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	1ad3      	subs	r3, r2, r3
 80015f8:	2b02      	cmp	r3, #2
 80015fa:	d901      	bls.n	8001600 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80015fc:	2303      	movs	r3, #3
 80015fe:	e06d      	b.n	80016dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001600:	4b29      	ldr	r3, [pc, #164]	; (80016a8 <HAL_RCC_OscConfig+0x4c4>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001608:	2b00      	cmp	r3, #0
 800160a:	d1f0      	bne.n	80015ee <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6a1b      	ldr	r3, [r3, #32]
 8001610:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001614:	d108      	bne.n	8001628 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001616:	4b24      	ldr	r3, [pc, #144]	; (80016a8 <HAL_RCC_OscConfig+0x4c4>)
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	4921      	ldr	r1, [pc, #132]	; (80016a8 <HAL_RCC_OscConfig+0x4c4>)
 8001624:	4313      	orrs	r3, r2
 8001626:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001628:	4b1f      	ldr	r3, [pc, #124]	; (80016a8 <HAL_RCC_OscConfig+0x4c4>)
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6a19      	ldr	r1, [r3, #32]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001638:	430b      	orrs	r3, r1
 800163a:	491b      	ldr	r1, [pc, #108]	; (80016a8 <HAL_RCC_OscConfig+0x4c4>)
 800163c:	4313      	orrs	r3, r2
 800163e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001640:	4b1b      	ldr	r3, [pc, #108]	; (80016b0 <HAL_RCC_OscConfig+0x4cc>)
 8001642:	2201      	movs	r2, #1
 8001644:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001646:	f7ff f8bb 	bl	80007c0 <HAL_GetTick>
 800164a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800164c:	e008      	b.n	8001660 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800164e:	f7ff f8b7 	bl	80007c0 <HAL_GetTick>
 8001652:	4602      	mov	r2, r0
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	2b02      	cmp	r3, #2
 800165a:	d901      	bls.n	8001660 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800165c:	2303      	movs	r3, #3
 800165e:	e03d      	b.n	80016dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001660:	4b11      	ldr	r3, [pc, #68]	; (80016a8 <HAL_RCC_OscConfig+0x4c4>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001668:	2b00      	cmp	r3, #0
 800166a:	d0f0      	beq.n	800164e <HAL_RCC_OscConfig+0x46a>
 800166c:	e035      	b.n	80016da <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800166e:	4b10      	ldr	r3, [pc, #64]	; (80016b0 <HAL_RCC_OscConfig+0x4cc>)
 8001670:	2200      	movs	r2, #0
 8001672:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001674:	f7ff f8a4 	bl	80007c0 <HAL_GetTick>
 8001678:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800167a:	e008      	b.n	800168e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800167c:	f7ff f8a0 	bl	80007c0 <HAL_GetTick>
 8001680:	4602      	mov	r2, r0
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	2b02      	cmp	r3, #2
 8001688:	d901      	bls.n	800168e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800168a:	2303      	movs	r3, #3
 800168c:	e026      	b.n	80016dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800168e:	4b06      	ldr	r3, [pc, #24]	; (80016a8 <HAL_RCC_OscConfig+0x4c4>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d1f0      	bne.n	800167c <HAL_RCC_OscConfig+0x498>
 800169a:	e01e      	b.n	80016da <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	69db      	ldr	r3, [r3, #28]
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	d107      	bne.n	80016b4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80016a4:	2301      	movs	r3, #1
 80016a6:	e019      	b.n	80016dc <HAL_RCC_OscConfig+0x4f8>
 80016a8:	40021000 	.word	0x40021000
 80016ac:	40007000 	.word	0x40007000
 80016b0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80016b4:	4b0b      	ldr	r3, [pc, #44]	; (80016e4 <HAL_RCC_OscConfig+0x500>)
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6a1b      	ldr	r3, [r3, #32]
 80016c4:	429a      	cmp	r2, r3
 80016c6:	d106      	bne.n	80016d6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016d2:	429a      	cmp	r2, r3
 80016d4:	d001      	beq.n	80016da <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
 80016d8:	e000      	b.n	80016dc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80016da:	2300      	movs	r3, #0
}
 80016dc:	4618      	mov	r0, r3
 80016de:	3718      	adds	r7, #24
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	40021000 	.word	0x40021000

080016e8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
 80016f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d101      	bne.n	80016fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	e0d0      	b.n	800189e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80016fc:	4b6a      	ldr	r3, [pc, #424]	; (80018a8 <HAL_RCC_ClockConfig+0x1c0>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f003 0307 	and.w	r3, r3, #7
 8001704:	683a      	ldr	r2, [r7, #0]
 8001706:	429a      	cmp	r2, r3
 8001708:	d910      	bls.n	800172c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800170a:	4b67      	ldr	r3, [pc, #412]	; (80018a8 <HAL_RCC_ClockConfig+0x1c0>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f023 0207 	bic.w	r2, r3, #7
 8001712:	4965      	ldr	r1, [pc, #404]	; (80018a8 <HAL_RCC_ClockConfig+0x1c0>)
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	4313      	orrs	r3, r2
 8001718:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800171a:	4b63      	ldr	r3, [pc, #396]	; (80018a8 <HAL_RCC_ClockConfig+0x1c0>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 0307 	and.w	r3, r3, #7
 8001722:	683a      	ldr	r2, [r7, #0]
 8001724:	429a      	cmp	r2, r3
 8001726:	d001      	beq.n	800172c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001728:	2301      	movs	r3, #1
 800172a:	e0b8      	b.n	800189e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f003 0302 	and.w	r3, r3, #2
 8001734:	2b00      	cmp	r3, #0
 8001736:	d020      	beq.n	800177a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f003 0304 	and.w	r3, r3, #4
 8001740:	2b00      	cmp	r3, #0
 8001742:	d005      	beq.n	8001750 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001744:	4b59      	ldr	r3, [pc, #356]	; (80018ac <HAL_RCC_ClockConfig+0x1c4>)
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	4a58      	ldr	r2, [pc, #352]	; (80018ac <HAL_RCC_ClockConfig+0x1c4>)
 800174a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800174e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f003 0308 	and.w	r3, r3, #8
 8001758:	2b00      	cmp	r3, #0
 800175a:	d005      	beq.n	8001768 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800175c:	4b53      	ldr	r3, [pc, #332]	; (80018ac <HAL_RCC_ClockConfig+0x1c4>)
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	4a52      	ldr	r2, [pc, #328]	; (80018ac <HAL_RCC_ClockConfig+0x1c4>)
 8001762:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001766:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001768:	4b50      	ldr	r3, [pc, #320]	; (80018ac <HAL_RCC_ClockConfig+0x1c4>)
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	494d      	ldr	r1, [pc, #308]	; (80018ac <HAL_RCC_ClockConfig+0x1c4>)
 8001776:	4313      	orrs	r3, r2
 8001778:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f003 0301 	and.w	r3, r3, #1
 8001782:	2b00      	cmp	r3, #0
 8001784:	d040      	beq.n	8001808 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	2b01      	cmp	r3, #1
 800178c:	d107      	bne.n	800179e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800178e:	4b47      	ldr	r3, [pc, #284]	; (80018ac <HAL_RCC_ClockConfig+0x1c4>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001796:	2b00      	cmp	r3, #0
 8001798:	d115      	bne.n	80017c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	e07f      	b.n	800189e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	2b02      	cmp	r3, #2
 80017a4:	d107      	bne.n	80017b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017a6:	4b41      	ldr	r3, [pc, #260]	; (80018ac <HAL_RCC_ClockConfig+0x1c4>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d109      	bne.n	80017c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
 80017b4:	e073      	b.n	800189e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017b6:	4b3d      	ldr	r3, [pc, #244]	; (80018ac <HAL_RCC_ClockConfig+0x1c4>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f003 0302 	and.w	r3, r3, #2
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d101      	bne.n	80017c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	e06b      	b.n	800189e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017c6:	4b39      	ldr	r3, [pc, #228]	; (80018ac <HAL_RCC_ClockConfig+0x1c4>)
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	f023 0203 	bic.w	r2, r3, #3
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	4936      	ldr	r1, [pc, #216]	; (80018ac <HAL_RCC_ClockConfig+0x1c4>)
 80017d4:	4313      	orrs	r3, r2
 80017d6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017d8:	f7fe fff2 	bl	80007c0 <HAL_GetTick>
 80017dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017de:	e00a      	b.n	80017f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017e0:	f7fe ffee 	bl	80007c0 <HAL_GetTick>
 80017e4:	4602      	mov	r2, r0
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d901      	bls.n	80017f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017f2:	2303      	movs	r3, #3
 80017f4:	e053      	b.n	800189e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017f6:	4b2d      	ldr	r3, [pc, #180]	; (80018ac <HAL_RCC_ClockConfig+0x1c4>)
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	f003 020c 	and.w	r2, r3, #12
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	429a      	cmp	r2, r3
 8001806:	d1eb      	bne.n	80017e0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001808:	4b27      	ldr	r3, [pc, #156]	; (80018a8 <HAL_RCC_ClockConfig+0x1c0>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f003 0307 	and.w	r3, r3, #7
 8001810:	683a      	ldr	r2, [r7, #0]
 8001812:	429a      	cmp	r2, r3
 8001814:	d210      	bcs.n	8001838 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001816:	4b24      	ldr	r3, [pc, #144]	; (80018a8 <HAL_RCC_ClockConfig+0x1c0>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f023 0207 	bic.w	r2, r3, #7
 800181e:	4922      	ldr	r1, [pc, #136]	; (80018a8 <HAL_RCC_ClockConfig+0x1c0>)
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	4313      	orrs	r3, r2
 8001824:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001826:	4b20      	ldr	r3, [pc, #128]	; (80018a8 <HAL_RCC_ClockConfig+0x1c0>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f003 0307 	and.w	r3, r3, #7
 800182e:	683a      	ldr	r2, [r7, #0]
 8001830:	429a      	cmp	r2, r3
 8001832:	d001      	beq.n	8001838 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001834:	2301      	movs	r3, #1
 8001836:	e032      	b.n	800189e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f003 0304 	and.w	r3, r3, #4
 8001840:	2b00      	cmp	r3, #0
 8001842:	d008      	beq.n	8001856 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001844:	4b19      	ldr	r3, [pc, #100]	; (80018ac <HAL_RCC_ClockConfig+0x1c4>)
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	4916      	ldr	r1, [pc, #88]	; (80018ac <HAL_RCC_ClockConfig+0x1c4>)
 8001852:	4313      	orrs	r3, r2
 8001854:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 0308 	and.w	r3, r3, #8
 800185e:	2b00      	cmp	r3, #0
 8001860:	d009      	beq.n	8001876 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001862:	4b12      	ldr	r3, [pc, #72]	; (80018ac <HAL_RCC_ClockConfig+0x1c4>)
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	691b      	ldr	r3, [r3, #16]
 800186e:	00db      	lsls	r3, r3, #3
 8001870:	490e      	ldr	r1, [pc, #56]	; (80018ac <HAL_RCC_ClockConfig+0x1c4>)
 8001872:	4313      	orrs	r3, r2
 8001874:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001876:	f000 f821 	bl	80018bc <HAL_RCC_GetSysClockFreq>
 800187a:	4602      	mov	r2, r0
 800187c:	4b0b      	ldr	r3, [pc, #44]	; (80018ac <HAL_RCC_ClockConfig+0x1c4>)
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	091b      	lsrs	r3, r3, #4
 8001882:	f003 030f 	and.w	r3, r3, #15
 8001886:	490a      	ldr	r1, [pc, #40]	; (80018b0 <HAL_RCC_ClockConfig+0x1c8>)
 8001888:	5ccb      	ldrb	r3, [r1, r3]
 800188a:	fa22 f303 	lsr.w	r3, r2, r3
 800188e:	4a09      	ldr	r2, [pc, #36]	; (80018b4 <HAL_RCC_ClockConfig+0x1cc>)
 8001890:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001892:	4b09      	ldr	r3, [pc, #36]	; (80018b8 <HAL_RCC_ClockConfig+0x1d0>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4618      	mov	r0, r3
 8001898:	f7fe ff50 	bl	800073c <HAL_InitTick>

  return HAL_OK;
 800189c:	2300      	movs	r3, #0
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3710      	adds	r7, #16
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	40022000 	.word	0x40022000
 80018ac:	40021000 	.word	0x40021000
 80018b0:	08004e80 	.word	0x08004e80
 80018b4:	20000000 	.word	0x20000000
 80018b8:	20000004 	.word	0x20000004

080018bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018bc:	b490      	push	{r4, r7}
 80018be:	b08a      	sub	sp, #40	; 0x28
 80018c0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80018c2:	4b29      	ldr	r3, [pc, #164]	; (8001968 <HAL_RCC_GetSysClockFreq+0xac>)
 80018c4:	1d3c      	adds	r4, r7, #4
 80018c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80018cc:	f240 2301 	movw	r3, #513	; 0x201
 80018d0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80018d2:	2300      	movs	r3, #0
 80018d4:	61fb      	str	r3, [r7, #28]
 80018d6:	2300      	movs	r3, #0
 80018d8:	61bb      	str	r3, [r7, #24]
 80018da:	2300      	movs	r3, #0
 80018dc:	627b      	str	r3, [r7, #36]	; 0x24
 80018de:	2300      	movs	r3, #0
 80018e0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80018e2:	2300      	movs	r3, #0
 80018e4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80018e6:	4b21      	ldr	r3, [pc, #132]	; (800196c <HAL_RCC_GetSysClockFreq+0xb0>)
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80018ec:	69fb      	ldr	r3, [r7, #28]
 80018ee:	f003 030c 	and.w	r3, r3, #12
 80018f2:	2b04      	cmp	r3, #4
 80018f4:	d002      	beq.n	80018fc <HAL_RCC_GetSysClockFreq+0x40>
 80018f6:	2b08      	cmp	r3, #8
 80018f8:	d003      	beq.n	8001902 <HAL_RCC_GetSysClockFreq+0x46>
 80018fa:	e02b      	b.n	8001954 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80018fc:	4b1c      	ldr	r3, [pc, #112]	; (8001970 <HAL_RCC_GetSysClockFreq+0xb4>)
 80018fe:	623b      	str	r3, [r7, #32]
      break;
 8001900:	e02b      	b.n	800195a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	0c9b      	lsrs	r3, r3, #18
 8001906:	f003 030f 	and.w	r3, r3, #15
 800190a:	3328      	adds	r3, #40	; 0x28
 800190c:	443b      	add	r3, r7
 800190e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001912:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001914:	69fb      	ldr	r3, [r7, #28]
 8001916:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800191a:	2b00      	cmp	r3, #0
 800191c:	d012      	beq.n	8001944 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800191e:	4b13      	ldr	r3, [pc, #76]	; (800196c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	0c5b      	lsrs	r3, r3, #17
 8001924:	f003 0301 	and.w	r3, r3, #1
 8001928:	3328      	adds	r3, #40	; 0x28
 800192a:	443b      	add	r3, r7
 800192c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001930:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	4a0e      	ldr	r2, [pc, #56]	; (8001970 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001936:	fb03 f202 	mul.w	r2, r3, r2
 800193a:	69bb      	ldr	r3, [r7, #24]
 800193c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001940:	627b      	str	r3, [r7, #36]	; 0x24
 8001942:	e004      	b.n	800194e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	4a0b      	ldr	r2, [pc, #44]	; (8001974 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001948:	fb02 f303 	mul.w	r3, r2, r3
 800194c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800194e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001950:	623b      	str	r3, [r7, #32]
      break;
 8001952:	e002      	b.n	800195a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001954:	4b06      	ldr	r3, [pc, #24]	; (8001970 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001956:	623b      	str	r3, [r7, #32]
      break;
 8001958:	bf00      	nop
    }
  }
  return sysclockfreq;
 800195a:	6a3b      	ldr	r3, [r7, #32]
}
 800195c:	4618      	mov	r0, r3
 800195e:	3728      	adds	r7, #40	; 0x28
 8001960:	46bd      	mov	sp, r7
 8001962:	bc90      	pop	{r4, r7}
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	08004238 	.word	0x08004238
 800196c:	40021000 	.word	0x40021000
 8001970:	007a1200 	.word	0x007a1200
 8001974:	003d0900 	.word	0x003d0900

08001978 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800197c:	4b02      	ldr	r3, [pc, #8]	; (8001988 <HAL_RCC_GetHCLKFreq+0x10>)
 800197e:	681b      	ldr	r3, [r3, #0]
}
 8001980:	4618      	mov	r0, r3
 8001982:	46bd      	mov	sp, r7
 8001984:	bc80      	pop	{r7}
 8001986:	4770      	bx	lr
 8001988:	20000000 	.word	0x20000000

0800198c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001990:	f7ff fff2 	bl	8001978 <HAL_RCC_GetHCLKFreq>
 8001994:	4602      	mov	r2, r0
 8001996:	4b05      	ldr	r3, [pc, #20]	; (80019ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	0a1b      	lsrs	r3, r3, #8
 800199c:	f003 0307 	and.w	r3, r3, #7
 80019a0:	4903      	ldr	r1, [pc, #12]	; (80019b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80019a2:	5ccb      	ldrb	r3, [r1, r3]
 80019a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	40021000 	.word	0x40021000
 80019b0:	08004e90 	.word	0x08004e90

080019b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80019b8:	f7ff ffde 	bl	8001978 <HAL_RCC_GetHCLKFreq>
 80019bc:	4602      	mov	r2, r0
 80019be:	4b05      	ldr	r3, [pc, #20]	; (80019d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	0adb      	lsrs	r3, r3, #11
 80019c4:	f003 0307 	and.w	r3, r3, #7
 80019c8:	4903      	ldr	r1, [pc, #12]	; (80019d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80019ca:	5ccb      	ldrb	r3, [r1, r3]
 80019cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	40021000 	.word	0x40021000
 80019d8:	08004e90 	.word	0x08004e90

080019dc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80019dc:	b480      	push	{r7}
 80019de:	b085      	sub	sp, #20
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80019e4:	4b0a      	ldr	r3, [pc, #40]	; (8001a10 <RCC_Delay+0x34>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a0a      	ldr	r2, [pc, #40]	; (8001a14 <RCC_Delay+0x38>)
 80019ea:	fba2 2303 	umull	r2, r3, r2, r3
 80019ee:	0a5b      	lsrs	r3, r3, #9
 80019f0:	687a      	ldr	r2, [r7, #4]
 80019f2:	fb02 f303 	mul.w	r3, r2, r3
 80019f6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80019f8:	bf00      	nop
  }
  while (Delay --);
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	1e5a      	subs	r2, r3, #1
 80019fe:	60fa      	str	r2, [r7, #12]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d1f9      	bne.n	80019f8 <RCC_Delay+0x1c>
}
 8001a04:	bf00      	nop
 8001a06:	bf00      	nop
 8001a08:	3714      	adds	r7, #20
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bc80      	pop	{r7}
 8001a0e:	4770      	bx	lr
 8001a10:	20000000 	.word	0x20000000
 8001a14:	10624dd3 	.word	0x10624dd3

08001a18 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d101      	bne.n	8001a2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e03f      	b.n	8001aaa <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d106      	bne.n	8001a44 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f7fe fce2 	bl	8000408 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2224      	movs	r2, #36	; 0x24
 8001a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	68da      	ldr	r2, [r3, #12]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001a5a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f000 fbf9 	bl	8002254 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	691a      	ldr	r2, [r3, #16]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001a70:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	695a      	ldr	r2, [r3, #20]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001a80:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	68da      	ldr	r2, [r3, #12]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001a90:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2200      	movs	r2, #0
 8001a96:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2220      	movs	r2, #32
 8001a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2220      	movs	r2, #32
 8001aa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001aa8:	2300      	movs	r3, #0
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3708      	adds	r7, #8
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}

08001ab2 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8001ab2:	b580      	push	{r7, lr}
 8001ab4:	b082      	sub	sp, #8
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d101      	bne.n	8001ac4 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e047      	b.n	8001b54 <HAL_HalfDuplex_Init+0xa2>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d106      	bne.n	8001ade <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001ad8:	6878      	ldr	r0, [r7, #4]
 8001ada:	f7fe fc95 	bl	8000408 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2224      	movs	r2, #36	; 0x24
 8001ae2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	68da      	ldr	r2, [r3, #12]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001af4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	f000 fbac 	bl	8002254 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	691a      	ldr	r2, [r3, #16]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001b0a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	695a      	ldr	r2, [r3, #20]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8001b1a:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	695a      	ldr	r2, [r3, #20]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f042 0208 	orr.w	r2, r2, #8
 8001b2a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	68da      	ldr	r2, [r3, #12]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001b3a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2200      	movs	r2, #0
 8001b40:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2220      	movs	r2, #32
 8001b46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2220      	movs	r2, #32
 8001b4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001b52:	2300      	movs	r3, #0
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3708      	adds	r7, #8
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}

08001b5c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b08a      	sub	sp, #40	; 0x28
 8001b60:	af02      	add	r7, sp, #8
 8001b62:	60f8      	str	r0, [r7, #12]
 8001b64:	60b9      	str	r1, [r7, #8]
 8001b66:	603b      	str	r3, [r7, #0]
 8001b68:	4613      	mov	r3, r2
 8001b6a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	2b20      	cmp	r3, #32
 8001b7a:	d17c      	bne.n	8001c76 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d002      	beq.n	8001b88 <HAL_UART_Transmit+0x2c>
 8001b82:	88fb      	ldrh	r3, [r7, #6]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d101      	bne.n	8001b8c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	e075      	b.n	8001c78 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d101      	bne.n	8001b9a <HAL_UART_Transmit+0x3e>
 8001b96:	2302      	movs	r3, #2
 8001b98:	e06e      	b.n	8001c78 <HAL_UART_Transmit+0x11c>
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	2221      	movs	r2, #33	; 0x21
 8001bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001bb0:	f7fe fe06 	bl	80007c0 <HAL_GetTick>
 8001bb4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	88fa      	ldrh	r2, [r7, #6]
 8001bba:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	88fa      	ldrh	r2, [r7, #6]
 8001bc0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001bca:	d108      	bne.n	8001bde <HAL_UART_Transmit+0x82>
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	691b      	ldr	r3, [r3, #16]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d104      	bne.n	8001bde <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	61bb      	str	r3, [r7, #24]
 8001bdc:	e003      	b.n	8001be6 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001be2:	2300      	movs	r3, #0
 8001be4:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	2200      	movs	r2, #0
 8001bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001bee:	e02a      	b.n	8001c46 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	9300      	str	r3, [sp, #0]
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	2180      	movs	r1, #128	; 0x80
 8001bfa:	68f8      	ldr	r0, [r7, #12]
 8001bfc:	f000 fa3a 	bl	8002074 <UART_WaitOnFlagUntilTimeout>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001c06:	2303      	movs	r3, #3
 8001c08:	e036      	b.n	8001c78 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d10b      	bne.n	8001c28 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001c10:	69bb      	ldr	r3, [r7, #24]
 8001c12:	881b      	ldrh	r3, [r3, #0]
 8001c14:	461a      	mov	r2, r3
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001c1e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001c20:	69bb      	ldr	r3, [r7, #24]
 8001c22:	3302      	adds	r3, #2
 8001c24:	61bb      	str	r3, [r7, #24]
 8001c26:	e007      	b.n	8001c38 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	781a      	ldrb	r2, [r3, #0]
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	3301      	adds	r3, #1
 8001c36:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001c3c:	b29b      	uxth	r3, r3
 8001c3e:	3b01      	subs	r3, #1
 8001c40:	b29a      	uxth	r2, r3
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001c4a:	b29b      	uxth	r3, r3
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d1cf      	bne.n	8001bf0 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	9300      	str	r3, [sp, #0]
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	2200      	movs	r2, #0
 8001c58:	2140      	movs	r1, #64	; 0x40
 8001c5a:	68f8      	ldr	r0, [r7, #12]
 8001c5c:	f000 fa0a 	bl	8002074 <UART_WaitOnFlagUntilTimeout>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001c66:	2303      	movs	r3, #3
 8001c68:	e006      	b.n	8001c78 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	2220      	movs	r2, #32
 8001c6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001c72:	2300      	movs	r3, #0
 8001c74:	e000      	b.n	8001c78 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001c76:	2302      	movs	r3, #2
  }
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	3720      	adds	r7, #32
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}

08001c80 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b08a      	sub	sp, #40	; 0x28
 8001c84:	af02      	add	r7, sp, #8
 8001c86:	60f8      	str	r0, [r7, #12]
 8001c88:	60b9      	str	r1, [r7, #8]
 8001c8a:	603b      	str	r3, [r7, #0]
 8001c8c:	4613      	mov	r3, r2
 8001c8e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001c90:	2300      	movs	r3, #0
 8001c92:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001c9a:	b2db      	uxtb	r3, r3
 8001c9c:	2b20      	cmp	r3, #32
 8001c9e:	f040 808c 	bne.w	8001dba <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d002      	beq.n	8001cae <HAL_UART_Receive+0x2e>
 8001ca8:	88fb      	ldrh	r3, [r7, #6]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d101      	bne.n	8001cb2 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e084      	b.n	8001dbc <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d101      	bne.n	8001cc0 <HAL_UART_Receive+0x40>
 8001cbc:	2302      	movs	r3, #2
 8001cbe:	e07d      	b.n	8001dbc <HAL_UART_Receive+0x13c>
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	2222      	movs	r2, #34	; 0x22
 8001cd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001cdc:	f7fe fd70 	bl	80007c0 <HAL_GetTick>
 8001ce0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	88fa      	ldrh	r2, [r7, #6]
 8001ce6:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	88fa      	ldrh	r2, [r7, #6]
 8001cec:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001cf6:	d108      	bne.n	8001d0a <HAL_UART_Receive+0x8a>
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	691b      	ldr	r3, [r3, #16]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d104      	bne.n	8001d0a <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8001d00:	2300      	movs	r3, #0
 8001d02:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	61bb      	str	r3, [r7, #24]
 8001d08:	e003      	b.n	8001d12 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	2200      	movs	r2, #0
 8001d16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8001d1a:	e043      	b.n	8001da4 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	9300      	str	r3, [sp, #0]
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	2200      	movs	r2, #0
 8001d24:	2120      	movs	r1, #32
 8001d26:	68f8      	ldr	r0, [r7, #12]
 8001d28:	f000 f9a4 	bl	8002074 <UART_WaitOnFlagUntilTimeout>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8001d32:	2303      	movs	r3, #3
 8001d34:	e042      	b.n	8001dbc <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d10c      	bne.n	8001d56 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	b29b      	uxth	r3, r3
 8001d44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d48:	b29a      	uxth	r2, r3
 8001d4a:	69bb      	ldr	r3, [r7, #24]
 8001d4c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8001d4e:	69bb      	ldr	r3, [r7, #24]
 8001d50:	3302      	adds	r3, #2
 8001d52:	61bb      	str	r3, [r7, #24]
 8001d54:	e01f      	b.n	8001d96 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d5e:	d007      	beq.n	8001d70 <HAL_UART_Receive+0xf0>
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d10a      	bne.n	8001d7e <HAL_UART_Receive+0xfe>
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	691b      	ldr	r3, [r3, #16]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d106      	bne.n	8001d7e <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	b2da      	uxtb	r2, r3
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	701a      	strb	r2, [r3, #0]
 8001d7c:	e008      	b.n	8001d90 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d8a:	b2da      	uxtb	r2, r3
 8001d8c:	69fb      	ldr	r3, [r7, #28]
 8001d8e:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8001d90:	69fb      	ldr	r3, [r7, #28]
 8001d92:	3301      	adds	r3, #1
 8001d94:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001d9a:	b29b      	uxth	r3, r3
 8001d9c:	3b01      	subs	r3, #1
 8001d9e:	b29a      	uxth	r2, r3
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001da8:	b29b      	uxth	r3, r3
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d1b6      	bne.n	8001d1c <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	2220      	movs	r2, #32
 8001db2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8001db6:	2300      	movs	r3, #0
 8001db8:	e000      	b.n	8001dbc <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8001dba:	2302      	movs	r3, #2
  }
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	3720      	adds	r7, #32
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}

08001dc4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b084      	sub	sp, #16
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	60f8      	str	r0, [r7, #12]
 8001dcc:	60b9      	str	r1, [r7, #8]
 8001dce:	4613      	mov	r3, r2
 8001dd0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	2b20      	cmp	r3, #32
 8001ddc:	d11d      	bne.n	8001e1a <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d002      	beq.n	8001dea <HAL_UART_Receive_DMA+0x26>
 8001de4:	88fb      	ldrh	r3, [r7, #6]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d101      	bne.n	8001dee <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e016      	b.n	8001e1c <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d101      	bne.n	8001dfc <HAL_UART_Receive_DMA+0x38>
 8001df8:	2302      	movs	r3, #2
 8001dfa:	e00f      	b.n	8001e1c <HAL_UART_Receive_DMA+0x58>
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	2201      	movs	r2, #1
 8001e00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	2200      	movs	r2, #0
 8001e08:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8001e0a:	88fb      	ldrh	r3, [r7, #6]
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	68b9      	ldr	r1, [r7, #8]
 8001e10:	68f8      	ldr	r0, [r7, #12]
 8001e12:	f000 f979 	bl	8002108 <UART_Start_Receive_DMA>
 8001e16:	4603      	mov	r3, r0
 8001e18:	e000      	b.n	8001e1c <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8001e1a:	2302      	movs	r3, #2
  }
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	3710      	adds	r7, #16
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}

08001e24 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b084      	sub	sp, #16
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	60fb      	str	r3, [r7, #12]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	695b      	ldr	r3, [r3, #20]
 8001e36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	bf14      	ite	ne
 8001e3e:	2301      	movne	r3, #1
 8001e40:	2300      	moveq	r3, #0
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	2b21      	cmp	r3, #33	; 0x21
 8001e50:	d116      	bne.n	8001e80 <HAL_UART_DMAStop+0x5c>
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d013      	beq.n	8001e80 <HAL_UART_DMAStop+0x5c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	695a      	ldr	r2, [r3, #20]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e66:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d004      	beq.n	8001e7a <HAL_UART_DMAStop+0x56>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e74:	4618      	mov	r0, r3
 8001e76:	f7fe fec2 	bl	8000bfe <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f000 f9a8 	bl	80021d0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	695b      	ldr	r3, [r3, #20]
 8001e86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	bf14      	ite	ne
 8001e8e:	2301      	movne	r3, #1
 8001e90:	2300      	moveq	r3, #0
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	2b22      	cmp	r3, #34	; 0x22
 8001ea0:	d116      	bne.n	8001ed0 <HAL_UART_DMAStop+0xac>
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d013      	beq.n	8001ed0 <HAL_UART_DMAStop+0xac>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	695a      	ldr	r2, [r3, #20]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001eb6:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d004      	beq.n	8001eca <HAL_UART_DMAStop+0xa6>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f7fe fe9a 	bl	8000bfe <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f000 f995 	bl	80021fa <UART_EndRxTransfer>
  }

  return HAL_OK;
 8001ed0:	2300      	movs	r3, #0
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3710      	adds	r7, #16
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}

08001eda <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8001eda:	b480      	push	{r7}
 8001edc:	b083      	sub	sp, #12
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8001ee2:	bf00      	nop
 8001ee4:	370c      	adds	r7, #12
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bc80      	pop	{r7}
 8001eea:	4770      	bx	lr

08001eec <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8001ef4:	bf00      	nop
 8001ef6:	370c      	adds	r7, #12
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bc80      	pop	{r7}
 8001efc:	4770      	bx	lr

08001efe <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001efe:	b480      	push	{r7}
 8001f00:	b083      	sub	sp, #12
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	6078      	str	r0, [r7, #4]
 8001f06:	460b      	mov	r3, r1
 8001f08:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8001f0a:	bf00      	nop
 8001f0c:	370c      	adds	r7, #12
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bc80      	pop	{r7}
 8001f12:	4770      	bx	lr

08001f14 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b084      	sub	sp, #16
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f20:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 0320 	and.w	r3, r3, #32
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d12a      	bne.n	8001f86 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	2200      	movs	r2, #0
 8001f34:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	68da      	ldr	r2, [r3, #12]
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f44:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	695a      	ldr	r2, [r3, #20]
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f022 0201 	bic.w	r2, r2, #1
 8001f54:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	695a      	ldr	r2, [r3, #20]
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f64:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	2220      	movs	r2, #32
 8001f6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d107      	bne.n	8001f86 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	68da      	ldr	r2, [r3, #12]
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f022 0210 	bic.w	r2, r2, #16
 8001f84:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d106      	bne.n	8001f9c <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001f92:	4619      	mov	r1, r3
 8001f94:	68f8      	ldr	r0, [r7, #12]
 8001f96:	f7ff ffb2 	bl	8001efe <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8001f9a:	e002      	b.n	8001fa2 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8001f9c:	68f8      	ldr	r0, [r7, #12]
 8001f9e:	f000 feb7 	bl	8002d10 <HAL_UART_RxCpltCallback>
}
 8001fa2:	bf00      	nop
 8001fa4:	3710      	adds	r7, #16
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}

08001faa <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8001faa:	b580      	push	{r7, lr}
 8001fac:	b084      	sub	sp, #16
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb6:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d108      	bne.n	8001fd2 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001fc4:	085b      	lsrs	r3, r3, #1
 8001fc6:	b29b      	uxth	r3, r3
 8001fc8:	4619      	mov	r1, r3
 8001fca:	68f8      	ldr	r0, [r7, #12]
 8001fcc:	f7ff ff97 	bl	8001efe <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8001fd0:	e002      	b.n	8001fd8 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8001fd2:	68f8      	ldr	r0, [r7, #12]
 8001fd4:	f7ff ff81 	bl	8001eda <HAL_UART_RxHalfCpltCallback>
}
 8001fd8:	bf00      	nop
 8001fda:	3710      	adds	r7, #16
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}

08001fe0 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b084      	sub	sp, #16
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff0:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	695b      	ldr	r3, [r3, #20]
 8001ff8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	bf14      	ite	ne
 8002000:	2301      	movne	r3, #1
 8002002:	2300      	moveq	r3, #0
 8002004:	b2db      	uxtb	r3, r3
 8002006:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800200e:	b2db      	uxtb	r3, r3
 8002010:	2b21      	cmp	r3, #33	; 0x21
 8002012:	d108      	bne.n	8002026 <UART_DMAError+0x46>
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d005      	beq.n	8002026 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	2200      	movs	r2, #0
 800201e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8002020:	68b8      	ldr	r0, [r7, #8]
 8002022:	f000 f8d5 	bl	80021d0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	695b      	ldr	r3, [r3, #20]
 800202c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002030:	2b00      	cmp	r3, #0
 8002032:	bf14      	ite	ne
 8002034:	2301      	movne	r3, #1
 8002036:	2300      	moveq	r3, #0
 8002038:	b2db      	uxtb	r3, r3
 800203a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002042:	b2db      	uxtb	r3, r3
 8002044:	2b22      	cmp	r3, #34	; 0x22
 8002046:	d108      	bne.n	800205a <UART_DMAError+0x7a>
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d005      	beq.n	800205a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	2200      	movs	r2, #0
 8002052:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8002054:	68b8      	ldr	r0, [r7, #8]
 8002056:	f000 f8d0 	bl	80021fa <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205e:	f043 0210 	orr.w	r2, r3, #16
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002066:	68b8      	ldr	r0, [r7, #8]
 8002068:	f7ff ff40 	bl	8001eec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800206c:	bf00      	nop
 800206e:	3710      	adds	r7, #16
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}

08002074 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b084      	sub	sp, #16
 8002078:	af00      	add	r7, sp, #0
 800207a:	60f8      	str	r0, [r7, #12]
 800207c:	60b9      	str	r1, [r7, #8]
 800207e:	603b      	str	r3, [r7, #0]
 8002080:	4613      	mov	r3, r2
 8002082:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002084:	e02c      	b.n	80020e0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002086:	69bb      	ldr	r3, [r7, #24]
 8002088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800208c:	d028      	beq.n	80020e0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800208e:	69bb      	ldr	r3, [r7, #24]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d007      	beq.n	80020a4 <UART_WaitOnFlagUntilTimeout+0x30>
 8002094:	f7fe fb94 	bl	80007c0 <HAL_GetTick>
 8002098:	4602      	mov	r2, r0
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	69ba      	ldr	r2, [r7, #24]
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d21d      	bcs.n	80020e0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	68da      	ldr	r2, [r3, #12]
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80020b2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	695a      	ldr	r2, [r3, #20]
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f022 0201 	bic.w	r2, r2, #1
 80020c2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2220      	movs	r2, #32
 80020c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	2220      	movs	r2, #32
 80020d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	2200      	movs	r2, #0
 80020d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80020dc:	2303      	movs	r3, #3
 80020de:	e00f      	b.n	8002100 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	4013      	ands	r3, r2
 80020ea:	68ba      	ldr	r2, [r7, #8]
 80020ec:	429a      	cmp	r2, r3
 80020ee:	bf0c      	ite	eq
 80020f0:	2301      	moveq	r3, #1
 80020f2:	2300      	movne	r3, #0
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	461a      	mov	r2, r3
 80020f8:	79fb      	ldrb	r3, [r7, #7]
 80020fa:	429a      	cmp	r2, r3
 80020fc:	d0c3      	beq.n	8002086 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80020fe:	2300      	movs	r3, #0
}
 8002100:	4618      	mov	r0, r3
 8002102:	3710      	adds	r7, #16
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}

08002108 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b086      	sub	sp, #24
 800210c:	af00      	add	r7, sp, #0
 800210e:	60f8      	str	r0, [r7, #12]
 8002110:	60b9      	str	r1, [r7, #8]
 8002112:	4613      	mov	r3, r2
 8002114:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8002116:	68ba      	ldr	r2, [r7, #8]
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	88fa      	ldrh	r2, [r7, #6]
 8002120:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	2200      	movs	r2, #0
 8002126:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	2222      	movs	r2, #34	; 0x22
 800212c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002134:	4a23      	ldr	r2, [pc, #140]	; (80021c4 <UART_Start_Receive_DMA+0xbc>)
 8002136:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800213c:	4a22      	ldr	r2, [pc, #136]	; (80021c8 <UART_Start_Receive_DMA+0xc0>)
 800213e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002144:	4a21      	ldr	r2, [pc, #132]	; (80021cc <UART_Start_Receive_DMA+0xc4>)
 8002146:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800214c:	2200      	movs	r2, #0
 800214e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8002150:	f107 0308 	add.w	r3, r7, #8
 8002154:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	3304      	adds	r3, #4
 8002160:	4619      	mov	r1, r3
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	88fb      	ldrh	r3, [r7, #6]
 8002168:	f7fe fcea 	bl	8000b40 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800216c:	2300      	movs	r3, #0
 800216e:	613b      	str	r3, [r7, #16]
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	613b      	str	r3, [r7, #16]
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	613b      	str	r3, [r7, #16]
 8002180:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	2200      	movs	r2, #0
 8002186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	68da      	ldr	r2, [r3, #12]
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002198:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	695a      	ldr	r2, [r3, #20]
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f042 0201 	orr.w	r2, r2, #1
 80021a8:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	695a      	ldr	r2, [r3, #20]
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80021b8:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 80021ba:	2300      	movs	r3, #0
}
 80021bc:	4618      	mov	r0, r3
 80021be:	3718      	adds	r7, #24
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	08001f15 	.word	0x08001f15
 80021c8:	08001fab 	.word	0x08001fab
 80021cc:	08001fe1 	.word	0x08001fe1

080021d0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	68da      	ldr	r2, [r3, #12]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80021e6:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2220      	movs	r2, #32
 80021ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80021f0:	bf00      	nop
 80021f2:	370c      	adds	r7, #12
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bc80      	pop	{r7}
 80021f8:	4770      	bx	lr

080021fa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80021fa:	b480      	push	{r7}
 80021fc:	b083      	sub	sp, #12
 80021fe:	af00      	add	r7, sp, #0
 8002200:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	68da      	ldr	r2, [r3, #12]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002210:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	695a      	ldr	r2, [r3, #20]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f022 0201 	bic.w	r2, r2, #1
 8002220:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002226:	2b01      	cmp	r3, #1
 8002228:	d107      	bne.n	800223a <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	68da      	ldr	r2, [r3, #12]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f022 0210 	bic.w	r2, r2, #16
 8002238:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2220      	movs	r2, #32
 800223e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2200      	movs	r2, #0
 8002246:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002248:	bf00      	nop
 800224a:	370c      	adds	r7, #12
 800224c:	46bd      	mov	sp, r7
 800224e:	bc80      	pop	{r7}
 8002250:	4770      	bx	lr
	...

08002254 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b084      	sub	sp, #16
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	691b      	ldr	r3, [r3, #16]
 8002262:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	68da      	ldr	r2, [r3, #12]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	430a      	orrs	r2, r1
 8002270:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	689a      	ldr	r2, [r3, #8]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	691b      	ldr	r3, [r3, #16]
 800227a:	431a      	orrs	r2, r3
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	695b      	ldr	r3, [r3, #20]
 8002280:	4313      	orrs	r3, r2
 8002282:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	68db      	ldr	r3, [r3, #12]
 800228a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800228e:	f023 030c 	bic.w	r3, r3, #12
 8002292:	687a      	ldr	r2, [r7, #4]
 8002294:	6812      	ldr	r2, [r2, #0]
 8002296:	68b9      	ldr	r1, [r7, #8]
 8002298:	430b      	orrs	r3, r1
 800229a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	695b      	ldr	r3, [r3, #20]
 80022a2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	699a      	ldr	r2, [r3, #24]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	430a      	orrs	r2, r1
 80022b0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a2c      	ldr	r2, [pc, #176]	; (8002368 <UART_SetConfig+0x114>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d103      	bne.n	80022c4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80022bc:	f7ff fb7a 	bl	80019b4 <HAL_RCC_GetPCLK2Freq>
 80022c0:	60f8      	str	r0, [r7, #12]
 80022c2:	e002      	b.n	80022ca <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80022c4:	f7ff fb62 	bl	800198c <HAL_RCC_GetPCLK1Freq>
 80022c8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80022ca:	68fa      	ldr	r2, [r7, #12]
 80022cc:	4613      	mov	r3, r2
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	4413      	add	r3, r2
 80022d2:	009a      	lsls	r2, r3, #2
 80022d4:	441a      	add	r2, r3
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80022e0:	4a22      	ldr	r2, [pc, #136]	; (800236c <UART_SetConfig+0x118>)
 80022e2:	fba2 2303 	umull	r2, r3, r2, r3
 80022e6:	095b      	lsrs	r3, r3, #5
 80022e8:	0119      	lsls	r1, r3, #4
 80022ea:	68fa      	ldr	r2, [r7, #12]
 80022ec:	4613      	mov	r3, r2
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	4413      	add	r3, r2
 80022f2:	009a      	lsls	r2, r3, #2
 80022f4:	441a      	add	r2, r3
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8002300:	4b1a      	ldr	r3, [pc, #104]	; (800236c <UART_SetConfig+0x118>)
 8002302:	fba3 0302 	umull	r0, r3, r3, r2
 8002306:	095b      	lsrs	r3, r3, #5
 8002308:	2064      	movs	r0, #100	; 0x64
 800230a:	fb00 f303 	mul.w	r3, r0, r3
 800230e:	1ad3      	subs	r3, r2, r3
 8002310:	011b      	lsls	r3, r3, #4
 8002312:	3332      	adds	r3, #50	; 0x32
 8002314:	4a15      	ldr	r2, [pc, #84]	; (800236c <UART_SetConfig+0x118>)
 8002316:	fba2 2303 	umull	r2, r3, r2, r3
 800231a:	095b      	lsrs	r3, r3, #5
 800231c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002320:	4419      	add	r1, r3
 8002322:	68fa      	ldr	r2, [r7, #12]
 8002324:	4613      	mov	r3, r2
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	4413      	add	r3, r2
 800232a:	009a      	lsls	r2, r3, #2
 800232c:	441a      	add	r2, r3
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	fbb2 f2f3 	udiv	r2, r2, r3
 8002338:	4b0c      	ldr	r3, [pc, #48]	; (800236c <UART_SetConfig+0x118>)
 800233a:	fba3 0302 	umull	r0, r3, r3, r2
 800233e:	095b      	lsrs	r3, r3, #5
 8002340:	2064      	movs	r0, #100	; 0x64
 8002342:	fb00 f303 	mul.w	r3, r0, r3
 8002346:	1ad3      	subs	r3, r2, r3
 8002348:	011b      	lsls	r3, r3, #4
 800234a:	3332      	adds	r3, #50	; 0x32
 800234c:	4a07      	ldr	r2, [pc, #28]	; (800236c <UART_SetConfig+0x118>)
 800234e:	fba2 2303 	umull	r2, r3, r2, r3
 8002352:	095b      	lsrs	r3, r3, #5
 8002354:	f003 020f 	and.w	r2, r3, #15
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	440a      	add	r2, r1
 800235e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002360:	bf00      	nop
 8002362:	3710      	adds	r7, #16
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}
 8002368:	40013800 	.word	0x40013800
 800236c:	51eb851f 	.word	0x51eb851f

08002370 <console>:
#define SEND_TIME_OUT 1000

extern UART_HandleTypeDef huart1;
extern CRC_HandleTypeDef hcrc;

static void console(const char *title, const char *msg) {
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	6039      	str	r1, [r7, #0]
	printf("%s:: %s\n", title, msg);
 800237a:	683a      	ldr	r2, [r7, #0]
 800237c:	6879      	ldr	r1, [r7, #4]
 800237e:	4803      	ldr	r0, [pc, #12]	; (800238c <console+0x1c>)
 8002380:	f000 ffa4 	bl	80032cc <iprintf>
}
 8002384:	bf00      	nop
 8002386:	3708      	adds	r7, #8
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}
 800238c:	08004248 	.word	0x08004248

08002390 <receive>:

//void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
//	uart_receiveRxCpltCallback();
//}

void receive(uint32_t id, uint8_t *bytes, uint16_t len) {
 8002390:	b580      	push	{r7, lr}
 8002392:	b084      	sub	sp, #16
 8002394:	af00      	add	r7, sp, #0
 8002396:	60f8      	str	r0, [r7, #12]
 8002398:	60b9      	str	r1, [r7, #8]
 800239a:	4613      	mov	r3, r2
 800239c:	80fb      	strh	r3, [r7, #6]
	printf("0x%x : (%d)\n", (int) id, len);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	88fa      	ldrh	r2, [r7, #6]
 80023a2:	4619      	mov	r1, r3
 80023a4:	4806      	ldr	r0, [pc, #24]	; (80023c0 <receive+0x30>)
 80023a6:	f000 ff91 	bl	80032cc <iprintf>
	uart_transmit(id, bytes, len);
 80023aa:	88fb      	ldrh	r3, [r7, #6]
 80023ac:	461a      	mov	r2, r3
 80023ae:	68b9      	ldr	r1, [r7, #8]
 80023b0:	68f8      	ldr	r0, [r7, #12]
 80023b2:	f000 fec1 	bl	8003138 <uart_transmit>
//			prev_tick = HAL_GetTick();
//			count += new_size;
//			canTransmitted = 0;
//		}
//	}
}
 80023b6:	bf00      	nop
 80023b8:	3710      	adds	r7, #16
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	08004254 	.word	0x08004254

080023c4 <init>:
uint8_t data2[] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, [99] = 12 };
/*
 * This function is called at the beginning of our code
 * @param adapter_huart		: handler of UART used for receiving and transmitting data
 */
void init() {
 80023c4:	b580      	push	{r7, lr}
 80023c6:	af00      	add	r7, sp, #0
	uart_init(&huart1, &hcrc, receive);
 80023c8:	4a05      	ldr	r2, [pc, #20]	; (80023e0 <init+0x1c>)
 80023ca:	4906      	ldr	r1, [pc, #24]	; (80023e4 <init+0x20>)
 80023cc:	4806      	ldr	r0, [pc, #24]	; (80023e8 <init+0x24>)
 80023ce:	f000 fe97 	bl	8003100 <uart_init>

	console("INIT FROM ADAPTER", "SUCCESS");
 80023d2:	4906      	ldr	r1, [pc, #24]	; (80023ec <init+0x28>)
 80023d4:	4806      	ldr	r0, [pc, #24]	; (80023f0 <init+0x2c>)
 80023d6:	f7ff ffcb 	bl	8002370 <console>
}
 80023da:	bf00      	nop
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	08002391 	.word	0x08002391
 80023e4:	200000a0 	.word	0x200000a0
 80023e8:	200000a8 	.word	0x200000a8
 80023ec:	08004264 	.word	0x08004264
 80023f0:	0800426c 	.word	0x0800426c

080023f4 <loop>:

uint32_t id = 0;
/**
 * This function is called repeatedly
 */
void loop() {
 80023f4:	b580      	push	{r7, lr}
 80023f6:	af00      	add	r7, sp, #0
//		prevTick = HAL_GetTick();
//	}
//	if (id < 10)
//		uart_transmit(id, data1, 5);

	uart_loop();
 80023f8:	f000 feea 	bl	80031d0 <uart_loop>

//	HAL_Delay(1);
}
 80023fc:	bf00      	nop
 80023fe:	bd80      	pop	{r7, pc}

08002400 <receiveThreadDebug>:
static const int TRANSMIT_TRY = 3;
static uint8_t send_data[TRANSMIT_BUFF_SIZE];
static uint8_t send_sync_bytes[1];
static uint8_t send_sync_ack[1];

static void receiveThreadDebug(const char *msg) {
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
//	printf("%s\n", msg);
}
 8002408:	bf00      	nop
 800240a:	370c      	adds	r7, #12
 800240c:	46bd      	mov	sp, r7
 800240e:	bc80      	pop	{r7}
 8002410:	4770      	bx	lr
	...

08002414 <console>:

static void console(ConsoleStatus status, const char *func_name,
		const char *msg, ...) {
 8002414:	b40c      	push	{r2, r3}
 8002416:	b580      	push	{r7, lr}
 8002418:	b084      	sub	sp, #16
 800241a:	af00      	add	r7, sp, #0
 800241c:	4603      	mov	r3, r0
 800241e:	6039      	str	r1, [r7, #0]
 8002420:	71fb      	strb	r3, [r7, #7]
//	printf("heyy\n");
	//	if(state!=CONSOLE_ERROR)
	if (status == CONSOLE_INFO)
 8002422:	79fb      	ldrb	r3, [r7, #7]
 8002424:	2b01      	cmp	r3, #1
 8002426:	d023      	beq.n	8002470 <console+0x5c>
		return;
	//TODO make naked and show all registers
	if (status == CONSOLE_ERROR) {
 8002428:	79fb      	ldrb	r3, [r7, #7]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d104      	bne.n	8002438 <console+0x24>
		printf("uart.c|%s> ERROR :", func_name);
 800242e:	6839      	ldr	r1, [r7, #0]
 8002430:	4813      	ldr	r0, [pc, #76]	; (8002480 <console+0x6c>)
 8002432:	f000 ff4b 	bl	80032cc <iprintf>
 8002436:	e013      	b.n	8002460 <console+0x4c>
	} else if (status == CONSOLE_INFO) {
 8002438:	79fb      	ldrb	r3, [r7, #7]
 800243a:	2b01      	cmp	r3, #1
 800243c:	d104      	bne.n	8002448 <console+0x34>
		printf("uart.c|%s> INFO : ", func_name);
 800243e:	6839      	ldr	r1, [r7, #0]
 8002440:	4810      	ldr	r0, [pc, #64]	; (8002484 <console+0x70>)
 8002442:	f000 ff43 	bl	80032cc <iprintf>
 8002446:	e00b      	b.n	8002460 <console+0x4c>
	} else if (status == CONSOLE_WARNING) {
 8002448:	79fb      	ldrb	r3, [r7, #7]
 800244a:	2b02      	cmp	r3, #2
 800244c:	d104      	bne.n	8002458 <console+0x44>
		printf("uart.c|%s> WARNING : ", func_name);
 800244e:	6839      	ldr	r1, [r7, #0]
 8002450:	480d      	ldr	r0, [pc, #52]	; (8002488 <console+0x74>)
 8002452:	f000 ff3b 	bl	80032cc <iprintf>
 8002456:	e003      	b.n	8002460 <console+0x4c>
	} else {
		printf("uart.c|%s: ", func_name);
 8002458:	6839      	ldr	r1, [r7, #0]
 800245a:	480c      	ldr	r0, [pc, #48]	; (800248c <console+0x78>)
 800245c:	f000 ff36 	bl	80032cc <iprintf>
	}
	va_list args;
	va_start(args, msg);
 8002460:	f107 031c 	add.w	r3, r7, #28
 8002464:	60fb      	str	r3, [r7, #12]
	vprintf(msg, args);
 8002466:	68f9      	ldr	r1, [r7, #12]
 8002468:	69b8      	ldr	r0, [r7, #24]
 800246a:	f000 ff47 	bl	80032fc <viprintf>
 800246e:	e000      	b.n	8002472 <console+0x5e>
		return;
 8002470:	bf00      	nop
	va_end(args);
}
 8002472:	3710      	adds	r7, #16
 8002474:	46bd      	mov	sp, r7
 8002476:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800247a:	b002      	add	sp, #8
 800247c:	4770      	bx	lr
 800247e:	bf00      	nop
 8002480:	08004280 	.word	0x08004280
 8002484:	08004294 	.word	0x08004294
 8002488:	080042a8 	.word	0x080042a8
 800248c:	080042c0 	.word	0x080042c0

08002490 <sendAndack>:
 * @param num_of_try    : number of try
 * @return              : 1 for success
 *                      : 0 for failed
 */
static uint8_t sendAndack(uint8_t *bytes, uint16_t bytes_len, uint8_t *ack,
		uint16_t ack_len, uint32_t time_out, uint8_t num_of_try) {
 8002490:	b580      	push	{r7, lr}
 8002492:	b088      	sub	sp, #32
 8002494:	af00      	add	r7, sp, #0
 8002496:	60f8      	str	r0, [r7, #12]
 8002498:	607a      	str	r2, [r7, #4]
 800249a:	461a      	mov	r2, r3
 800249c:	460b      	mov	r3, r1
 800249e:	817b      	strh	r3, [r7, #10]
 80024a0:	4613      	mov	r3, r2
 80024a2:	813b      	strh	r3, [r7, #8]
	uint8_t success_check = 0;
 80024a4:	2300      	movs	r3, #0
 80024a6:	77fb      	strb	r3, [r7, #31]
	for (int i = 0; i < num_of_try; i++) {
 80024a8:	2300      	movs	r3, #0
 80024aa:	61bb      	str	r3, [r7, #24]
 80024ac:	e03e      	b.n	800252c <sendAndack+0x9c>
		if (HAL_UART_Transmit(huart_adapter, bytes, bytes_len, time_out)
 80024ae:	4b24      	ldr	r3, [pc, #144]	; (8002540 <sendAndack+0xb0>)
 80024b0:	6818      	ldr	r0, [r3, #0]
 80024b2:	897a      	ldrh	r2, [r7, #10]
 80024b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024b6:	68f9      	ldr	r1, [r7, #12]
 80024b8:	f7ff fb50 	bl	8001b5c <HAL_UART_Transmit>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d006      	beq.n	80024d0 <sendAndack+0x40>
				!= HAL_OK) {
			console(CONSOLE_ERROR, __func__, "A2P Transmit error, try no %d\n",
 80024c2:	69bb      	ldr	r3, [r7, #24]
 80024c4:	4a1f      	ldr	r2, [pc, #124]	; (8002544 <sendAndack+0xb4>)
 80024c6:	4920      	ldr	r1, [pc, #128]	; (8002548 <sendAndack+0xb8>)
 80024c8:	2000      	movs	r0, #0
 80024ca:	f7ff ffa3 	bl	8002414 <console>
					i);
			continue;
 80024ce:	e02a      	b.n	8002526 <sendAndack+0x96>
		}
		HAL_UART_Receive(huart_adapter, rec_ack, ack_len, time_out);
 80024d0:	4b1b      	ldr	r3, [pc, #108]	; (8002540 <sendAndack+0xb0>)
 80024d2:	6818      	ldr	r0, [r3, #0]
 80024d4:	893a      	ldrh	r2, [r7, #8]
 80024d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024d8:	491c      	ldr	r1, [pc, #112]	; (800254c <sendAndack+0xbc>)
 80024da:	f7ff fbd1 	bl	8001c80 <HAL_UART_Receive>
		uint8_t check = 1;
 80024de:	2301      	movs	r3, #1
 80024e0:	75fb      	strb	r3, [r7, #23]
		for (int j = 0; j < ack_len; j++) {
 80024e2:	2300      	movs	r3, #0
 80024e4:	613b      	str	r3, [r7, #16]
 80024e6:	e014      	b.n	8002512 <sendAndack+0x82>
			if (rec_ack[j] != ack[j]) {
 80024e8:	4a18      	ldr	r2, [pc, #96]	; (800254c <sendAndack+0xbc>)
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	4413      	add	r3, r2
 80024ee:	781a      	ldrb	r2, [r3, #0]
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	6879      	ldr	r1, [r7, #4]
 80024f4:	440b      	add	r3, r1
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d007      	beq.n	800250c <sendAndack+0x7c>
				check = 0;
 80024fc:	2300      	movs	r3, #0
 80024fe:	75fb      	strb	r3, [r7, #23]
				console(CONSOLE_ERROR, __func__, "A2P Ack match error :: \n");
 8002500:	4a13      	ldr	r2, [pc, #76]	; (8002550 <sendAndack+0xc0>)
 8002502:	4911      	ldr	r1, [pc, #68]	; (8002548 <sendAndack+0xb8>)
 8002504:	2000      	movs	r0, #0
 8002506:	f7ff ff85 	bl	8002414 <console>
				break;
 800250a:	e006      	b.n	800251a <sendAndack+0x8a>
		for (int j = 0; j < ack_len; j++) {
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	3301      	adds	r3, #1
 8002510:	613b      	str	r3, [r7, #16]
 8002512:	893b      	ldrh	r3, [r7, #8]
 8002514:	693a      	ldr	r2, [r7, #16]
 8002516:	429a      	cmp	r2, r3
 8002518:	dbe6      	blt.n	80024e8 <sendAndack+0x58>
			}
		}
		if (check) {
 800251a:	7dfb      	ldrb	r3, [r7, #23]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d002      	beq.n	8002526 <sendAndack+0x96>
			success_check = 1;
 8002520:	2301      	movs	r3, #1
 8002522:	77fb      	strb	r3, [r7, #31]
			break;
 8002524:	e007      	b.n	8002536 <sendAndack+0xa6>
	for (int i = 0; i < num_of_try; i++) {
 8002526:	69bb      	ldr	r3, [r7, #24]
 8002528:	3301      	adds	r3, #1
 800252a:	61bb      	str	r3, [r7, #24]
 800252c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002530:	69ba      	ldr	r2, [r7, #24]
 8002532:	429a      	cmp	r2, r3
 8002534:	dbbb      	blt.n	80024ae <sendAndack+0x1e>
		}
	}
	return success_check;
 8002536:	7ffb      	ldrb	r3, [r7, #31]
}
 8002538:	4618      	mov	r0, r3
 800253a:	3720      	adds	r7, #32
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}
 8002540:	2000017c 	.word	0x2000017c
 8002544:	080042cc 	.word	0x080042cc
 8002548:	08004e98 	.word	0x08004e98
 800254c:	20000a10 	.word	0x20000a10
 8002550:	080042ec 	.word	0x080042ec

08002554 <startReceiving>:

/**
 * It starts the receiving process or make program to wait for data from PC
 */
static void startReceiving() {
 8002554:	b580      	push	{r7, lr}
 8002556:	af00      	add	r7, sp, #0
	rec_track = START;
 8002558:	4b09      	ldr	r3, [pc, #36]	; (8002580 <startReceiving+0x2c>)
 800255a:	2200      	movs	r2, #0
 800255c:	701a      	strb	r2, [r3, #0]
	status = RECEIVING;
 800255e:	4b09      	ldr	r3, [pc, #36]	; (8002584 <startReceiving+0x30>)
 8002560:	2201      	movs	r2, #1
 8002562:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_DMA(huart_adapter, rec_sync_bytes, 1);
 8002564:	4b08      	ldr	r3, [pc, #32]	; (8002588 <startReceiving+0x34>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	2201      	movs	r2, #1
 800256a:	4908      	ldr	r1, [pc, #32]	; (800258c <startReceiving+0x38>)
 800256c:	4618      	mov	r0, r3
 800256e:	f7ff fc29 	bl	8001dc4 <HAL_UART_Receive_DMA>
	console(CONSOLE_INFO, __func__,
 8002572:	4a07      	ldr	r2, [pc, #28]	; (8002590 <startReceiving+0x3c>)
 8002574:	4907      	ldr	r1, [pc, #28]	; (8002594 <startReceiving+0x40>)
 8002576:	2001      	movs	r0, #1
 8002578:	f7ff ff4c 	bl	8002414 <console>
			"Waiting for start byte 'S' to be received\n");
}
 800257c:	bf00      	nop
 800257e:	bd80      	pop	{r7, pc}
 8002580:	20000992 	.word	0x20000992
 8002584:	20000009 	.word	0x20000009
 8002588:	2000017c 	.word	0x2000017c
 800258c:	20000988 	.word	0x20000988
 8002590:	08004308 	.word	0x08004308
 8002594:	08004ea4 	.word	0x08004ea4

08002598 <receiveThread>:

/**
 * This is receive thread called each time there is a receive available
 */
static void receiveThread() {
 8002598:	b580      	push	{r7, lr}
 800259a:	b086      	sub	sp, #24
 800259c:	af00      	add	r7, sp, #0
	is_in_receiveThread = 1;
 800259e:	4ba0      	ldr	r3, [pc, #640]	; (8002820 <receiveThread+0x288>)
 80025a0:	2201      	movs	r2, #1
 80025a2:	701a      	strb	r2, [r3, #0]
	uint8_t is_failed = 0;
 80025a4:	2300      	movs	r3, #0
 80025a6:	75fb      	strb	r3, [r7, #23]
	if (rec_track == START) {
 80025a8:	4b9e      	ldr	r3, [pc, #632]	; (8002824 <receiveThread+0x28c>)
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d142      	bne.n	8002636 <receiveThread+0x9e>
		if (rec_sync_bytes[0] == 'S') {
 80025b0:	4b9d      	ldr	r3, [pc, #628]	; (8002828 <receiveThread+0x290>)
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	2b53      	cmp	r3, #83	; 0x53
 80025b6:	d13b      	bne.n	8002630 <receiveThread+0x98>
			rec_sync_bytes[0] = 'O';
 80025b8:	4b9b      	ldr	r3, [pc, #620]	; (8002828 <receiveThread+0x290>)
 80025ba:	224f      	movs	r2, #79	; 0x4f
 80025bc:	701a      	strb	r2, [r3, #0]
			rec_track++;
 80025be:	4b99      	ldr	r3, [pc, #612]	; (8002824 <receiveThread+0x28c>)
 80025c0:	781b      	ldrb	r3, [r3, #0]
 80025c2:	3301      	adds	r3, #1
 80025c4:	b2da      	uxtb	r2, r3
 80025c6:	4b97      	ldr	r3, [pc, #604]	; (8002824 <receiveThread+0x28c>)
 80025c8:	701a      	strb	r2, [r3, #0]
			status = RECEIVING;
 80025ca:	4b98      	ldr	r3, [pc, #608]	; (800282c <receiveThread+0x294>)
 80025cc:	2201      	movs	r2, #1
 80025ce:	701a      	strb	r2, [r3, #0]
			console(CONSOLE_INFO, __func__, "Start byte %c received\n",
					(char) rec_sync_bytes[0]);
 80025d0:	4b95      	ldr	r3, [pc, #596]	; (8002828 <receiveThread+0x290>)
 80025d2:	781b      	ldrb	r3, [r3, #0]
			console(CONSOLE_INFO, __func__, "Start byte %c received\n",
 80025d4:	4a96      	ldr	r2, [pc, #600]	; (8002830 <receiveThread+0x298>)
 80025d6:	4997      	ldr	r1, [pc, #604]	; (8002834 <receiveThread+0x29c>)
 80025d8:	2001      	movs	r0, #1
 80025da:	f7ff ff1b 	bl	8002414 <console>
			if (HAL_UART_Transmit(huart_adapter, rec_sync_bytes, 1,
 80025de:	4b96      	ldr	r3, [pc, #600]	; (8002838 <receiveThread+0x2a0>)
 80025e0:	6818      	ldr	r0, [r3, #0]
 80025e2:	f242 7310 	movw	r3, #10000	; 0x2710
 80025e6:	2201      	movs	r2, #1
 80025e8:	498f      	ldr	r1, [pc, #572]	; (8002828 <receiveThread+0x290>)
 80025ea:	f7ff fab7 	bl	8001b5c <HAL_UART_Transmit>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d009      	beq.n	8002608 <receiveThread+0x70>
					RECEIVE_TRANSMIT_TIMEOUT) != HAL_OK) {
				console(CONSOLE_ERROR, __func__, "Start ack %c send failed\n",
						(char) rec_sync_bytes[0]);
 80025f4:	4b8c      	ldr	r3, [pc, #560]	; (8002828 <receiveThread+0x290>)
 80025f6:	781b      	ldrb	r3, [r3, #0]
				console(CONSOLE_ERROR, __func__, "Start ack %c send failed\n",
 80025f8:	4a90      	ldr	r2, [pc, #576]	; (800283c <receiveThread+0x2a4>)
 80025fa:	498e      	ldr	r1, [pc, #568]	; (8002834 <receiveThread+0x29c>)
 80025fc:	2000      	movs	r0, #0
 80025fe:	f7ff ff09 	bl	8002414 <console>
				is_failed = 1;
 8002602:	2301      	movs	r3, #1
 8002604:	75fb      	strb	r3, [r7, #23]
 8002606:	e16f      	b.n	80028e8 <receiveThread+0x350>
			} else {
				console(CONSOLE_INFO, __func__, "Start ack %c sent\n",
						(char) rec_sync_bytes[0]);
 8002608:	4b87      	ldr	r3, [pc, #540]	; (8002828 <receiveThread+0x290>)
 800260a:	781b      	ldrb	r3, [r3, #0]
				console(CONSOLE_INFO, __func__, "Start ack %c sent\n",
 800260c:	4a8c      	ldr	r2, [pc, #560]	; (8002840 <receiveThread+0x2a8>)
 800260e:	4989      	ldr	r1, [pc, #548]	; (8002834 <receiveThread+0x29c>)
 8002610:	2001      	movs	r0, #1
 8002612:	f7ff feff 	bl	8002414 <console>
				HAL_UART_Receive_DMA(huart_adapter, rec_id_bytes, 4);
 8002616:	4b88      	ldr	r3, [pc, #544]	; (8002838 <receiveThread+0x2a0>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	2204      	movs	r2, #4
 800261c:	4989      	ldr	r1, [pc, #548]	; (8002844 <receiveThread+0x2ac>)
 800261e:	4618      	mov	r0, r3
 8002620:	f7ff fbd0 	bl	8001dc4 <HAL_UART_Receive_DMA>
				console(CONSOLE_INFO, __func__,
 8002624:	4a88      	ldr	r2, [pc, #544]	; (8002848 <receiveThread+0x2b0>)
 8002626:	4983      	ldr	r1, [pc, #524]	; (8002834 <receiveThread+0x29c>)
 8002628:	2001      	movs	r0, #1
 800262a:	f7ff fef3 	bl	8002414 <console>
 800262e:	e15b      	b.n	80028e8 <receiveThread+0x350>
						"Waiting for CAN ID to be received \n");
			}
		} else {
			startReceiving();
 8002630:	f7ff ff90 	bl	8002554 <startReceiving>
 8002634:	e158      	b.n	80028e8 <receiveThread+0x350>
		}
	} else if (rec_track == ID) {
 8002636:	4b7b      	ldr	r3, [pc, #492]	; (8002824 <receiveThread+0x28c>)
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	2b01      	cmp	r3, #1
 800263c:	d135      	bne.n	80026aa <receiveThread+0x112>
		rec_track++;
 800263e:	4b79      	ldr	r3, [pc, #484]	; (8002824 <receiveThread+0x28c>)
 8002640:	781b      	ldrb	r3, [r3, #0]
 8002642:	3301      	adds	r3, #1
 8002644:	b2da      	uxtb	r2, r3
 8002646:	4b77      	ldr	r3, [pc, #476]	; (8002824 <receiveThread+0x28c>)
 8002648:	701a      	strb	r2, [r3, #0]
		console(CONSOLE_INFO, __func__, "CAN ID received :: 0x%x \n",
				*(uint8_t*) rec_id_bytes);
 800264a:	4b7e      	ldr	r3, [pc, #504]	; (8002844 <receiveThread+0x2ac>)
 800264c:	781b      	ldrb	r3, [r3, #0]
		console(CONSOLE_INFO, __func__, "CAN ID received :: 0x%x \n",
 800264e:	4a7f      	ldr	r2, [pc, #508]	; (800284c <receiveThread+0x2b4>)
 8002650:	4978      	ldr	r1, [pc, #480]	; (8002834 <receiveThread+0x29c>)
 8002652:	2001      	movs	r0, #1
 8002654:	f7ff fede 	bl	8002414 <console>
		if (HAL_UART_Transmit(huart_adapter, rec_id_bytes, 4,
 8002658:	4b77      	ldr	r3, [pc, #476]	; (8002838 <receiveThread+0x2a0>)
 800265a:	6818      	ldr	r0, [r3, #0]
 800265c:	f242 7310 	movw	r3, #10000	; 0x2710
 8002660:	2204      	movs	r2, #4
 8002662:	4978      	ldr	r1, [pc, #480]	; (8002844 <receiveThread+0x2ac>)
 8002664:	f7ff fa7a 	bl	8001b5c <HAL_UART_Transmit>
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d009      	beq.n	8002682 <receiveThread+0xea>
				RECEIVE_TRANSMIT_TIMEOUT) != HAL_OK) {
			console(CONSOLE_ERROR, __func__, "CAN ID ack 0x%x sending failed\n",
					*(uint8_t*) rec_id_bytes);
 800266e:	4b75      	ldr	r3, [pc, #468]	; (8002844 <receiveThread+0x2ac>)
 8002670:	781b      	ldrb	r3, [r3, #0]
			console(CONSOLE_ERROR, __func__, "CAN ID ack 0x%x sending failed\n",
 8002672:	4a77      	ldr	r2, [pc, #476]	; (8002850 <receiveThread+0x2b8>)
 8002674:	496f      	ldr	r1, [pc, #444]	; (8002834 <receiveThread+0x29c>)
 8002676:	2000      	movs	r0, #0
 8002678:	f7ff fecc 	bl	8002414 <console>

			is_failed = 1;
 800267c:	2301      	movs	r3, #1
 800267e:	75fb      	strb	r3, [r7, #23]
 8002680:	e132      	b.n	80028e8 <receiveThread+0x350>
		} else {
			console(CONSOLE_INFO, __func__, "CAN ID ack 0x%x sent\n",
					*(uint8_t*) rec_id_bytes);
 8002682:	4b70      	ldr	r3, [pc, #448]	; (8002844 <receiveThread+0x2ac>)
 8002684:	781b      	ldrb	r3, [r3, #0]
			console(CONSOLE_INFO, __func__, "CAN ID ack 0x%x sent\n",
 8002686:	4a73      	ldr	r2, [pc, #460]	; (8002854 <receiveThread+0x2bc>)
 8002688:	496a      	ldr	r1, [pc, #424]	; (8002834 <receiveThread+0x29c>)
 800268a:	2001      	movs	r0, #1
 800268c:	f7ff fec2 	bl	8002414 <console>
			HAL_UART_Receive_DMA(huart_adapter, rec_len_bytes, 2);
 8002690:	4b69      	ldr	r3, [pc, #420]	; (8002838 <receiveThread+0x2a0>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	2202      	movs	r2, #2
 8002696:	4970      	ldr	r1, [pc, #448]	; (8002858 <receiveThread+0x2c0>)
 8002698:	4618      	mov	r0, r3
 800269a:	f7ff fb93 	bl	8001dc4 <HAL_UART_Receive_DMA>
			console(CONSOLE_INFO, __func__,
 800269e:	4a6f      	ldr	r2, [pc, #444]	; (800285c <receiveThread+0x2c4>)
 80026a0:	4964      	ldr	r1, [pc, #400]	; (8002834 <receiveThread+0x29c>)
 80026a2:	2001      	movs	r0, #1
 80026a4:	f7ff feb6 	bl	8002414 <console>
 80026a8:	e11e      	b.n	80028e8 <receiveThread+0x350>
					"Waiting for length to be received\n");
		}
	} else if (rec_track == LEN) {
 80026aa:	4b5e      	ldr	r3, [pc, #376]	; (8002824 <receiveThread+0x28c>)
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	2b02      	cmp	r3, #2
 80026b0:	d137      	bne.n	8002722 <receiveThread+0x18a>
		console(CONSOLE_INFO, __func__, "Start byte %c received\n",
				*(uint8_t*) rec_len_bytes);
 80026b2:	4b69      	ldr	r3, [pc, #420]	; (8002858 <receiveThread+0x2c0>)
 80026b4:	781b      	ldrb	r3, [r3, #0]
		console(CONSOLE_INFO, __func__, "Start byte %c received\n",
 80026b6:	4a5e      	ldr	r2, [pc, #376]	; (8002830 <receiveThread+0x298>)
 80026b8:	495e      	ldr	r1, [pc, #376]	; (8002834 <receiveThread+0x29c>)
 80026ba:	2001      	movs	r0, #1
 80026bc:	f7ff feaa 	bl	8002414 <console>
		rec_track++;
 80026c0:	4b58      	ldr	r3, [pc, #352]	; (8002824 <receiveThread+0x28c>)
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	3301      	adds	r3, #1
 80026c6:	b2da      	uxtb	r2, r3
 80026c8:	4b56      	ldr	r3, [pc, #344]	; (8002824 <receiveThread+0x28c>)
 80026ca:	701a      	strb	r2, [r3, #0]
		if (HAL_UART_Transmit(huart_adapter, rec_len_bytes, 2,
 80026cc:	4b5a      	ldr	r3, [pc, #360]	; (8002838 <receiveThread+0x2a0>)
 80026ce:	6818      	ldr	r0, [r3, #0]
 80026d0:	f242 7310 	movw	r3, #10000	; 0x2710
 80026d4:	2202      	movs	r2, #2
 80026d6:	4960      	ldr	r1, [pc, #384]	; (8002858 <receiveThread+0x2c0>)
 80026d8:	f7ff fa40 	bl	8001b5c <HAL_UART_Transmit>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d007      	beq.n	80026f2 <receiveThread+0x15a>
				RECEIVE_TRANSMIT_TIMEOUT) != HAL_OK) {
			console(CONSOLE_INFO, __func__,
 80026e2:	4a5f      	ldr	r2, [pc, #380]	; (8002860 <receiveThread+0x2c8>)
 80026e4:	4953      	ldr	r1, [pc, #332]	; (8002834 <receiveThread+0x29c>)
 80026e6:	2001      	movs	r0, #1
 80026e8:	f7ff fe94 	bl	8002414 <console>
					"Length ack transmission failed \n");
			is_failed = 1;
 80026ec:	2301      	movs	r3, #1
 80026ee:	75fb      	strb	r3, [r7, #23]
 80026f0:	e0fa      	b.n	80028e8 <receiveThread+0x350>
		} else {
			console(CONSOLE_INFO, __func__, "Length ack transmitted : %d \n",
					*((uint16_t*) rec_len_bytes));
 80026f2:	4b59      	ldr	r3, [pc, #356]	; (8002858 <receiveThread+0x2c0>)
 80026f4:	881b      	ldrh	r3, [r3, #0]
			console(CONSOLE_INFO, __func__, "Length ack transmitted : %d \n",
 80026f6:	4a5b      	ldr	r2, [pc, #364]	; (8002864 <receiveThread+0x2cc>)
 80026f8:	494e      	ldr	r1, [pc, #312]	; (8002834 <receiveThread+0x29c>)
 80026fa:	2001      	movs	r0, #1
 80026fc:	f7ff fe8a 	bl	8002414 <console>
			HAL_UART_Receive_DMA(huart_adapter, rec_data,
 8002700:	4b4d      	ldr	r3, [pc, #308]	; (8002838 <receiveThread+0x2a0>)
 8002702:	681b      	ldr	r3, [r3, #0]
					*((uint16_t*) rec_len_bytes));
 8002704:	4a54      	ldr	r2, [pc, #336]	; (8002858 <receiveThread+0x2c0>)
			HAL_UART_Receive_DMA(huart_adapter, rec_data,
 8002706:	8812      	ldrh	r2, [r2, #0]
 8002708:	4957      	ldr	r1, [pc, #348]	; (8002868 <receiveThread+0x2d0>)
 800270a:	4618      	mov	r0, r3
 800270c:	f7ff fb5a 	bl	8001dc4 <HAL_UART_Receive_DMA>
			receiveThreadDebug("LEN");
 8002710:	4856      	ldr	r0, [pc, #344]	; (800286c <receiveThread+0x2d4>)
 8002712:	f7ff fe75 	bl	8002400 <receiveThreadDebug>
			console(CONSOLE_INFO, __func__,
 8002716:	4a56      	ldr	r2, [pc, #344]	; (8002870 <receiveThread+0x2d8>)
 8002718:	4946      	ldr	r1, [pc, #280]	; (8002834 <receiveThread+0x29c>)
 800271a:	2001      	movs	r0, #1
 800271c:	f7ff fe7a 	bl	8002414 <console>
 8002720:	e0e2      	b.n	80028e8 <receiveThread+0x350>
					"Waiting for data to be received\n");
		}

	} else if (rec_track == DATA) {
 8002722:	4b40      	ldr	r3, [pc, #256]	; (8002824 <receiveThread+0x28c>)
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	2b03      	cmp	r3, #3
 8002728:	d15a      	bne.n	80027e0 <receiveThread+0x248>
		uint32_t len = *((uint16_t*) rec_len_bytes);
 800272a:	4b4b      	ldr	r3, [pc, #300]	; (8002858 <receiveThread+0x2c0>)
 800272c:	881b      	ldrh	r3, [r3, #0]
 800272e:	613b      	str	r3, [r7, #16]
		int loop_limit = len % 4;
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	f003 0303 	and.w	r3, r3, #3
 8002736:	60bb      	str	r3, [r7, #8]
		for (int i = 0; i < (4 - loop_limit) && loop_limit > 0; i++)
 8002738:	2300      	movs	r3, #0
 800273a:	60fb      	str	r3, [r7, #12]
 800273c:	e008      	b.n	8002750 <receiveThread+0x1b8>
			rec_data[len++] = 0x00;
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	1c5a      	adds	r2, r3, #1
 8002742:	613a      	str	r2, [r7, #16]
 8002744:	4a48      	ldr	r2, [pc, #288]	; (8002868 <receiveThread+0x2d0>)
 8002746:	2100      	movs	r1, #0
 8002748:	54d1      	strb	r1, [r2, r3]
		for (int i = 0; i < (4 - loop_limit) && loop_limit > 0; i++)
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	3301      	adds	r3, #1
 800274e:	60fb      	str	r3, [r7, #12]
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	f1c3 0304 	rsb	r3, r3, #4
 8002756:	68fa      	ldr	r2, [r7, #12]
 8002758:	429a      	cmp	r2, r3
 800275a:	da02      	bge.n	8002762 <receiveThread+0x1ca>
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	2b00      	cmp	r3, #0
 8002760:	dced      	bgt.n	800273e <receiveThread+0x1a6>
		uint32_t crc = HAL_CRC_Calculate(hcrc_adapter, (uint32_t*) rec_data,
 8002762:	4b44      	ldr	r3, [pc, #272]	; (8002874 <receiveThread+0x2dc>)
 8002764:	6818      	ldr	r0, [r3, #0]
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	089b      	lsrs	r3, r3, #2
 800276a:	461a      	mov	r2, r3
 800276c:	493e      	ldr	r1, [pc, #248]	; (8002868 <receiveThread+0x2d0>)
 800276e:	f7fe f95a 	bl	8000a26 <HAL_CRC_Calculate>
 8002772:	4603      	mov	r3, r0
 8002774:	607b      	str	r3, [r7, #4]
				len / 4);
		rec_track++;
 8002776:	4b2b      	ldr	r3, [pc, #172]	; (8002824 <receiveThread+0x28c>)
 8002778:	781b      	ldrb	r3, [r3, #0]
 800277a:	3301      	adds	r3, #1
 800277c:	b2da      	uxtb	r2, r3
 800277e:	4b29      	ldr	r3, [pc, #164]	; (8002824 <receiveThread+0x28c>)
 8002780:	701a      	strb	r2, [r3, #0]
		console(CONSOLE_INFO, __func__, "Data received\n");
 8002782:	4a3d      	ldr	r2, [pc, #244]	; (8002878 <receiveThread+0x2e0>)
 8002784:	492b      	ldr	r1, [pc, #172]	; (8002834 <receiveThread+0x29c>)
 8002786:	2001      	movs	r0, #1
 8002788:	f7ff fe44 	bl	8002414 <console>
		if (HAL_UART_Transmit(huart_adapter, (uint8_t*) &crc, 4,
 800278c:	4b2a      	ldr	r3, [pc, #168]	; (8002838 <receiveThread+0x2a0>)
 800278e:	6818      	ldr	r0, [r3, #0]
 8002790:	f242 7310 	movw	r3, #10000	; 0x2710
 8002794:	1d39      	adds	r1, r7, #4
 8002796:	2204      	movs	r2, #4
 8002798:	f7ff f9e0 	bl	8001b5c <HAL_UART_Transmit>
 800279c:	4603      	mov	r3, r0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d008      	beq.n	80027b4 <receiveThread+0x21c>
				RECEIVE_TRANSMIT_TIMEOUT) != HAL_OK) {
			console(CONSOLE_ERROR, __func__,
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	4a35      	ldr	r2, [pc, #212]	; (800287c <receiveThread+0x2e4>)
 80027a6:	4923      	ldr	r1, [pc, #140]	; (8002834 <receiveThread+0x29c>)
 80027a8:	2000      	movs	r0, #0
 80027aa:	f7ff fe33 	bl	8002414 <console>
					"Data ack CRC %0x0x transmission failed \n", crc);
			is_failed = 1;
 80027ae:	2301      	movs	r3, #1
 80027b0:	75fb      	strb	r3, [r7, #23]
 80027b2:	e099      	b.n	80028e8 <receiveThread+0x350>
		} else {
			console(CONSOLE_INFO, __func__, "Data ack CRC transmitted :  %d \n",
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	4a32      	ldr	r2, [pc, #200]	; (8002880 <receiveThread+0x2e8>)
 80027b8:	491e      	ldr	r1, [pc, #120]	; (8002834 <receiveThread+0x29c>)
 80027ba:	2001      	movs	r0, #1
 80027bc:	f7ff fe2a 	bl	8002414 <console>
					crc);
			HAL_UART_Receive_DMA(huart_adapter, rec_sync_bytes, 1);
 80027c0:	4b1d      	ldr	r3, [pc, #116]	; (8002838 <receiveThread+0x2a0>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	2201      	movs	r2, #1
 80027c6:	4918      	ldr	r1, [pc, #96]	; (8002828 <receiveThread+0x290>)
 80027c8:	4618      	mov	r0, r3
 80027ca:	f7ff fafb 	bl	8001dc4 <HAL_UART_Receive_DMA>
			console(CONSOLE_INFO, __func__, "Waiting for end byte received \n");
 80027ce:	4a2d      	ldr	r2, [pc, #180]	; (8002884 <receiveThread+0x2ec>)
 80027d0:	4918      	ldr	r1, [pc, #96]	; (8002834 <receiveThread+0x29c>)
 80027d2:	2001      	movs	r0, #1
 80027d4:	f7ff fe1e 	bl	8002414 <console>
			receiveThreadDebug("DATA");
 80027d8:	482b      	ldr	r0, [pc, #172]	; (8002888 <receiveThread+0x2f0>)
 80027da:	f7ff fe11 	bl	8002400 <receiveThreadDebug>
 80027de:	e083      	b.n	80028e8 <receiveThread+0x350>
		}
	} else if (rec_track == END) {
 80027e0:	4b10      	ldr	r3, [pc, #64]	; (8002824 <receiveThread+0x28c>)
 80027e2:	781b      	ldrb	r3, [r3, #0]
 80027e4:	2b04      	cmp	r3, #4
 80027e6:	d17f      	bne.n	80028e8 <receiveThread+0x350>
		console(CONSOLE_INFO, __func__, "End byte received : %c \n",
				(char) rec_sync_bytes[0]);
 80027e8:	4b0f      	ldr	r3, [pc, #60]	; (8002828 <receiveThread+0x290>)
 80027ea:	781b      	ldrb	r3, [r3, #0]
		console(CONSOLE_INFO, __func__, "End byte received : %c \n",
 80027ec:	4a27      	ldr	r2, [pc, #156]	; (800288c <receiveThread+0x2f4>)
 80027ee:	4911      	ldr	r1, [pc, #68]	; (8002834 <receiveThread+0x29c>)
 80027f0:	2001      	movs	r0, #1
 80027f2:	f7ff fe0f 	bl	8002414 <console>
		received_id = *((uint32_t*) rec_id_bytes);
 80027f6:	4b13      	ldr	r3, [pc, #76]	; (8002844 <receiveThread+0x2ac>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a25      	ldr	r2, [pc, #148]	; (8002890 <receiveThread+0x2f8>)
 80027fc:	6013      	str	r3, [r2, #0]
		received_len = *((uint16_t*) rec_len_bytes);
 80027fe:	4b16      	ldr	r3, [pc, #88]	; (8002858 <receiveThread+0x2c0>)
 8002800:	881a      	ldrh	r2, [r3, #0]
 8002802:	4b24      	ldr	r3, [pc, #144]	; (8002894 <receiveThread+0x2fc>)
 8002804:	801a      	strh	r2, [r3, #0]
		if (rec_sync_bytes[0] == '\0') {
 8002806:	4b08      	ldr	r3, [pc, #32]	; (8002828 <receiveThread+0x290>)
 8002808:	781b      	ldrb	r3, [r3, #0]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d148      	bne.n	80028a0 <receiveThread+0x308>
			received = 1;
 800280e:	4b22      	ldr	r3, [pc, #136]	; (8002898 <receiveThread+0x300>)
 8002810:	2201      	movs	r2, #1
 8002812:	701a      	strb	r2, [r3, #0]
			console(CONSOLE_INFO, __func__,
 8002814:	4a21      	ldr	r2, [pc, #132]	; (800289c <receiveThread+0x304>)
 8002816:	4907      	ldr	r1, [pc, #28]	; (8002834 <receiveThread+0x29c>)
 8002818:	2001      	movs	r0, #1
 800281a:	f7ff fdfb 	bl	8002414 <console>
 800281e:	e044      	b.n	80028aa <receiveThread+0x312>
 8002820:	200009a2 	.word	0x200009a2
 8002824:	20000992 	.word	0x20000992
 8002828:	20000988 	.word	0x20000988
 800282c:	20000009 	.word	0x20000009
 8002830:	08004334 	.word	0x08004334
 8002834:	08004eb4 	.word	0x08004eb4
 8002838:	2000017c 	.word	0x2000017c
 800283c:	0800434c 	.word	0x0800434c
 8002840:	08004368 	.word	0x08004368
 8002844:	2000098c 	.word	0x2000098c
 8002848:	0800437c 	.word	0x0800437c
 800284c:	080043a0 	.word	0x080043a0
 8002850:	080043bc 	.word	0x080043bc
 8002854:	080043dc 	.word	0x080043dc
 8002858:	20000990 	.word	0x20000990
 800285c:	080043f4 	.word	0x080043f4
 8002860:	08004418 	.word	0x08004418
 8002864:	0800443c 	.word	0x0800443c
 8002868:	20000188 	.word	0x20000188
 800286c:	0800445c 	.word	0x0800445c
 8002870:	08004460 	.word	0x08004460
 8002874:	20000180 	.word	0x20000180
 8002878:	08004484 	.word	0x08004484
 800287c:	08004494 	.word	0x08004494
 8002880:	080044c0 	.word	0x080044c0
 8002884:	080044e4 	.word	0x080044e4
 8002888:	08004504 	.word	0x08004504
 800288c:	0800450c 	.word	0x0800450c
 8002890:	2000099c 	.word	0x2000099c
 8002894:	200009a0 	.word	0x200009a0
 8002898:	20000998 	.word	0x20000998
 800289c:	08004528 	.word	0x08004528
					"Data received successfully(CRC matched)\n");
		} else {
			console(CONSOLE_ERROR, __func__,
 80028a0:	4a1c      	ldr	r2, [pc, #112]	; (8002914 <receiveThread+0x37c>)
 80028a2:	491d      	ldr	r1, [pc, #116]	; (8002918 <receiveThread+0x380>)
 80028a4:	2000      	movs	r0, #0
 80028a6:	f7ff fdb5 	bl	8002414 <console>
					"Data end ack receive failed(CRC didn't match)\n");
		}
		rec_sync_bytes[0] = 'O';
 80028aa:	4b1c      	ldr	r3, [pc, #112]	; (800291c <receiveThread+0x384>)
 80028ac:	224f      	movs	r2, #79	; 0x4f
 80028ae:	701a      	strb	r2, [r3, #0]
		if (HAL_UART_Transmit(huart_adapter, rec_sync_bytes, 1,
 80028b0:	4b1b      	ldr	r3, [pc, #108]	; (8002920 <receiveThread+0x388>)
 80028b2:	6818      	ldr	r0, [r3, #0]
 80028b4:	f242 7310 	movw	r3, #10000	; 0x2710
 80028b8:	2201      	movs	r2, #1
 80028ba:	4918      	ldr	r1, [pc, #96]	; (800291c <receiveThread+0x384>)
 80028bc:	f7ff f94e 	bl	8001b5c <HAL_UART_Transmit>
 80028c0:	4603      	mov	r3, r0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d007      	beq.n	80028d6 <receiveThread+0x33e>
				RECEIVE_TRANSMIT_TIMEOUT) != HAL_OK) {

			console(CONSOLE_INFO, __func__, "End ack transmission failed\n");
 80028c6:	4a17      	ldr	r2, [pc, #92]	; (8002924 <receiveThread+0x38c>)
 80028c8:	4913      	ldr	r1, [pc, #76]	; (8002918 <receiveThread+0x380>)
 80028ca:	2001      	movs	r0, #1
 80028cc:	f7ff fda2 	bl	8002414 <console>
			is_failed = 1;
 80028d0:	2301      	movs	r3, #1
 80028d2:	75fb      	strb	r3, [r7, #23]
 80028d4:	e008      	b.n	80028e8 <receiveThread+0x350>
		} else {
			console(CONSOLE_INFO, __func__, "End ack transmitted : %c\n",
					(char) rec_sync_bytes[0]);
 80028d6:	4b11      	ldr	r3, [pc, #68]	; (800291c <receiveThread+0x384>)
 80028d8:	781b      	ldrb	r3, [r3, #0]
			console(CONSOLE_INFO, __func__, "End ack transmitted : %c\n",
 80028da:	4a13      	ldr	r2, [pc, #76]	; (8002928 <receiveThread+0x390>)
 80028dc:	490e      	ldr	r1, [pc, #56]	; (8002918 <receiveThread+0x380>)
 80028de:	2001      	movs	r0, #1
 80028e0:	f7ff fd98 	bl	8002414 <console>
			startReceiving();
 80028e4:	f7ff fe36 	bl	8002554 <startReceiving>
		}
	}

	if (is_failed) {
 80028e8:	7dfb      	ldrb	r3, [r7, #23]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d006      	beq.n	80028fc <receiveThread+0x364>
		console(CONSOLE_ERROR, __func__,
 80028ee:	4a0f      	ldr	r2, [pc, #60]	; (800292c <receiveThread+0x394>)
 80028f0:	4909      	ldr	r1, [pc, #36]	; (8002918 <receiveThread+0x380>)
 80028f2:	2000      	movs	r0, #0
 80028f4:	f7ff fd8e 	bl	8002414 <console>
				"receiveThread process failed and process is restarted\n");
		startReceiving();
 80028f8:	f7ff fe2c 	bl	8002554 <startReceiving>
	}
	time_elapse = HAL_GetTick();
 80028fc:	f7fd ff60 	bl	80007c0 <HAL_GetTick>
 8002900:	4603      	mov	r3, r0
 8002902:	4a0b      	ldr	r2, [pc, #44]	; (8002930 <receiveThread+0x398>)
 8002904:	6013      	str	r3, [r2, #0]
	is_in_receiveThread = 0;
 8002906:	4b0b      	ldr	r3, [pc, #44]	; (8002934 <receiveThread+0x39c>)
 8002908:	2200      	movs	r2, #0
 800290a:	701a      	strb	r2, [r3, #0]
}
 800290c:	bf00      	nop
 800290e:	3718      	adds	r7, #24
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}
 8002914:	08004554 	.word	0x08004554
 8002918:	08004eb4 	.word	0x08004eb4
 800291c:	20000988 	.word	0x20000988
 8002920:	2000017c 	.word	0x2000017c
 8002924:	08004584 	.word	0x08004584
 8002928:	080045a4 	.word	0x080045a4
 800292c:	080045c0 	.word	0x080045c0
 8002930:	20000994 	.word	0x20000994
 8002934:	200009a2 	.word	0x200009a2

08002938 <startSending>:

/**
 * It start the sending process or stop receiving process
 */
static void startSending() {
 8002938:	b580      	push	{r7, lr}
 800293a:	af00      	add	r7, sp, #0
	status = SENDING;
 800293c:	4b04      	ldr	r3, [pc, #16]	; (8002950 <startSending+0x18>)
 800293e:	2200      	movs	r2, #0
 8002940:	701a      	strb	r2, [r3, #0]
	HAL_UART_DMAStop(huart_adapter);
 8002942:	4b04      	ldr	r3, [pc, #16]	; (8002954 <startSending+0x1c>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4618      	mov	r0, r3
 8002948:	f7ff fa6c 	bl	8001e24 <HAL_UART_DMAStop>
}
 800294c:	bf00      	nop
 800294e:	bd80      	pop	{r7, pc}
 8002950:	20000009 	.word	0x20000009
 8002954:	2000017c 	.word	0x2000017c

08002958 <sendThread>:
 *@param bytes	: Bytes to be sent
 *@param len 	: length of bytes
 *@return       : 1 for successs
 *				: 0 for failed
 */
static uint8_t sendThread(uint32_t id, uint16_t len) {
 8002958:	b580      	push	{r7, lr}
 800295a:	b08c      	sub	sp, #48	; 0x30
 800295c:	af02      	add	r7, sp, #8
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	460b      	mov	r3, r1
 8002962:	807b      	strh	r3, [r7, #2]
	startSending();
 8002964:	f7ff ffe8 	bl	8002938 <startSending>
	uint32_t timeout = TRANSMIT_TIMEOUT;
 8002968:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800296c:	61fb      	str	r3, [r7, #28]
	uint8_t num_try = 5;
 800296e:	2305      	movs	r3, #5
 8002970:	76fb      	strb	r3, [r7, #27]

	send_sync_bytes[0] = 'S';
 8002972:	4b76      	ldr	r3, [pc, #472]	; (8002b4c <sendThread+0x1f4>)
 8002974:	2253      	movs	r2, #83	; 0x53
 8002976:	701a      	strb	r2, [r3, #0]
	send_sync_ack[0] = 'O';
 8002978:	4b75      	ldr	r3, [pc, #468]	; (8002b50 <sendThread+0x1f8>)
 800297a:	224f      	movs	r2, #79	; 0x4f
 800297c:	701a      	strb	r2, [r3, #0]

	if (!sendAndack(send_sync_bytes, 1, send_sync_ack, 1, timeout, num_try)) {
 800297e:	7efb      	ldrb	r3, [r7, #27]
 8002980:	9301      	str	r3, [sp, #4]
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	9300      	str	r3, [sp, #0]
 8002986:	2301      	movs	r3, #1
 8002988:	4a71      	ldr	r2, [pc, #452]	; (8002b50 <sendThread+0x1f8>)
 800298a:	2101      	movs	r1, #1
 800298c:	486f      	ldr	r0, [pc, #444]	; (8002b4c <sendThread+0x1f4>)
 800298e:	f7ff fd7f 	bl	8002490 <sendAndack>
 8002992:	4603      	mov	r3, r0
 8002994:	2b00      	cmp	r3, #0
 8002996:	d10d      	bne.n	80029b4 <sendThread+0x5c>
		console(CONSOLE_ERROR, __func__,
				"A2P Start ack %c sending and %c ack receive error\n",
				(char) send_sync_bytes[0], (char) send_sync_ack[0]);
 8002998:	4b6c      	ldr	r3, [pc, #432]	; (8002b4c <sendThread+0x1f4>)
 800299a:	781b      	ldrb	r3, [r3, #0]
		console(CONSOLE_ERROR, __func__,
 800299c:	461a      	mov	r2, r3
				(char) send_sync_bytes[0], (char) send_sync_ack[0]);
 800299e:	4b6c      	ldr	r3, [pc, #432]	; (8002b50 <sendThread+0x1f8>)
 80029a0:	781b      	ldrb	r3, [r3, #0]
		console(CONSOLE_ERROR, __func__,
 80029a2:	9300      	str	r3, [sp, #0]
 80029a4:	4613      	mov	r3, r2
 80029a6:	4a6b      	ldr	r2, [pc, #428]	; (8002b54 <sendThread+0x1fc>)
 80029a8:	496b      	ldr	r1, [pc, #428]	; (8002b58 <sendThread+0x200>)
 80029aa:	2000      	movs	r0, #0
 80029ac:	f7ff fd32 	bl	8002414 <console>
		return 0;
 80029b0:	2300      	movs	r3, #0
 80029b2:	e0c6      	b.n	8002b42 <sendThread+0x1ea>
	}
	console(CONSOLE_INFO, __func__, "A2P Start send and receive ack %c & %c\n",
			(char) send_sync_bytes[0], (char) send_sync_ack[0]);
 80029b4:	4b65      	ldr	r3, [pc, #404]	; (8002b4c <sendThread+0x1f4>)
 80029b6:	781b      	ldrb	r3, [r3, #0]
	console(CONSOLE_INFO, __func__, "A2P Start send and receive ack %c & %c\n",
 80029b8:	461a      	mov	r2, r3
			(char) send_sync_bytes[0], (char) send_sync_ack[0]);
 80029ba:	4b65      	ldr	r3, [pc, #404]	; (8002b50 <sendThread+0x1f8>)
 80029bc:	781b      	ldrb	r3, [r3, #0]
	console(CONSOLE_INFO, __func__, "A2P Start send and receive ack %c & %c\n",
 80029be:	9300      	str	r3, [sp, #0]
 80029c0:	4613      	mov	r3, r2
 80029c2:	4a66      	ldr	r2, [pc, #408]	; (8002b5c <sendThread+0x204>)
 80029c4:	4964      	ldr	r1, [pc, #400]	; (8002b58 <sendThread+0x200>)
 80029c6:	2001      	movs	r0, #1
 80029c8:	f7ff fd24 	bl	8002414 <console>

	if (!sendAndack((uint8_t*) (&id), 4, (uint8_t*) (&id), 4, timeout,
 80029cc:	1d3a      	adds	r2, r7, #4
 80029ce:	1d38      	adds	r0, r7, #4
 80029d0:	7efb      	ldrb	r3, [r7, #27]
 80029d2:	9301      	str	r3, [sp, #4]
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	9300      	str	r3, [sp, #0]
 80029d8:	2304      	movs	r3, #4
 80029da:	2104      	movs	r1, #4
 80029dc:	f7ff fd58 	bl	8002490 <sendAndack>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d107      	bne.n	80029f6 <sendThread+0x9e>
			num_try)) {
		console(CONSOLE_ERROR, __func__,
 80029e6:	7efb      	ldrb	r3, [r7, #27]
 80029e8:	4a5d      	ldr	r2, [pc, #372]	; (8002b60 <sendThread+0x208>)
 80029ea:	495b      	ldr	r1, [pc, #364]	; (8002b58 <sendThread+0x200>)
 80029ec:	2000      	movs	r0, #0
 80029ee:	f7ff fd11 	bl	8002414 <console>
				"A2P Can ID send and ack error for %d number of try\n",
				num_try);
		return 0;
 80029f2:	2300      	movs	r3, #0
 80029f4:	e0a5      	b.n	8002b42 <sendThread+0x1ea>
	}
	console(CONSOLE_INFO, __func__,
 80029f6:	4a5b      	ldr	r2, [pc, #364]	; (8002b64 <sendThread+0x20c>)
 80029f8:	4957      	ldr	r1, [pc, #348]	; (8002b58 <sendThread+0x200>)
 80029fa:	2001      	movs	r0, #1
 80029fc:	f7ff fd0a 	bl	8002414 <console>
			"A2P CAN id send and id ack receive successful\n");

	if (!sendAndack((uint8_t*) (&len), 2, (uint8_t*) (&len), 2, timeout,
 8002a00:	1cba      	adds	r2, r7, #2
 8002a02:	1cb8      	adds	r0, r7, #2
 8002a04:	7efb      	ldrb	r3, [r7, #27]
 8002a06:	9301      	str	r3, [sp, #4]
 8002a08:	69fb      	ldr	r3, [r7, #28]
 8002a0a:	9300      	str	r3, [sp, #0]
 8002a0c:	2302      	movs	r3, #2
 8002a0e:	2102      	movs	r1, #2
 8002a10:	f7ff fd3e 	bl	8002490 <sendAndack>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d10b      	bne.n	8002a32 <sendThread+0xda>
			num_try)) {
		console(CONSOLE_ERROR, __func__,
 8002a1a:	887b      	ldrh	r3, [r7, #2]
 8002a1c:	461a      	mov	r2, r3
 8002a1e:	887b      	ldrh	r3, [r7, #2]
 8002a20:	9300      	str	r3, [sp, #0]
 8002a22:	4613      	mov	r3, r2
 8002a24:	4a50      	ldr	r2, [pc, #320]	; (8002b68 <sendThread+0x210>)
 8002a26:	494c      	ldr	r1, [pc, #304]	; (8002b58 <sendThread+0x200>)
 8002a28:	2000      	movs	r0, #0
 8002a2a:	f7ff fcf3 	bl	8002414 <console>
				"A2P Length of data %d send and ack %d receive error\n", len,
				len);
		return 0;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	e087      	b.n	8002b42 <sendThread+0x1ea>
	}
	console(CONSOLE_INFO, __func__,
 8002a32:	887b      	ldrh	r3, [r7, #2]
 8002a34:	461a      	mov	r2, r3
			"A2P Length of data %d send and ack %c receive success\n", len,
			(char) send_sync_ack[0]);
 8002a36:	4b46      	ldr	r3, [pc, #280]	; (8002b50 <sendThread+0x1f8>)
 8002a38:	781b      	ldrb	r3, [r3, #0]
	console(CONSOLE_INFO, __func__,
 8002a3a:	9300      	str	r3, [sp, #0]
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	4a4b      	ldr	r2, [pc, #300]	; (8002b6c <sendThread+0x214>)
 8002a40:	4945      	ldr	r1, [pc, #276]	; (8002b58 <sendThread+0x200>)
 8002a42:	2001      	movs	r0, #1
 8002a44:	f7ff fce6 	bl	8002414 <console>

	uint32_t new_len = len;
 8002a48:	887b      	ldrh	r3, [r7, #2]
 8002a4a:	627b      	str	r3, [r7, #36]	; 0x24
	int loop_limit = new_len % 4;
 8002a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a4e:	f003 0303 	and.w	r3, r3, #3
 8002a52:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < (4 - loop_limit) && loop_limit > 0; i++)
 8002a54:	2300      	movs	r3, #0
 8002a56:	623b      	str	r3, [r7, #32]
 8002a58:	e008      	b.n	8002a6c <sendThread+0x114>
		send_data[new_len++] = 0x00;
 8002a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5c:	1c5a      	adds	r2, r3, #1
 8002a5e:	627a      	str	r2, [r7, #36]	; 0x24
 8002a60:	4a43      	ldr	r2, [pc, #268]	; (8002b70 <sendThread+0x218>)
 8002a62:	2100      	movs	r1, #0
 8002a64:	54d1      	strb	r1, [r2, r3]
	for (int i = 0; i < (4 - loop_limit) && loop_limit > 0; i++)
 8002a66:	6a3b      	ldr	r3, [r7, #32]
 8002a68:	3301      	adds	r3, #1
 8002a6a:	623b      	str	r3, [r7, #32]
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	f1c3 0304 	rsb	r3, r3, #4
 8002a72:	6a3a      	ldr	r2, [r7, #32]
 8002a74:	429a      	cmp	r2, r3
 8002a76:	da02      	bge.n	8002a7e <sendThread+0x126>
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	dced      	bgt.n	8002a5a <sendThread+0x102>
	uint32_t crc = HAL_CRC_Calculate(hcrc_adapter, (uint32_t*) send_data,
 8002a7e:	4b3d      	ldr	r3, [pc, #244]	; (8002b74 <sendThread+0x21c>)
 8002a80:	6818      	ldr	r0, [r3, #0]
 8002a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a84:	089b      	lsrs	r3, r3, #2
 8002a86:	461a      	mov	r2, r3
 8002a88:	4939      	ldr	r1, [pc, #228]	; (8002b70 <sendThread+0x218>)
 8002a8a:	f7fd ffcc 	bl	8000a26 <HAL_CRC_Calculate>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	60fb      	str	r3, [r7, #12]
			new_len / 4);
	uint8_t check = sendAndack(send_data, len, (uint8_t*) (&crc), 4, timeout,
 8002a92:	8879      	ldrh	r1, [r7, #2]
 8002a94:	f107 020c 	add.w	r2, r7, #12
 8002a98:	7efb      	ldrb	r3, [r7, #27]
 8002a9a:	9301      	str	r3, [sp, #4]
 8002a9c:	69fb      	ldr	r3, [r7, #28]
 8002a9e:	9300      	str	r3, [sp, #0]
 8002aa0:	2304      	movs	r3, #4
 8002aa2:	4833      	ldr	r0, [pc, #204]	; (8002b70 <sendThread+0x218>)
 8002aa4:	f7ff fcf4 	bl	8002490 <sendAndack>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	74fb      	strb	r3, [r7, #19]
			num_try);

	send_sync_bytes[0] = check ? '\0' : -1;
 8002aac:	7cfb      	ldrb	r3, [r7, #19]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d001      	beq.n	8002ab6 <sendThread+0x15e>
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	e000      	b.n	8002ab8 <sendThread+0x160>
 8002ab6:	22ff      	movs	r2, #255	; 0xff
 8002ab8:	4b24      	ldr	r3, [pc, #144]	; (8002b4c <sendThread+0x1f4>)
 8002aba:	701a      	strb	r2, [r3, #0]
	if (send_sync_bytes[0] == '\0') {
 8002abc:	4b23      	ldr	r3, [pc, #140]	; (8002b4c <sendThread+0x1f4>)
 8002abe:	781b      	ldrb	r3, [r3, #0]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d10a      	bne.n	8002ada <sendThread+0x182>
		console(CONSOLE_INFO, __func__,
 8002ac4:	887b      	ldrh	r3, [r7, #2]
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	9300      	str	r3, [sp, #0]
 8002acc:	4613      	mov	r3, r2
 8002ace:	4a2a      	ldr	r2, [pc, #168]	; (8002b78 <sendThread+0x220>)
 8002ad0:	4921      	ldr	r1, [pc, #132]	; (8002b58 <sendThread+0x200>)
 8002ad2:	2001      	movs	r0, #1
 8002ad4:	f7ff fc9e 	bl	8002414 <console>
 8002ad8:	e009      	b.n	8002aee <sendThread+0x196>
				"A2P Length of data %d send and ack 0x%0x receive success\n",
				len, crc);
	} else {
		console(CONSOLE_ERROR, __func__,
 8002ada:	887b      	ldrh	r3, [r7, #2]
 8002adc:	461a      	mov	r2, r3
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	9300      	str	r3, [sp, #0]
 8002ae2:	4613      	mov	r3, r2
 8002ae4:	4a25      	ldr	r2, [pc, #148]	; (8002b7c <sendThread+0x224>)
 8002ae6:	491c      	ldr	r1, [pc, #112]	; (8002b58 <sendThread+0x200>)
 8002ae8:	2000      	movs	r0, #0
 8002aea:	f7ff fc93 	bl	8002414 <console>
				"A2P Length of data %d send and ack 0x%0x receive error\n", len,
				crc);
	}

	if (!sendAndack(send_sync_bytes, 1, send_sync_ack, 1, timeout, num_try)) {
 8002aee:	7efb      	ldrb	r3, [r7, #27]
 8002af0:	9301      	str	r3, [sp, #4]
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	9300      	str	r3, [sp, #0]
 8002af6:	2301      	movs	r3, #1
 8002af8:	4a15      	ldr	r2, [pc, #84]	; (8002b50 <sendThread+0x1f8>)
 8002afa:	2101      	movs	r1, #1
 8002afc:	4813      	ldr	r0, [pc, #76]	; (8002b4c <sendThread+0x1f4>)
 8002afe:	f7ff fcc7 	bl	8002490 <sendAndack>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d10d      	bne.n	8002b24 <sendThread+0x1cc>
		console(CONSOLE_ERROR, __func__,
				"A2P Data end byte %c sending and ack %c receiving error\n",
				(char) send_sync_bytes[0], (char) send_sync_ack[0]);
 8002b08:	4b10      	ldr	r3, [pc, #64]	; (8002b4c <sendThread+0x1f4>)
 8002b0a:	781b      	ldrb	r3, [r3, #0]
		console(CONSOLE_ERROR, __func__,
 8002b0c:	461a      	mov	r2, r3
				(char) send_sync_bytes[0], (char) send_sync_ack[0]);
 8002b0e:	4b10      	ldr	r3, [pc, #64]	; (8002b50 <sendThread+0x1f8>)
 8002b10:	781b      	ldrb	r3, [r3, #0]
		console(CONSOLE_ERROR, __func__,
 8002b12:	9300      	str	r3, [sp, #0]
 8002b14:	4613      	mov	r3, r2
 8002b16:	4a1a      	ldr	r2, [pc, #104]	; (8002b80 <sendThread+0x228>)
 8002b18:	490f      	ldr	r1, [pc, #60]	; (8002b58 <sendThread+0x200>)
 8002b1a:	2000      	movs	r0, #0
 8002b1c:	f7ff fc7a 	bl	8002414 <console>
		return 0;
 8002b20:	2300      	movs	r3, #0
 8002b22:	e00e      	b.n	8002b42 <sendThread+0x1ea>
	}
	console(CONSOLE_INFO, __func__,
			"A2P Data end byte %c sent and ack %c received \n",
			(char) send_sync_bytes[0], (char) send_sync_ack[0]);
 8002b24:	4b09      	ldr	r3, [pc, #36]	; (8002b4c <sendThread+0x1f4>)
 8002b26:	781b      	ldrb	r3, [r3, #0]
	console(CONSOLE_INFO, __func__,
 8002b28:	461a      	mov	r2, r3
			(char) send_sync_bytes[0], (char) send_sync_ack[0]);
 8002b2a:	4b09      	ldr	r3, [pc, #36]	; (8002b50 <sendThread+0x1f8>)
 8002b2c:	781b      	ldrb	r3, [r3, #0]
	console(CONSOLE_INFO, __func__,
 8002b2e:	9300      	str	r3, [sp, #0]
 8002b30:	4613      	mov	r3, r2
 8002b32:	4a14      	ldr	r2, [pc, #80]	; (8002b84 <sendThread+0x22c>)
 8002b34:	4908      	ldr	r1, [pc, #32]	; (8002b58 <sendThread+0x200>)
 8002b36:	2001      	movs	r0, #1
 8002b38:	f7ff fc6c 	bl	8002414 <console>


	startReceiving();
 8002b3c:	f7ff fd0a 	bl	8002554 <startReceiving>
	return check;
 8002b40:	7cfb      	ldrb	r3, [r7, #19]
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3728      	adds	r7, #40	; 0x28
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	20000a08 	.word	0x20000a08
 8002b50:	20000a0c 	.word	0x20000a0c
 8002b54:	080045f8 	.word	0x080045f8
 8002b58:	08004ec4 	.word	0x08004ec4
 8002b5c:	0800462c 	.word	0x0800462c
 8002b60:	08004654 	.word	0x08004654
 8002b64:	08004688 	.word	0x08004688
 8002b68:	080046b8 	.word	0x080046b8
 8002b6c:	080046f0 	.word	0x080046f0
 8002b70:	200009a4 	.word	0x200009a4
 8002b74:	20000180 	.word	0x20000180
 8002b78:	08004728 	.word	0x08004728
 8002b7c:	08004764 	.word	0x08004764
 8002b80:	0800479c 	.word	0x0800479c
 8002b84:	080047d8 	.word	0x080047d8

08002b88 <init>:
 * @param huart	: UART handler
 * @param hcrc	: CRC handler
 * @param huart	: receive callback function
 */
static void init(UART_HandleTypeDef *huart, CRC_HandleTypeDef *hcrc,
		void (*receiveCallbackFunc)(uint32_t, uint8_t*, uint16_t)) {
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b084      	sub	sp, #16
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	60f8      	str	r0, [r7, #12]
 8002b90:	60b9      	str	r1, [r7, #8]
 8002b92:	607a      	str	r2, [r7, #4]
	huart_adapter = huart;
 8002b94:	4a07      	ldr	r2, [pc, #28]	; (8002bb4 <init+0x2c>)
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	6013      	str	r3, [r2, #0]
	hcrc_adapter = hcrc;
 8002b9a:	4a07      	ldr	r2, [pc, #28]	; (8002bb8 <init+0x30>)
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	6013      	str	r3, [r2, #0]
	receiveCallback = receiveCallbackFunc;
 8002ba0:	4a06      	ldr	r2, [pc, #24]	; (8002bbc <init+0x34>)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6013      	str	r3, [r2, #0]

	startReceiving();
 8002ba6:	f7ff fcd5 	bl	8002554 <startReceiving>
//	startSending();
}
 8002baa:	bf00      	nop
 8002bac:	3710      	adds	r7, #16
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	2000017c 	.word	0x2000017c
 8002bb8:	20000180 	.word	0x20000180
 8002bbc:	20000184 	.word	0x20000184

08002bc0 <transmit>:
 * This transmits data to PC
 * @param id	: CAN ID
 * @param bytes	: bytes to be send
 * @param len	: Length of data to be sent
 */
static int transmit(uint32_t id, uint8_t *bytes, uint16_t len) {
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b086      	sub	sp, #24
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	60f8      	str	r0, [r7, #12]
 8002bc8:	60b9      	str	r1, [r7, #8]
 8002bca:	4613      	mov	r3, r2
 8002bcc:	80fb      	strh	r3, [r7, #6]
	for (int i = 0; i < len; i++)
 8002bce:	2300      	movs	r3, #0
 8002bd0:	617b      	str	r3, [r7, #20]
 8002bd2:	e00b      	b.n	8002bec <transmit+0x2c>
		send_data[i] = bytes[i];
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	68ba      	ldr	r2, [r7, #8]
 8002bd8:	4413      	add	r3, r2
 8002bda:	7819      	ldrb	r1, [r3, #0]
 8002bdc:	4a19      	ldr	r2, [pc, #100]	; (8002c44 <transmit+0x84>)
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	4413      	add	r3, r2
 8002be2:	460a      	mov	r2, r1
 8002be4:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < len; i++)
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	3301      	adds	r3, #1
 8002bea:	617b      	str	r3, [r7, #20]
 8002bec:	88fb      	ldrh	r3, [r7, #6]
 8002bee:	697a      	ldr	r2, [r7, #20]
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	dbef      	blt.n	8002bd4 <transmit+0x14>


	for(int i=0;i<TRANSMIT_TRY;i++){
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	613b      	str	r3, [r7, #16]
 8002bf8:	e016      	b.n	8002c28 <transmit+0x68>
		if(sendThread(id, len)){
 8002bfa:	88fb      	ldrh	r3, [r7, #6]
 8002bfc:	4619      	mov	r1, r3
 8002bfe:	68f8      	ldr	r0, [r7, #12]
 8002c00:	f7ff feaa 	bl	8002958 <sendThread>
 8002c04:	4603      	mov	r3, r0
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d006      	beq.n	8002c18 <transmit+0x58>
			console(CONSOLE_INFO, __func__, "DATA transmit success\n");
 8002c0a:	4a0f      	ldr	r2, [pc, #60]	; (8002c48 <transmit+0x88>)
 8002c0c:	490f      	ldr	r1, [pc, #60]	; (8002c4c <transmit+0x8c>)
 8002c0e:	2001      	movs	r0, #1
 8002c10:	f7ff fc00 	bl	8002414 <console>
			return 1;
 8002c14:	2301      	movs	r3, #1
 8002c16:	e011      	b.n	8002c3c <transmit+0x7c>
		}
		console(CONSOLE_WARNING, __func__, "DATA transmit failed and retrying...\n");
 8002c18:	4a0d      	ldr	r2, [pc, #52]	; (8002c50 <transmit+0x90>)
 8002c1a:	490c      	ldr	r1, [pc, #48]	; (8002c4c <transmit+0x8c>)
 8002c1c:	2002      	movs	r0, #2
 8002c1e:	f7ff fbf9 	bl	8002414 <console>
	for(int i=0;i<TRANSMIT_TRY;i++){
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	3301      	adds	r3, #1
 8002c26:	613b      	str	r3, [r7, #16]
 8002c28:	2203      	movs	r2, #3
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	dbe4      	blt.n	8002bfa <transmit+0x3a>
	}
	console(CONSOLE_ERROR, __func__, "DATA transmit failed\n");
 8002c30:	4a08      	ldr	r2, [pc, #32]	; (8002c54 <transmit+0x94>)
 8002c32:	4906      	ldr	r1, [pc, #24]	; (8002c4c <transmit+0x8c>)
 8002c34:	2000      	movs	r0, #0
 8002c36:	f7ff fbed 	bl	8002414 <console>
	return 0;
 8002c3a:	2300      	movs	r3, #0
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3718      	adds	r7, #24
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}
 8002c44:	200009a4 	.word	0x200009a4
 8002c48:	08004808 	.word	0x08004808
 8002c4c:	08004ed0 	.word	0x08004ed0
 8002c50:	08004820 	.word	0x08004820
 8002c54:	08004848 	.word	0x08004848

08002c58 <receiveRxCpltCallback>:

/**
 * This method should be called in DMA callback
 */
static void receiveRxCpltCallback() {
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	af00      	add	r7, sp, #0
	if (status == RECEIVING)
 8002c5c:	4b05      	ldr	r3, [pc, #20]	; (8002c74 <receiveRxCpltCallback+0x1c>)
 8002c5e:	781b      	ldrb	r3, [r3, #0]
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d102      	bne.n	8002c6a <receiveRxCpltCallback+0x12>
		receiveThread();
 8002c64:	f7ff fc98 	bl	8002598 <receiveThread>
	else
		startReceiving();
}
 8002c68:	e001      	b.n	8002c6e <receiveRxCpltCallback+0x16>
		startReceiving();
 8002c6a:	f7ff fc73 	bl	8002554 <startReceiving>
}
 8002c6e:	bf00      	nop
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	20000009 	.word	0x20000009

08002c78 <loop>:

/**
 * This is uart loop
 *
 */
static void loop() {
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b082      	sub	sp, #8
 8002c7c:	af00      	add	r7, sp, #0
	uint8_t is_timeout = (HAL_GetTick() - time_elapse) > RECEIVE_TIMEOUT;
 8002c7e:	f7fd fd9f 	bl	80007c0 <HAL_GetTick>
 8002c82:	4602      	mov	r2, r0
 8002c84:	4b18      	ldr	r3, [pc, #96]	; (8002ce8 <loop+0x70>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	bf8c      	ite	hi
 8002c92:	2301      	movhi	r3, #1
 8002c94:	2300      	movls	r3, #0
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	71fb      	strb	r3, [r7, #7]
	if (is_timeout && !is_in_receiveThread && rec_track != START) {
 8002c9a:	79fb      	ldrb	r3, [r7, #7]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d010      	beq.n	8002cc2 <loop+0x4a>
 8002ca0:	4b12      	ldr	r3, [pc, #72]	; (8002cec <loop+0x74>)
 8002ca2:	781b      	ldrb	r3, [r3, #0]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d10c      	bne.n	8002cc2 <loop+0x4a>
 8002ca8:	4b11      	ldr	r3, [pc, #68]	; (8002cf0 <loop+0x78>)
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d008      	beq.n	8002cc2 <loop+0x4a>
		console(CONSOLE_ERROR, __func__, "receiveThread timeout %d ms\n",
 8002cb0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002cb4:	4a0f      	ldr	r2, [pc, #60]	; (8002cf4 <loop+0x7c>)
 8002cb6:	4910      	ldr	r1, [pc, #64]	; (8002cf8 <loop+0x80>)
 8002cb8:	2000      	movs	r0, #0
 8002cba:	f7ff fbab 	bl	8002414 <console>
				RECEIVE_TIMEOUT);
		startReceiving();
 8002cbe:	f7ff fc49 	bl	8002554 <startReceiving>
	}

	if (received) {
 8002cc2:	4b0e      	ldr	r3, [pc, #56]	; (8002cfc <loop+0x84>)
 8002cc4:	781b      	ldrb	r3, [r3, #0]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d00a      	beq.n	8002ce0 <loop+0x68>
		receiveCallback(received_id, rec_data, received_len);
 8002cca:	4b0d      	ldr	r3, [pc, #52]	; (8002d00 <loop+0x88>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a0d      	ldr	r2, [pc, #52]	; (8002d04 <loop+0x8c>)
 8002cd0:	6810      	ldr	r0, [r2, #0]
 8002cd2:	4a0d      	ldr	r2, [pc, #52]	; (8002d08 <loop+0x90>)
 8002cd4:	8812      	ldrh	r2, [r2, #0]
 8002cd6:	490d      	ldr	r1, [pc, #52]	; (8002d0c <loop+0x94>)
 8002cd8:	4798      	blx	r3
		received = 0;
 8002cda:	4b08      	ldr	r3, [pc, #32]	; (8002cfc <loop+0x84>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	701a      	strb	r2, [r3, #0]
	}
}
 8002ce0:	bf00      	nop
 8002ce2:	3708      	adds	r7, #8
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}
 8002ce8:	20000994 	.word	0x20000994
 8002cec:	200009a2 	.word	0x200009a2
 8002cf0:	20000992 	.word	0x20000992
 8002cf4:	08004860 	.word	0x08004860
 8002cf8:	08004edc 	.word	0x08004edc
 8002cfc:	20000998 	.word	0x20000998
 8002d00:	20000184 	.word	0x20000184
 8002d04:	2000099c 	.word	0x2000099c
 8002d08:	200009a0 	.word	0x200009a0
 8002d0c:	20000188 	.word	0x20000188

08002d10 <HAL_UART_RxCpltCallback>:
extern UART_HandleTypeDef huart1;
extern CRC_HandleTypeDef hcrc;



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b082      	sub	sp, #8
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
	StaticSerialProtocol.receiveRxCpltCallback();
 8002d18:	4b03      	ldr	r3, [pc, #12]	; (8002d28 <HAL_UART_RxCpltCallback+0x18>)
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	4798      	blx	r3
}
 8002d1e:	bf00      	nop
 8002d20:	3708      	adds	r7, #8
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	2000000c 	.word	0x2000000c

08002d2c <console>:
static void receiveThreadDebug(const char *msg) {
//	printf("%s\n", msg);
}

static void console(ConsoleStatus status, const char *func_name,
		const char *msg, ...) {
 8002d2c:	b40c      	push	{r2, r3}
 8002d2e:	b580      	push	{r7, lr}
 8002d30:	b084      	sub	sp, #16
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	4603      	mov	r3, r0
 8002d36:	6039      	str	r1, [r7, #0]
 8002d38:	71fb      	strb	r3, [r7, #7]
//	printf("heyy\n");
	//	if(state!=CONSOLE_ERROR)
	if (status == CONSOLE_INFO)
 8002d3a:	79fb      	ldrb	r3, [r7, #7]
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d023      	beq.n	8002d88 <console+0x5c>
		return;
	//TODO make naked and show all registers
	if (status == CONSOLE_ERROR) {
 8002d40:	79fb      	ldrb	r3, [r7, #7]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d104      	bne.n	8002d50 <console+0x24>
		printf("uart.c|%s> ERROR :", func_name);
 8002d46:	6839      	ldr	r1, [r7, #0]
 8002d48:	4813      	ldr	r0, [pc, #76]	; (8002d98 <console+0x6c>)
 8002d4a:	f000 fabf 	bl	80032cc <iprintf>
 8002d4e:	e013      	b.n	8002d78 <console+0x4c>
	} else if (status == CONSOLE_INFO) {
 8002d50:	79fb      	ldrb	r3, [r7, #7]
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d104      	bne.n	8002d60 <console+0x34>
		printf("uart.c|%s> INFO : ", func_name);
 8002d56:	6839      	ldr	r1, [r7, #0]
 8002d58:	4810      	ldr	r0, [pc, #64]	; (8002d9c <console+0x70>)
 8002d5a:	f000 fab7 	bl	80032cc <iprintf>
 8002d5e:	e00b      	b.n	8002d78 <console+0x4c>
	} else if (status == CONSOLE_WARNING) {
 8002d60:	79fb      	ldrb	r3, [r7, #7]
 8002d62:	2b02      	cmp	r3, #2
 8002d64:	d104      	bne.n	8002d70 <console+0x44>
		printf("uart.c|%s> WARNING : ", func_name);
 8002d66:	6839      	ldr	r1, [r7, #0]
 8002d68:	480d      	ldr	r0, [pc, #52]	; (8002da0 <console+0x74>)
 8002d6a:	f000 faaf 	bl	80032cc <iprintf>
 8002d6e:	e003      	b.n	8002d78 <console+0x4c>
	} else {
		printf("uart.c|%s: ", func_name);
 8002d70:	6839      	ldr	r1, [r7, #0]
 8002d72:	480c      	ldr	r0, [pc, #48]	; (8002da4 <console+0x78>)
 8002d74:	f000 faaa 	bl	80032cc <iprintf>
	}
	va_list args;
	va_start(args, msg);
 8002d78:	f107 031c 	add.w	r3, r7, #28
 8002d7c:	60fb      	str	r3, [r7, #12]
	vprintf(msg, args);
 8002d7e:	68f9      	ldr	r1, [r7, #12]
 8002d80:	69b8      	ldr	r0, [r7, #24]
 8002d82:	f000 fabb 	bl	80032fc <viprintf>
 8002d86:	e000      	b.n	8002d8a <console+0x5e>
		return;
 8002d88:	bf00      	nop
	va_end(args);
}
 8002d8a:	3710      	adds	r7, #16
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002d92:	b002      	add	sp, #8
 8002d94:	4770      	bx	lr
 8002d96:	bf00      	nop
 8002d98:	08004880 	.word	0x08004880
 8002d9c:	08004894 	.word	0x08004894
 8002da0:	080048a8 	.word	0x080048a8
 8002da4:	080048c0 	.word	0x080048c0

08002da8 <sendAndack>:
 * @param num_of_try    : number of try
 * @return              : 1 for success
 *                      : 0 for failed
 */
static uint8_t sendAndack(uint8_t *bytes, uint16_t bytes_len, uint8_t *ack,
		uint16_t ack_len, uint32_t time_out, uint8_t num_of_try) {
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b088      	sub	sp, #32
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	60f8      	str	r0, [r7, #12]
 8002db0:	607a      	str	r2, [r7, #4]
 8002db2:	461a      	mov	r2, r3
 8002db4:	460b      	mov	r3, r1
 8002db6:	817b      	strh	r3, [r7, #10]
 8002db8:	4613      	mov	r3, r2
 8002dba:	813b      	strh	r3, [r7, #8]
	uint8_t success_check = 0;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	77fb      	strb	r3, [r7, #31]
	for (int i = 0; i < num_of_try; i++) {
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	61bb      	str	r3, [r7, #24]
 8002dc4:	e03e      	b.n	8002e44 <sendAndack+0x9c>
		if (HAL_UART_Transmit(huart_adapter, bytes, bytes_len, time_out)
 8002dc6:	4b24      	ldr	r3, [pc, #144]	; (8002e58 <sendAndack+0xb0>)
 8002dc8:	6818      	ldr	r0, [r3, #0]
 8002dca:	897a      	ldrh	r2, [r7, #10]
 8002dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dce:	68f9      	ldr	r1, [r7, #12]
 8002dd0:	f7fe fec4 	bl	8001b5c <HAL_UART_Transmit>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d006      	beq.n	8002de8 <sendAndack+0x40>
				!= HAL_OK) {
			console(CONSOLE_ERROR, __func__, "A2P Transmit error, try no %d\n",
 8002dda:	69bb      	ldr	r3, [r7, #24]
 8002ddc:	4a1f      	ldr	r2, [pc, #124]	; (8002e5c <sendAndack+0xb4>)
 8002dde:	4920      	ldr	r1, [pc, #128]	; (8002e60 <sendAndack+0xb8>)
 8002de0:	2000      	movs	r0, #0
 8002de2:	f7ff ffa3 	bl	8002d2c <console>
					i);
			continue;
 8002de6:	e02a      	b.n	8002e3e <sendAndack+0x96>
		}
		HAL_UART_Receive(huart_adapter, rec_ack, ack_len, time_out);
 8002de8:	4b1b      	ldr	r3, [pc, #108]	; (8002e58 <sendAndack+0xb0>)
 8002dea:	6818      	ldr	r0, [r3, #0]
 8002dec:	893a      	ldrh	r2, [r7, #8]
 8002dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002df0:	491c      	ldr	r1, [pc, #112]	; (8002e64 <sendAndack+0xbc>)
 8002df2:	f7fe ff45 	bl	8001c80 <HAL_UART_Receive>
		uint8_t check = 1;
 8002df6:	2301      	movs	r3, #1
 8002df8:	75fb      	strb	r3, [r7, #23]
		for (int j = 0; j < ack_len; j++) {
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	613b      	str	r3, [r7, #16]
 8002dfe:	e014      	b.n	8002e2a <sendAndack+0x82>
			if (rec_ack[j] != ack[j]) {
 8002e00:	4a18      	ldr	r2, [pc, #96]	; (8002e64 <sendAndack+0xbc>)
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	4413      	add	r3, r2
 8002e06:	781a      	ldrb	r2, [r3, #0]
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	6879      	ldr	r1, [r7, #4]
 8002e0c:	440b      	add	r3, r1
 8002e0e:	781b      	ldrb	r3, [r3, #0]
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d007      	beq.n	8002e24 <sendAndack+0x7c>
				check = 0;
 8002e14:	2300      	movs	r3, #0
 8002e16:	75fb      	strb	r3, [r7, #23]
				console(CONSOLE_ERROR, __func__, "A2P Ack match error :: \n");
 8002e18:	4a13      	ldr	r2, [pc, #76]	; (8002e68 <sendAndack+0xc0>)
 8002e1a:	4911      	ldr	r1, [pc, #68]	; (8002e60 <sendAndack+0xb8>)
 8002e1c:	2000      	movs	r0, #0
 8002e1e:	f7ff ff85 	bl	8002d2c <console>
				break;
 8002e22:	e006      	b.n	8002e32 <sendAndack+0x8a>
		for (int j = 0; j < ack_len; j++) {
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	3301      	adds	r3, #1
 8002e28:	613b      	str	r3, [r7, #16]
 8002e2a:	893b      	ldrh	r3, [r7, #8]
 8002e2c:	693a      	ldr	r2, [r7, #16]
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	dbe6      	blt.n	8002e00 <sendAndack+0x58>
			}
		}
		if (check) {
 8002e32:	7dfb      	ldrb	r3, [r7, #23]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d002      	beq.n	8002e3e <sendAndack+0x96>
			success_check = 1;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	77fb      	strb	r3, [r7, #31]
			break;
 8002e3c:	e007      	b.n	8002e4e <sendAndack+0xa6>
	for (int i = 0; i < num_of_try; i++) {
 8002e3e:	69bb      	ldr	r3, [r7, #24]
 8002e40:	3301      	adds	r3, #1
 8002e42:	61bb      	str	r3, [r7, #24]
 8002e44:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002e48:	69ba      	ldr	r2, [r7, #24]
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	dbbb      	blt.n	8002dc6 <sendAndack+0x1e>
		}
	}
	return success_check;
 8002e4e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	3720      	adds	r7, #32
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	20000a18 	.word	0x20000a18
 8002e5c:	080048cc 	.word	0x080048cc
 8002e60:	08004ee4 	.word	0x08004ee4
 8002e64:	200012a4 	.word	0x200012a4
 8002e68:	080048ec 	.word	0x080048ec

08002e6c <startReceiving>:

/**
 * It starts the receiving process or make program to wait for data from PC
 */
static void startReceiving() {
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	af00      	add	r7, sp, #0
	rec_track = START;
 8002e70:	4b09      	ldr	r3, [pc, #36]	; (8002e98 <startReceiving+0x2c>)
 8002e72:	2200      	movs	r2, #0
 8002e74:	701a      	strb	r2, [r3, #0]
	status = RECEIVING;
 8002e76:	4b09      	ldr	r3, [pc, #36]	; (8002e9c <startReceiving+0x30>)
 8002e78:	2201      	movs	r2, #1
 8002e7a:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_DMA(huart_adapter, rec_sync_bytes, 1);
 8002e7c:	4b08      	ldr	r3, [pc, #32]	; (8002ea0 <startReceiving+0x34>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	2201      	movs	r2, #1
 8002e82:	4908      	ldr	r1, [pc, #32]	; (8002ea4 <startReceiving+0x38>)
 8002e84:	4618      	mov	r0, r3
 8002e86:	f7fe ff9d 	bl	8001dc4 <HAL_UART_Receive_DMA>
	console(CONSOLE_INFO, __func__,
 8002e8a:	4a07      	ldr	r2, [pc, #28]	; (8002ea8 <startReceiving+0x3c>)
 8002e8c:	4907      	ldr	r1, [pc, #28]	; (8002eac <startReceiving+0x40>)
 8002e8e:	2001      	movs	r0, #1
 8002e90:	f7ff ff4c 	bl	8002d2c <console>
			"Waiting for start byte 'S' to be received\n");
}
 8002e94:	bf00      	nop
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	20001225 	.word	0x20001225
 8002e9c:	2000001c 	.word	0x2000001c
 8002ea0:	20000a18 	.word	0x20000a18
 8002ea4:	20001224 	.word	0x20001224
 8002ea8:	08004908 	.word	0x08004908
 8002eac:	08004ef0 	.word	0x08004ef0

08002eb0 <startSending>:
}

/**
 * It start the sending process or stop receiving process
 */
static void startSending() {
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	af00      	add	r7, sp, #0
	status = SENDING;
 8002eb4:	4b04      	ldr	r3, [pc, #16]	; (8002ec8 <startSending+0x18>)
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	701a      	strb	r2, [r3, #0]
	HAL_UART_DMAStop(huart_adapter);
 8002eba:	4b04      	ldr	r3, [pc, #16]	; (8002ecc <startSending+0x1c>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f7fe ffb0 	bl	8001e24 <HAL_UART_DMAStop>
}
 8002ec4:	bf00      	nop
 8002ec6:	bd80      	pop	{r7, pc}
 8002ec8:	2000001c 	.word	0x2000001c
 8002ecc:	20000a18 	.word	0x20000a18

08002ed0 <sendThread>:
 *@param bytes	: Bytes to be sent
 *@param len 	: length of bytes
 *@return       : 1 for successs
 *				: 0 for failed
 */
static uint8_t sendThread(uint32_t id, uint16_t len) {
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b08c      	sub	sp, #48	; 0x30
 8002ed4:	af02      	add	r7, sp, #8
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	460b      	mov	r3, r1
 8002eda:	807b      	strh	r3, [r7, #2]
	startSending();
 8002edc:	f7ff ffe8 	bl	8002eb0 <startSending>
	uint32_t timeout = TRANSMIT_TIMEOUT;
 8002ee0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ee4:	61fb      	str	r3, [r7, #28]
	uint8_t num_try = 5;
 8002ee6:	2305      	movs	r3, #5
 8002ee8:	76fb      	strb	r3, [r7, #27]

	send_sync_bytes[0] = 'S';
 8002eea:	4b76      	ldr	r3, [pc, #472]	; (80030c4 <sendThread+0x1f4>)
 8002eec:	2253      	movs	r2, #83	; 0x53
 8002eee:	701a      	strb	r2, [r3, #0]
	send_sync_ack[0] = 'O';
 8002ef0:	4b75      	ldr	r3, [pc, #468]	; (80030c8 <sendThread+0x1f8>)
 8002ef2:	224f      	movs	r2, #79	; 0x4f
 8002ef4:	701a      	strb	r2, [r3, #0]

	if (!sendAndack(send_sync_bytes, 1, send_sync_ack, 1, timeout, num_try)) {
 8002ef6:	7efb      	ldrb	r3, [r7, #27]
 8002ef8:	9301      	str	r3, [sp, #4]
 8002efa:	69fb      	ldr	r3, [r7, #28]
 8002efc:	9300      	str	r3, [sp, #0]
 8002efe:	2301      	movs	r3, #1
 8002f00:	4a71      	ldr	r2, [pc, #452]	; (80030c8 <sendThread+0x1f8>)
 8002f02:	2101      	movs	r1, #1
 8002f04:	486f      	ldr	r0, [pc, #444]	; (80030c4 <sendThread+0x1f4>)
 8002f06:	f7ff ff4f 	bl	8002da8 <sendAndack>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d10d      	bne.n	8002f2c <sendThread+0x5c>
		console(CONSOLE_ERROR, __func__,
				"A2P Start ack %c sending and %c ack receive error\n",
				(char) send_sync_bytes[0], (char) send_sync_ack[0]);
 8002f10:	4b6c      	ldr	r3, [pc, #432]	; (80030c4 <sendThread+0x1f4>)
 8002f12:	781b      	ldrb	r3, [r3, #0]
		console(CONSOLE_ERROR, __func__,
 8002f14:	461a      	mov	r2, r3
				(char) send_sync_bytes[0], (char) send_sync_ack[0]);
 8002f16:	4b6c      	ldr	r3, [pc, #432]	; (80030c8 <sendThread+0x1f8>)
 8002f18:	781b      	ldrb	r3, [r3, #0]
		console(CONSOLE_ERROR, __func__,
 8002f1a:	9300      	str	r3, [sp, #0]
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	4a6b      	ldr	r2, [pc, #428]	; (80030cc <sendThread+0x1fc>)
 8002f20:	496b      	ldr	r1, [pc, #428]	; (80030d0 <sendThread+0x200>)
 8002f22:	2000      	movs	r0, #0
 8002f24:	f7ff ff02 	bl	8002d2c <console>
		return 0;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	e0c6      	b.n	80030ba <sendThread+0x1ea>
	}
	console(CONSOLE_INFO, __func__, "A2P Start send and receive ack %c & %c\n",
			(char) send_sync_bytes[0], (char) send_sync_ack[0]);
 8002f2c:	4b65      	ldr	r3, [pc, #404]	; (80030c4 <sendThread+0x1f4>)
 8002f2e:	781b      	ldrb	r3, [r3, #0]
	console(CONSOLE_INFO, __func__, "A2P Start send and receive ack %c & %c\n",
 8002f30:	461a      	mov	r2, r3
			(char) send_sync_bytes[0], (char) send_sync_ack[0]);
 8002f32:	4b65      	ldr	r3, [pc, #404]	; (80030c8 <sendThread+0x1f8>)
 8002f34:	781b      	ldrb	r3, [r3, #0]
	console(CONSOLE_INFO, __func__, "A2P Start send and receive ack %c & %c\n",
 8002f36:	9300      	str	r3, [sp, #0]
 8002f38:	4613      	mov	r3, r2
 8002f3a:	4a66      	ldr	r2, [pc, #408]	; (80030d4 <sendThread+0x204>)
 8002f3c:	4964      	ldr	r1, [pc, #400]	; (80030d0 <sendThread+0x200>)
 8002f3e:	2001      	movs	r0, #1
 8002f40:	f7ff fef4 	bl	8002d2c <console>

	if (!sendAndack((uint8_t*) (&id), 4, (uint8_t*) (&id), 4, timeout,
 8002f44:	1d3a      	adds	r2, r7, #4
 8002f46:	1d38      	adds	r0, r7, #4
 8002f48:	7efb      	ldrb	r3, [r7, #27]
 8002f4a:	9301      	str	r3, [sp, #4]
 8002f4c:	69fb      	ldr	r3, [r7, #28]
 8002f4e:	9300      	str	r3, [sp, #0]
 8002f50:	2304      	movs	r3, #4
 8002f52:	2104      	movs	r1, #4
 8002f54:	f7ff ff28 	bl	8002da8 <sendAndack>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d107      	bne.n	8002f6e <sendThread+0x9e>
			num_try)) {
		console(CONSOLE_ERROR, __func__,
 8002f5e:	7efb      	ldrb	r3, [r7, #27]
 8002f60:	4a5d      	ldr	r2, [pc, #372]	; (80030d8 <sendThread+0x208>)
 8002f62:	495b      	ldr	r1, [pc, #364]	; (80030d0 <sendThread+0x200>)
 8002f64:	2000      	movs	r0, #0
 8002f66:	f7ff fee1 	bl	8002d2c <console>
				"A2P Can ID send and ack error for %d number of try\n",
				num_try);
		return 0;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	e0a5      	b.n	80030ba <sendThread+0x1ea>
	}
	console(CONSOLE_INFO, __func__,
 8002f6e:	4a5b      	ldr	r2, [pc, #364]	; (80030dc <sendThread+0x20c>)
 8002f70:	4957      	ldr	r1, [pc, #348]	; (80030d0 <sendThread+0x200>)
 8002f72:	2001      	movs	r0, #1
 8002f74:	f7ff feda 	bl	8002d2c <console>
			"A2P CAN id send and id ack receive successful\n");

	if (!sendAndack((uint8_t*) (&len), 2, (uint8_t*) (&len), 2, timeout,
 8002f78:	1cba      	adds	r2, r7, #2
 8002f7a:	1cb8      	adds	r0, r7, #2
 8002f7c:	7efb      	ldrb	r3, [r7, #27]
 8002f7e:	9301      	str	r3, [sp, #4]
 8002f80:	69fb      	ldr	r3, [r7, #28]
 8002f82:	9300      	str	r3, [sp, #0]
 8002f84:	2302      	movs	r3, #2
 8002f86:	2102      	movs	r1, #2
 8002f88:	f7ff ff0e 	bl	8002da8 <sendAndack>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d10b      	bne.n	8002faa <sendThread+0xda>
			num_try)) {
		console(CONSOLE_ERROR, __func__,
 8002f92:	887b      	ldrh	r3, [r7, #2]
 8002f94:	461a      	mov	r2, r3
 8002f96:	887b      	ldrh	r3, [r7, #2]
 8002f98:	9300      	str	r3, [sp, #0]
 8002f9a:	4613      	mov	r3, r2
 8002f9c:	4a50      	ldr	r2, [pc, #320]	; (80030e0 <sendThread+0x210>)
 8002f9e:	494c      	ldr	r1, [pc, #304]	; (80030d0 <sendThread+0x200>)
 8002fa0:	2000      	movs	r0, #0
 8002fa2:	f7ff fec3 	bl	8002d2c <console>
				"A2P Length of data %d send and ack %d receive error\n", len,
				len);
		return 0;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	e087      	b.n	80030ba <sendThread+0x1ea>
	}
	console(CONSOLE_INFO, __func__,
 8002faa:	887b      	ldrh	r3, [r7, #2]
 8002fac:	461a      	mov	r2, r3
			"A2P Length of data %d send and ack %c receive success\n", len,
			(char) send_sync_ack[0]);
 8002fae:	4b46      	ldr	r3, [pc, #280]	; (80030c8 <sendThread+0x1f8>)
 8002fb0:	781b      	ldrb	r3, [r3, #0]
	console(CONSOLE_INFO, __func__,
 8002fb2:	9300      	str	r3, [sp, #0]
 8002fb4:	4613      	mov	r3, r2
 8002fb6:	4a4b      	ldr	r2, [pc, #300]	; (80030e4 <sendThread+0x214>)
 8002fb8:	4945      	ldr	r1, [pc, #276]	; (80030d0 <sendThread+0x200>)
 8002fba:	2001      	movs	r0, #1
 8002fbc:	f7ff feb6 	bl	8002d2c <console>

	uint32_t new_len = len;
 8002fc0:	887b      	ldrh	r3, [r7, #2]
 8002fc2:	627b      	str	r3, [r7, #36]	; 0x24
	int loop_limit = new_len % 4;
 8002fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc6:	f003 0303 	and.w	r3, r3, #3
 8002fca:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < (4 - loop_limit) && loop_limit > 0; i++)
 8002fcc:	2300      	movs	r3, #0
 8002fce:	623b      	str	r3, [r7, #32]
 8002fd0:	e008      	b.n	8002fe4 <sendThread+0x114>
		send_data[new_len++] = 0x00;
 8002fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd4:	1c5a      	adds	r2, r3, #1
 8002fd6:	627a      	str	r2, [r7, #36]	; 0x24
 8002fd8:	4a43      	ldr	r2, [pc, #268]	; (80030e8 <sendThread+0x218>)
 8002fda:	2100      	movs	r1, #0
 8002fdc:	54d1      	strb	r1, [r2, r3]
	for (int i = 0; i < (4 - loop_limit) && loop_limit > 0; i++)
 8002fde:	6a3b      	ldr	r3, [r7, #32]
 8002fe0:	3301      	adds	r3, #1
 8002fe2:	623b      	str	r3, [r7, #32]
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	f1c3 0304 	rsb	r3, r3, #4
 8002fea:	6a3a      	ldr	r2, [r7, #32]
 8002fec:	429a      	cmp	r2, r3
 8002fee:	da02      	bge.n	8002ff6 <sendThread+0x126>
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	dced      	bgt.n	8002fd2 <sendThread+0x102>
	uint32_t crc = HAL_CRC_Calculate(hcrc_adapter, (uint32_t*) send_data,
 8002ff6:	4b3d      	ldr	r3, [pc, #244]	; (80030ec <sendThread+0x21c>)
 8002ff8:	6818      	ldr	r0, [r3, #0]
 8002ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ffc:	089b      	lsrs	r3, r3, #2
 8002ffe:	461a      	mov	r2, r3
 8003000:	4939      	ldr	r1, [pc, #228]	; (80030e8 <sendThread+0x218>)
 8003002:	f7fd fd10 	bl	8000a26 <HAL_CRC_Calculate>
 8003006:	4603      	mov	r3, r0
 8003008:	60fb      	str	r3, [r7, #12]
			new_len / 4);
	uint8_t check = sendAndack(send_data, len, (uint8_t*) (&crc), 4, timeout,
 800300a:	8879      	ldrh	r1, [r7, #2]
 800300c:	f107 020c 	add.w	r2, r7, #12
 8003010:	7efb      	ldrb	r3, [r7, #27]
 8003012:	9301      	str	r3, [sp, #4]
 8003014:	69fb      	ldr	r3, [r7, #28]
 8003016:	9300      	str	r3, [sp, #0]
 8003018:	2304      	movs	r3, #4
 800301a:	4833      	ldr	r0, [pc, #204]	; (80030e8 <sendThread+0x218>)
 800301c:	f7ff fec4 	bl	8002da8 <sendAndack>
 8003020:	4603      	mov	r3, r0
 8003022:	74fb      	strb	r3, [r7, #19]
			num_try);

	send_sync_bytes[0] = check ? '\0' : -1;
 8003024:	7cfb      	ldrb	r3, [r7, #19]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d001      	beq.n	800302e <sendThread+0x15e>
 800302a:	2200      	movs	r2, #0
 800302c:	e000      	b.n	8003030 <sendThread+0x160>
 800302e:	22ff      	movs	r2, #255	; 0xff
 8003030:	4b24      	ldr	r3, [pc, #144]	; (80030c4 <sendThread+0x1f4>)
 8003032:	701a      	strb	r2, [r3, #0]
	if (send_sync_bytes[0] == '\0') {
 8003034:	4b23      	ldr	r3, [pc, #140]	; (80030c4 <sendThread+0x1f4>)
 8003036:	781b      	ldrb	r3, [r3, #0]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d10a      	bne.n	8003052 <sendThread+0x182>
		console(CONSOLE_INFO, __func__,
 800303c:	887b      	ldrh	r3, [r7, #2]
 800303e:	461a      	mov	r2, r3
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	9300      	str	r3, [sp, #0]
 8003044:	4613      	mov	r3, r2
 8003046:	4a2a      	ldr	r2, [pc, #168]	; (80030f0 <sendThread+0x220>)
 8003048:	4921      	ldr	r1, [pc, #132]	; (80030d0 <sendThread+0x200>)
 800304a:	2001      	movs	r0, #1
 800304c:	f7ff fe6e 	bl	8002d2c <console>
 8003050:	e009      	b.n	8003066 <sendThread+0x196>
				"A2P Length of data %d send and ack 0x%0x receive success\n",
				len, crc);
	} else {
		console(CONSOLE_ERROR, __func__,
 8003052:	887b      	ldrh	r3, [r7, #2]
 8003054:	461a      	mov	r2, r3
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	9300      	str	r3, [sp, #0]
 800305a:	4613      	mov	r3, r2
 800305c:	4a25      	ldr	r2, [pc, #148]	; (80030f4 <sendThread+0x224>)
 800305e:	491c      	ldr	r1, [pc, #112]	; (80030d0 <sendThread+0x200>)
 8003060:	2000      	movs	r0, #0
 8003062:	f7ff fe63 	bl	8002d2c <console>
				"A2P Length of data %d send and ack 0x%0x receive error\n", len,
				crc);
	}

	if (!sendAndack(send_sync_bytes, 1, send_sync_ack, 1, timeout, num_try)) {
 8003066:	7efb      	ldrb	r3, [r7, #27]
 8003068:	9301      	str	r3, [sp, #4]
 800306a:	69fb      	ldr	r3, [r7, #28]
 800306c:	9300      	str	r3, [sp, #0]
 800306e:	2301      	movs	r3, #1
 8003070:	4a15      	ldr	r2, [pc, #84]	; (80030c8 <sendThread+0x1f8>)
 8003072:	2101      	movs	r1, #1
 8003074:	4813      	ldr	r0, [pc, #76]	; (80030c4 <sendThread+0x1f4>)
 8003076:	f7ff fe97 	bl	8002da8 <sendAndack>
 800307a:	4603      	mov	r3, r0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d10d      	bne.n	800309c <sendThread+0x1cc>
		console(CONSOLE_ERROR, __func__,
				"A2P Data end byte %c sending and ack %c receiving error\n",
				(char) send_sync_bytes[0], (char) send_sync_ack[0]);
 8003080:	4b10      	ldr	r3, [pc, #64]	; (80030c4 <sendThread+0x1f4>)
 8003082:	781b      	ldrb	r3, [r3, #0]
		console(CONSOLE_ERROR, __func__,
 8003084:	461a      	mov	r2, r3
				(char) send_sync_bytes[0], (char) send_sync_ack[0]);
 8003086:	4b10      	ldr	r3, [pc, #64]	; (80030c8 <sendThread+0x1f8>)
 8003088:	781b      	ldrb	r3, [r3, #0]
		console(CONSOLE_ERROR, __func__,
 800308a:	9300      	str	r3, [sp, #0]
 800308c:	4613      	mov	r3, r2
 800308e:	4a1a      	ldr	r2, [pc, #104]	; (80030f8 <sendThread+0x228>)
 8003090:	490f      	ldr	r1, [pc, #60]	; (80030d0 <sendThread+0x200>)
 8003092:	2000      	movs	r0, #0
 8003094:	f7ff fe4a 	bl	8002d2c <console>
		return 0;
 8003098:	2300      	movs	r3, #0
 800309a:	e00e      	b.n	80030ba <sendThread+0x1ea>
	}
	console(CONSOLE_INFO, __func__,
			"A2P Data end byte %c sent and ack %c received \n",
			(char) send_sync_bytes[0], (char) send_sync_ack[0]);
 800309c:	4b09      	ldr	r3, [pc, #36]	; (80030c4 <sendThread+0x1f4>)
 800309e:	781b      	ldrb	r3, [r3, #0]
	console(CONSOLE_INFO, __func__,
 80030a0:	461a      	mov	r2, r3
			(char) send_sync_bytes[0], (char) send_sync_ack[0]);
 80030a2:	4b09      	ldr	r3, [pc, #36]	; (80030c8 <sendThread+0x1f8>)
 80030a4:	781b      	ldrb	r3, [r3, #0]
	console(CONSOLE_INFO, __func__,
 80030a6:	9300      	str	r3, [sp, #0]
 80030a8:	4613      	mov	r3, r2
 80030aa:	4a14      	ldr	r2, [pc, #80]	; (80030fc <sendThread+0x22c>)
 80030ac:	4908      	ldr	r1, [pc, #32]	; (80030d0 <sendThread+0x200>)
 80030ae:	2001      	movs	r0, #1
 80030b0:	f7ff fe3c 	bl	8002d2c <console>


	startReceiving();
 80030b4:	f7ff feda 	bl	8002e6c <startReceiving>
	return check;
 80030b8:	7cfb      	ldrb	r3, [r7, #19]
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3728      	adds	r7, #40	; 0x28
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	2000129c 	.word	0x2000129c
 80030c8:	200012a0 	.word	0x200012a0
 80030cc:	08004bf8 	.word	0x08004bf8
 80030d0:	08004f00 	.word	0x08004f00
 80030d4:	08004c2c 	.word	0x08004c2c
 80030d8:	08004c54 	.word	0x08004c54
 80030dc:	08004c88 	.word	0x08004c88
 80030e0:	08004cb8 	.word	0x08004cb8
 80030e4:	08004cf0 	.word	0x08004cf0
 80030e8:	20001238 	.word	0x20001238
 80030ec:	20000a1c 	.word	0x20000a1c
 80030f0:	08004d28 	.word	0x08004d28
 80030f4:	08004d64 	.word	0x08004d64
 80030f8:	08004d9c 	.word	0x08004d9c
 80030fc:	08004dd8 	.word	0x08004dd8

08003100 <uart_init>:
 * @param huart	: UART handler
 * @param hcrc	: CRC handler
 * @param huart	: receive callback function
 */
void uart_init(UART_HandleTypeDef *huart, CRC_HandleTypeDef *hcrc,
		void (*receiveCallbackFunc)(uint32_t, uint8_t*, uint16_t)) {
 8003100:	b580      	push	{r7, lr}
 8003102:	b084      	sub	sp, #16
 8003104:	af00      	add	r7, sp, #0
 8003106:	60f8      	str	r0, [r7, #12]
 8003108:	60b9      	str	r1, [r7, #8]
 800310a:	607a      	str	r2, [r7, #4]
	huart_adapter = huart;
 800310c:	4a07      	ldr	r2, [pc, #28]	; (800312c <uart_init+0x2c>)
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	6013      	str	r3, [r2, #0]
	hcrc_adapter = hcrc;
 8003112:	4a07      	ldr	r2, [pc, #28]	; (8003130 <uart_init+0x30>)
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	6013      	str	r3, [r2, #0]
	receiveCallback = receiveCallbackFunc;
 8003118:	4a06      	ldr	r2, [pc, #24]	; (8003134 <uart_init+0x34>)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6013      	str	r3, [r2, #0]

	startReceiving();
 800311e:	f7ff fea5 	bl	8002e6c <startReceiving>
//	startSending();
}
 8003122:	bf00      	nop
 8003124:	3710      	adds	r7, #16
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop
 800312c:	20000a18 	.word	0x20000a18
 8003130:	20000a1c 	.word	0x20000a1c
 8003134:	20000a20 	.word	0x20000a20

08003138 <uart_transmit>:
 * This transmits data to PC
 * @param id	: CAN ID
 * @param bytes	: bytes to be send
 * @param len	: Length of data to be sent
 */
int uart_transmit(uint32_t id, uint8_t *bytes, uint16_t len) {
 8003138:	b580      	push	{r7, lr}
 800313a:	b086      	sub	sp, #24
 800313c:	af00      	add	r7, sp, #0
 800313e:	60f8      	str	r0, [r7, #12]
 8003140:	60b9      	str	r1, [r7, #8]
 8003142:	4613      	mov	r3, r2
 8003144:	80fb      	strh	r3, [r7, #6]
	for (int i = 0; i < len; i++)
 8003146:	2300      	movs	r3, #0
 8003148:	617b      	str	r3, [r7, #20]
 800314a:	e00b      	b.n	8003164 <uart_transmit+0x2c>
		send_data[i] = bytes[i];
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	68ba      	ldr	r2, [r7, #8]
 8003150:	4413      	add	r3, r2
 8003152:	7819      	ldrb	r1, [r3, #0]
 8003154:	4a19      	ldr	r2, [pc, #100]	; (80031bc <uart_transmit+0x84>)
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	4413      	add	r3, r2
 800315a:	460a      	mov	r2, r1
 800315c:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < len; i++)
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	3301      	adds	r3, #1
 8003162:	617b      	str	r3, [r7, #20]
 8003164:	88fb      	ldrh	r3, [r7, #6]
 8003166:	697a      	ldr	r2, [r7, #20]
 8003168:	429a      	cmp	r2, r3
 800316a:	dbef      	blt.n	800314c <uart_transmit+0x14>


	for(int i=0;i<TRANSMIT_TRY;i++){
 800316c:	2300      	movs	r3, #0
 800316e:	613b      	str	r3, [r7, #16]
 8003170:	e016      	b.n	80031a0 <uart_transmit+0x68>
		if(sendThread(id, len)){
 8003172:	88fb      	ldrh	r3, [r7, #6]
 8003174:	4619      	mov	r1, r3
 8003176:	68f8      	ldr	r0, [r7, #12]
 8003178:	f7ff feaa 	bl	8002ed0 <sendThread>
 800317c:	4603      	mov	r3, r0
 800317e:	2b00      	cmp	r3, #0
 8003180:	d006      	beq.n	8003190 <uart_transmit+0x58>
			console(CONSOLE_INFO, __func__, "DATA transmit success\n");
 8003182:	4a0f      	ldr	r2, [pc, #60]	; (80031c0 <uart_transmit+0x88>)
 8003184:	490f      	ldr	r1, [pc, #60]	; (80031c4 <uart_transmit+0x8c>)
 8003186:	2001      	movs	r0, #1
 8003188:	f7ff fdd0 	bl	8002d2c <console>
			return 1;
 800318c:	2301      	movs	r3, #1
 800318e:	e011      	b.n	80031b4 <uart_transmit+0x7c>
		}
		console(CONSOLE_WARNING, __func__, "DATA transmit failed and retrying...\n");
 8003190:	4a0d      	ldr	r2, [pc, #52]	; (80031c8 <uart_transmit+0x90>)
 8003192:	490c      	ldr	r1, [pc, #48]	; (80031c4 <uart_transmit+0x8c>)
 8003194:	2002      	movs	r0, #2
 8003196:	f7ff fdc9 	bl	8002d2c <console>
	for(int i=0;i<TRANSMIT_TRY;i++){
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	3301      	adds	r3, #1
 800319e:	613b      	str	r3, [r7, #16]
 80031a0:	2203      	movs	r2, #3
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	4293      	cmp	r3, r2
 80031a6:	dbe4      	blt.n	8003172 <uart_transmit+0x3a>
	}
	console(CONSOLE_ERROR, __func__, "DATA transmit failed\n");
 80031a8:	4a08      	ldr	r2, [pc, #32]	; (80031cc <uart_transmit+0x94>)
 80031aa:	4906      	ldr	r1, [pc, #24]	; (80031c4 <uart_transmit+0x8c>)
 80031ac:	2000      	movs	r0, #0
 80031ae:	f7ff fdbd 	bl	8002d2c <console>
	return 0;
 80031b2:	2300      	movs	r3, #0
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	3718      	adds	r7, #24
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}
 80031bc:	20001238 	.word	0x20001238
 80031c0:	08004e08 	.word	0x08004e08
 80031c4:	08004f0c 	.word	0x08004f0c
 80031c8:	08004e20 	.word	0x08004e20
 80031cc:	08004e48 	.word	0x08004e48

080031d0 <uart_loop>:

/**
 * This is uart loop
 *
 */
void uart_loop() {
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b082      	sub	sp, #8
 80031d4:	af00      	add	r7, sp, #0
	uint8_t is_timeout = (HAL_GetTick() - time_elapse) > RECEIVE_TIMEOUT;
 80031d6:	f7fd faf3 	bl	80007c0 <HAL_GetTick>
 80031da:	4602      	mov	r2, r0
 80031dc:	4b18      	ldr	r3, [pc, #96]	; (8003240 <uart_loop+0x70>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	1ad3      	subs	r3, r2, r3
 80031e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80031e6:	4293      	cmp	r3, r2
 80031e8:	bf8c      	ite	hi
 80031ea:	2301      	movhi	r3, #1
 80031ec:	2300      	movls	r3, #0
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	71fb      	strb	r3, [r7, #7]
	if (is_timeout && !is_in_receiveThread && rec_track != START) {
 80031f2:	79fb      	ldrb	r3, [r7, #7]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d010      	beq.n	800321a <uart_loop+0x4a>
 80031f8:	4b12      	ldr	r3, [pc, #72]	; (8003244 <uart_loop+0x74>)
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d10c      	bne.n	800321a <uart_loop+0x4a>
 8003200:	4b11      	ldr	r3, [pc, #68]	; (8003248 <uart_loop+0x78>)
 8003202:	781b      	ldrb	r3, [r3, #0]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d008      	beq.n	800321a <uart_loop+0x4a>
		console(CONSOLE_ERROR, __func__, "receiveThread timeout %d ms\n",
 8003208:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800320c:	4a0f      	ldr	r2, [pc, #60]	; (800324c <uart_loop+0x7c>)
 800320e:	4910      	ldr	r1, [pc, #64]	; (8003250 <uart_loop+0x80>)
 8003210:	2000      	movs	r0, #0
 8003212:	f7ff fd8b 	bl	8002d2c <console>
				RECEIVE_TIMEOUT);
		startReceiving();
 8003216:	f7ff fe29 	bl	8002e6c <startReceiving>
	}

	if (received) {
 800321a:	4b0e      	ldr	r3, [pc, #56]	; (8003254 <uart_loop+0x84>)
 800321c:	781b      	ldrb	r3, [r3, #0]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d00a      	beq.n	8003238 <uart_loop+0x68>
		receiveCallback(received_id, rec_data, received_len);
 8003222:	4b0d      	ldr	r3, [pc, #52]	; (8003258 <uart_loop+0x88>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a0d      	ldr	r2, [pc, #52]	; (800325c <uart_loop+0x8c>)
 8003228:	6810      	ldr	r0, [r2, #0]
 800322a:	4a0d      	ldr	r2, [pc, #52]	; (8003260 <uart_loop+0x90>)
 800322c:	8812      	ldrh	r2, [r2, #0]
 800322e:	490d      	ldr	r1, [pc, #52]	; (8003264 <uart_loop+0x94>)
 8003230:	4798      	blx	r3
		received = 0;
 8003232:	4b08      	ldr	r3, [pc, #32]	; (8003254 <uart_loop+0x84>)
 8003234:	2200      	movs	r2, #0
 8003236:	701a      	strb	r2, [r3, #0]
	}
}
 8003238:	bf00      	nop
 800323a:	3708      	adds	r7, #8
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}
 8003240:	20001228 	.word	0x20001228
 8003244:	20001236 	.word	0x20001236
 8003248:	20001225 	.word	0x20001225
 800324c:	08004e60 	.word	0x08004e60
 8003250:	08004f1c 	.word	0x08004f1c
 8003254:	2000122c 	.word	0x2000122c
 8003258:	20000a20 	.word	0x20000a20
 800325c:	20001230 	.word	0x20001230
 8003260:	20001234 	.word	0x20001234
 8003264:	20000a24 	.word	0x20000a24

08003268 <__errno>:
 8003268:	4b01      	ldr	r3, [pc, #4]	; (8003270 <__errno+0x8>)
 800326a:	6818      	ldr	r0, [r3, #0]
 800326c:	4770      	bx	lr
 800326e:	bf00      	nop
 8003270:	20000020 	.word	0x20000020

08003274 <__libc_init_array>:
 8003274:	b570      	push	{r4, r5, r6, lr}
 8003276:	2600      	movs	r6, #0
 8003278:	4d0c      	ldr	r5, [pc, #48]	; (80032ac <__libc_init_array+0x38>)
 800327a:	4c0d      	ldr	r4, [pc, #52]	; (80032b0 <__libc_init_array+0x3c>)
 800327c:	1b64      	subs	r4, r4, r5
 800327e:	10a4      	asrs	r4, r4, #2
 8003280:	42a6      	cmp	r6, r4
 8003282:	d109      	bne.n	8003298 <__libc_init_array+0x24>
 8003284:	f000 ffcc 	bl	8004220 <_init>
 8003288:	2600      	movs	r6, #0
 800328a:	4d0a      	ldr	r5, [pc, #40]	; (80032b4 <__libc_init_array+0x40>)
 800328c:	4c0a      	ldr	r4, [pc, #40]	; (80032b8 <__libc_init_array+0x44>)
 800328e:	1b64      	subs	r4, r4, r5
 8003290:	10a4      	asrs	r4, r4, #2
 8003292:	42a6      	cmp	r6, r4
 8003294:	d105      	bne.n	80032a2 <__libc_init_array+0x2e>
 8003296:	bd70      	pop	{r4, r5, r6, pc}
 8003298:	f855 3b04 	ldr.w	r3, [r5], #4
 800329c:	4798      	blx	r3
 800329e:	3601      	adds	r6, #1
 80032a0:	e7ee      	b.n	8003280 <__libc_init_array+0xc>
 80032a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80032a6:	4798      	blx	r3
 80032a8:	3601      	adds	r6, #1
 80032aa:	e7f2      	b.n	8003292 <__libc_init_array+0x1e>
 80032ac:	08004fc0 	.word	0x08004fc0
 80032b0:	08004fc0 	.word	0x08004fc0
 80032b4:	08004fc0 	.word	0x08004fc0
 80032b8:	08004fc4 	.word	0x08004fc4

080032bc <memset>:
 80032bc:	4603      	mov	r3, r0
 80032be:	4402      	add	r2, r0
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d100      	bne.n	80032c6 <memset+0xa>
 80032c4:	4770      	bx	lr
 80032c6:	f803 1b01 	strb.w	r1, [r3], #1
 80032ca:	e7f9      	b.n	80032c0 <memset+0x4>

080032cc <iprintf>:
 80032cc:	b40f      	push	{r0, r1, r2, r3}
 80032ce:	4b0a      	ldr	r3, [pc, #40]	; (80032f8 <iprintf+0x2c>)
 80032d0:	b513      	push	{r0, r1, r4, lr}
 80032d2:	681c      	ldr	r4, [r3, #0]
 80032d4:	b124      	cbz	r4, 80032e0 <iprintf+0x14>
 80032d6:	69a3      	ldr	r3, [r4, #24]
 80032d8:	b913      	cbnz	r3, 80032e0 <iprintf+0x14>
 80032da:	4620      	mov	r0, r4
 80032dc:	f000 f87c 	bl	80033d8 <__sinit>
 80032e0:	ab05      	add	r3, sp, #20
 80032e2:	4620      	mov	r0, r4
 80032e4:	9a04      	ldr	r2, [sp, #16]
 80032e6:	68a1      	ldr	r1, [r4, #8]
 80032e8:	9301      	str	r3, [sp, #4]
 80032ea:	f000 f9d1 	bl	8003690 <_vfiprintf_r>
 80032ee:	b002      	add	sp, #8
 80032f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80032f4:	b004      	add	sp, #16
 80032f6:	4770      	bx	lr
 80032f8:	20000020 	.word	0x20000020

080032fc <viprintf>:
 80032fc:	4b09      	ldr	r3, [pc, #36]	; (8003324 <viprintf+0x28>)
 80032fe:	b570      	push	{r4, r5, r6, lr}
 8003300:	681c      	ldr	r4, [r3, #0]
 8003302:	4605      	mov	r5, r0
 8003304:	460e      	mov	r6, r1
 8003306:	b124      	cbz	r4, 8003312 <viprintf+0x16>
 8003308:	69a3      	ldr	r3, [r4, #24]
 800330a:	b913      	cbnz	r3, 8003312 <viprintf+0x16>
 800330c:	4620      	mov	r0, r4
 800330e:	f000 f863 	bl	80033d8 <__sinit>
 8003312:	4633      	mov	r3, r6
 8003314:	462a      	mov	r2, r5
 8003316:	4620      	mov	r0, r4
 8003318:	68a1      	ldr	r1, [r4, #8]
 800331a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800331e:	f000 b9b7 	b.w	8003690 <_vfiprintf_r>
 8003322:	bf00      	nop
 8003324:	20000020 	.word	0x20000020

08003328 <std>:
 8003328:	2300      	movs	r3, #0
 800332a:	b510      	push	{r4, lr}
 800332c:	4604      	mov	r4, r0
 800332e:	e9c0 3300 	strd	r3, r3, [r0]
 8003332:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003336:	6083      	str	r3, [r0, #8]
 8003338:	8181      	strh	r1, [r0, #12]
 800333a:	6643      	str	r3, [r0, #100]	; 0x64
 800333c:	81c2      	strh	r2, [r0, #14]
 800333e:	6183      	str	r3, [r0, #24]
 8003340:	4619      	mov	r1, r3
 8003342:	2208      	movs	r2, #8
 8003344:	305c      	adds	r0, #92	; 0x5c
 8003346:	f7ff ffb9 	bl	80032bc <memset>
 800334a:	4b05      	ldr	r3, [pc, #20]	; (8003360 <std+0x38>)
 800334c:	6224      	str	r4, [r4, #32]
 800334e:	6263      	str	r3, [r4, #36]	; 0x24
 8003350:	4b04      	ldr	r3, [pc, #16]	; (8003364 <std+0x3c>)
 8003352:	62a3      	str	r3, [r4, #40]	; 0x28
 8003354:	4b04      	ldr	r3, [pc, #16]	; (8003368 <std+0x40>)
 8003356:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003358:	4b04      	ldr	r3, [pc, #16]	; (800336c <std+0x44>)
 800335a:	6323      	str	r3, [r4, #48]	; 0x30
 800335c:	bd10      	pop	{r4, pc}
 800335e:	bf00      	nop
 8003360:	08003c3d 	.word	0x08003c3d
 8003364:	08003c5f 	.word	0x08003c5f
 8003368:	08003c97 	.word	0x08003c97
 800336c:	08003cbb 	.word	0x08003cbb

08003370 <_cleanup_r>:
 8003370:	4901      	ldr	r1, [pc, #4]	; (8003378 <_cleanup_r+0x8>)
 8003372:	f000 b8af 	b.w	80034d4 <_fwalk_reent>
 8003376:	bf00      	nop
 8003378:	08003f8d 	.word	0x08003f8d

0800337c <__sfmoreglue>:
 800337c:	2268      	movs	r2, #104	; 0x68
 800337e:	b570      	push	{r4, r5, r6, lr}
 8003380:	1e4d      	subs	r5, r1, #1
 8003382:	4355      	muls	r5, r2
 8003384:	460e      	mov	r6, r1
 8003386:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800338a:	f000 f8e5 	bl	8003558 <_malloc_r>
 800338e:	4604      	mov	r4, r0
 8003390:	b140      	cbz	r0, 80033a4 <__sfmoreglue+0x28>
 8003392:	2100      	movs	r1, #0
 8003394:	e9c0 1600 	strd	r1, r6, [r0]
 8003398:	300c      	adds	r0, #12
 800339a:	60a0      	str	r0, [r4, #8]
 800339c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80033a0:	f7ff ff8c 	bl	80032bc <memset>
 80033a4:	4620      	mov	r0, r4
 80033a6:	bd70      	pop	{r4, r5, r6, pc}

080033a8 <__sfp_lock_acquire>:
 80033a8:	4801      	ldr	r0, [pc, #4]	; (80033b0 <__sfp_lock_acquire+0x8>)
 80033aa:	f000 b8b3 	b.w	8003514 <__retarget_lock_acquire_recursive>
 80033ae:	bf00      	nop
 80033b0:	200012ad 	.word	0x200012ad

080033b4 <__sfp_lock_release>:
 80033b4:	4801      	ldr	r0, [pc, #4]	; (80033bc <__sfp_lock_release+0x8>)
 80033b6:	f000 b8ae 	b.w	8003516 <__retarget_lock_release_recursive>
 80033ba:	bf00      	nop
 80033bc:	200012ad 	.word	0x200012ad

080033c0 <__sinit_lock_acquire>:
 80033c0:	4801      	ldr	r0, [pc, #4]	; (80033c8 <__sinit_lock_acquire+0x8>)
 80033c2:	f000 b8a7 	b.w	8003514 <__retarget_lock_acquire_recursive>
 80033c6:	bf00      	nop
 80033c8:	200012ae 	.word	0x200012ae

080033cc <__sinit_lock_release>:
 80033cc:	4801      	ldr	r0, [pc, #4]	; (80033d4 <__sinit_lock_release+0x8>)
 80033ce:	f000 b8a2 	b.w	8003516 <__retarget_lock_release_recursive>
 80033d2:	bf00      	nop
 80033d4:	200012ae 	.word	0x200012ae

080033d8 <__sinit>:
 80033d8:	b510      	push	{r4, lr}
 80033da:	4604      	mov	r4, r0
 80033dc:	f7ff fff0 	bl	80033c0 <__sinit_lock_acquire>
 80033e0:	69a3      	ldr	r3, [r4, #24]
 80033e2:	b11b      	cbz	r3, 80033ec <__sinit+0x14>
 80033e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80033e8:	f7ff bff0 	b.w	80033cc <__sinit_lock_release>
 80033ec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80033f0:	6523      	str	r3, [r4, #80]	; 0x50
 80033f2:	4b13      	ldr	r3, [pc, #76]	; (8003440 <__sinit+0x68>)
 80033f4:	4a13      	ldr	r2, [pc, #76]	; (8003444 <__sinit+0x6c>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	62a2      	str	r2, [r4, #40]	; 0x28
 80033fa:	42a3      	cmp	r3, r4
 80033fc:	bf08      	it	eq
 80033fe:	2301      	moveq	r3, #1
 8003400:	4620      	mov	r0, r4
 8003402:	bf08      	it	eq
 8003404:	61a3      	streq	r3, [r4, #24]
 8003406:	f000 f81f 	bl	8003448 <__sfp>
 800340a:	6060      	str	r0, [r4, #4]
 800340c:	4620      	mov	r0, r4
 800340e:	f000 f81b 	bl	8003448 <__sfp>
 8003412:	60a0      	str	r0, [r4, #8]
 8003414:	4620      	mov	r0, r4
 8003416:	f000 f817 	bl	8003448 <__sfp>
 800341a:	2200      	movs	r2, #0
 800341c:	2104      	movs	r1, #4
 800341e:	60e0      	str	r0, [r4, #12]
 8003420:	6860      	ldr	r0, [r4, #4]
 8003422:	f7ff ff81 	bl	8003328 <std>
 8003426:	2201      	movs	r2, #1
 8003428:	2109      	movs	r1, #9
 800342a:	68a0      	ldr	r0, [r4, #8]
 800342c:	f7ff ff7c 	bl	8003328 <std>
 8003430:	2202      	movs	r2, #2
 8003432:	2112      	movs	r1, #18
 8003434:	68e0      	ldr	r0, [r4, #12]
 8003436:	f7ff ff77 	bl	8003328 <std>
 800343a:	2301      	movs	r3, #1
 800343c:	61a3      	str	r3, [r4, #24]
 800343e:	e7d1      	b.n	80033e4 <__sinit+0xc>
 8003440:	08004f28 	.word	0x08004f28
 8003444:	08003371 	.word	0x08003371

08003448 <__sfp>:
 8003448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800344a:	4607      	mov	r7, r0
 800344c:	f7ff ffac 	bl	80033a8 <__sfp_lock_acquire>
 8003450:	4b1e      	ldr	r3, [pc, #120]	; (80034cc <__sfp+0x84>)
 8003452:	681e      	ldr	r6, [r3, #0]
 8003454:	69b3      	ldr	r3, [r6, #24]
 8003456:	b913      	cbnz	r3, 800345e <__sfp+0x16>
 8003458:	4630      	mov	r0, r6
 800345a:	f7ff ffbd 	bl	80033d8 <__sinit>
 800345e:	3648      	adds	r6, #72	; 0x48
 8003460:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003464:	3b01      	subs	r3, #1
 8003466:	d503      	bpl.n	8003470 <__sfp+0x28>
 8003468:	6833      	ldr	r3, [r6, #0]
 800346a:	b30b      	cbz	r3, 80034b0 <__sfp+0x68>
 800346c:	6836      	ldr	r6, [r6, #0]
 800346e:	e7f7      	b.n	8003460 <__sfp+0x18>
 8003470:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003474:	b9d5      	cbnz	r5, 80034ac <__sfp+0x64>
 8003476:	4b16      	ldr	r3, [pc, #88]	; (80034d0 <__sfp+0x88>)
 8003478:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800347c:	60e3      	str	r3, [r4, #12]
 800347e:	6665      	str	r5, [r4, #100]	; 0x64
 8003480:	f000 f847 	bl	8003512 <__retarget_lock_init_recursive>
 8003484:	f7ff ff96 	bl	80033b4 <__sfp_lock_release>
 8003488:	2208      	movs	r2, #8
 800348a:	4629      	mov	r1, r5
 800348c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003490:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003494:	6025      	str	r5, [r4, #0]
 8003496:	61a5      	str	r5, [r4, #24]
 8003498:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800349c:	f7ff ff0e 	bl	80032bc <memset>
 80034a0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80034a4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80034a8:	4620      	mov	r0, r4
 80034aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80034ac:	3468      	adds	r4, #104	; 0x68
 80034ae:	e7d9      	b.n	8003464 <__sfp+0x1c>
 80034b0:	2104      	movs	r1, #4
 80034b2:	4638      	mov	r0, r7
 80034b4:	f7ff ff62 	bl	800337c <__sfmoreglue>
 80034b8:	4604      	mov	r4, r0
 80034ba:	6030      	str	r0, [r6, #0]
 80034bc:	2800      	cmp	r0, #0
 80034be:	d1d5      	bne.n	800346c <__sfp+0x24>
 80034c0:	f7ff ff78 	bl	80033b4 <__sfp_lock_release>
 80034c4:	230c      	movs	r3, #12
 80034c6:	603b      	str	r3, [r7, #0]
 80034c8:	e7ee      	b.n	80034a8 <__sfp+0x60>
 80034ca:	bf00      	nop
 80034cc:	08004f28 	.word	0x08004f28
 80034d0:	ffff0001 	.word	0xffff0001

080034d4 <_fwalk_reent>:
 80034d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80034d8:	4606      	mov	r6, r0
 80034da:	4688      	mov	r8, r1
 80034dc:	2700      	movs	r7, #0
 80034de:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80034e2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80034e6:	f1b9 0901 	subs.w	r9, r9, #1
 80034ea:	d505      	bpl.n	80034f8 <_fwalk_reent+0x24>
 80034ec:	6824      	ldr	r4, [r4, #0]
 80034ee:	2c00      	cmp	r4, #0
 80034f0:	d1f7      	bne.n	80034e2 <_fwalk_reent+0xe>
 80034f2:	4638      	mov	r0, r7
 80034f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80034f8:	89ab      	ldrh	r3, [r5, #12]
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d907      	bls.n	800350e <_fwalk_reent+0x3a>
 80034fe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003502:	3301      	adds	r3, #1
 8003504:	d003      	beq.n	800350e <_fwalk_reent+0x3a>
 8003506:	4629      	mov	r1, r5
 8003508:	4630      	mov	r0, r6
 800350a:	47c0      	blx	r8
 800350c:	4307      	orrs	r7, r0
 800350e:	3568      	adds	r5, #104	; 0x68
 8003510:	e7e9      	b.n	80034e6 <_fwalk_reent+0x12>

08003512 <__retarget_lock_init_recursive>:
 8003512:	4770      	bx	lr

08003514 <__retarget_lock_acquire_recursive>:
 8003514:	4770      	bx	lr

08003516 <__retarget_lock_release_recursive>:
 8003516:	4770      	bx	lr

08003518 <sbrk_aligned>:
 8003518:	b570      	push	{r4, r5, r6, lr}
 800351a:	4e0e      	ldr	r6, [pc, #56]	; (8003554 <sbrk_aligned+0x3c>)
 800351c:	460c      	mov	r4, r1
 800351e:	6831      	ldr	r1, [r6, #0]
 8003520:	4605      	mov	r5, r0
 8003522:	b911      	cbnz	r1, 800352a <sbrk_aligned+0x12>
 8003524:	f000 fb7a 	bl	8003c1c <_sbrk_r>
 8003528:	6030      	str	r0, [r6, #0]
 800352a:	4621      	mov	r1, r4
 800352c:	4628      	mov	r0, r5
 800352e:	f000 fb75 	bl	8003c1c <_sbrk_r>
 8003532:	1c43      	adds	r3, r0, #1
 8003534:	d00a      	beq.n	800354c <sbrk_aligned+0x34>
 8003536:	1cc4      	adds	r4, r0, #3
 8003538:	f024 0403 	bic.w	r4, r4, #3
 800353c:	42a0      	cmp	r0, r4
 800353e:	d007      	beq.n	8003550 <sbrk_aligned+0x38>
 8003540:	1a21      	subs	r1, r4, r0
 8003542:	4628      	mov	r0, r5
 8003544:	f000 fb6a 	bl	8003c1c <_sbrk_r>
 8003548:	3001      	adds	r0, #1
 800354a:	d101      	bne.n	8003550 <sbrk_aligned+0x38>
 800354c:	f04f 34ff 	mov.w	r4, #4294967295
 8003550:	4620      	mov	r0, r4
 8003552:	bd70      	pop	{r4, r5, r6, pc}
 8003554:	200012b4 	.word	0x200012b4

08003558 <_malloc_r>:
 8003558:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800355c:	1ccd      	adds	r5, r1, #3
 800355e:	f025 0503 	bic.w	r5, r5, #3
 8003562:	3508      	adds	r5, #8
 8003564:	2d0c      	cmp	r5, #12
 8003566:	bf38      	it	cc
 8003568:	250c      	movcc	r5, #12
 800356a:	2d00      	cmp	r5, #0
 800356c:	4607      	mov	r7, r0
 800356e:	db01      	blt.n	8003574 <_malloc_r+0x1c>
 8003570:	42a9      	cmp	r1, r5
 8003572:	d905      	bls.n	8003580 <_malloc_r+0x28>
 8003574:	230c      	movs	r3, #12
 8003576:	2600      	movs	r6, #0
 8003578:	603b      	str	r3, [r7, #0]
 800357a:	4630      	mov	r0, r6
 800357c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003580:	4e2e      	ldr	r6, [pc, #184]	; (800363c <_malloc_r+0xe4>)
 8003582:	f000 fdc5 	bl	8004110 <__malloc_lock>
 8003586:	6833      	ldr	r3, [r6, #0]
 8003588:	461c      	mov	r4, r3
 800358a:	bb34      	cbnz	r4, 80035da <_malloc_r+0x82>
 800358c:	4629      	mov	r1, r5
 800358e:	4638      	mov	r0, r7
 8003590:	f7ff ffc2 	bl	8003518 <sbrk_aligned>
 8003594:	1c43      	adds	r3, r0, #1
 8003596:	4604      	mov	r4, r0
 8003598:	d14d      	bne.n	8003636 <_malloc_r+0xde>
 800359a:	6834      	ldr	r4, [r6, #0]
 800359c:	4626      	mov	r6, r4
 800359e:	2e00      	cmp	r6, #0
 80035a0:	d140      	bne.n	8003624 <_malloc_r+0xcc>
 80035a2:	6823      	ldr	r3, [r4, #0]
 80035a4:	4631      	mov	r1, r6
 80035a6:	4638      	mov	r0, r7
 80035a8:	eb04 0803 	add.w	r8, r4, r3
 80035ac:	f000 fb36 	bl	8003c1c <_sbrk_r>
 80035b0:	4580      	cmp	r8, r0
 80035b2:	d13a      	bne.n	800362a <_malloc_r+0xd2>
 80035b4:	6821      	ldr	r1, [r4, #0]
 80035b6:	3503      	adds	r5, #3
 80035b8:	1a6d      	subs	r5, r5, r1
 80035ba:	f025 0503 	bic.w	r5, r5, #3
 80035be:	3508      	adds	r5, #8
 80035c0:	2d0c      	cmp	r5, #12
 80035c2:	bf38      	it	cc
 80035c4:	250c      	movcc	r5, #12
 80035c6:	4638      	mov	r0, r7
 80035c8:	4629      	mov	r1, r5
 80035ca:	f7ff ffa5 	bl	8003518 <sbrk_aligned>
 80035ce:	3001      	adds	r0, #1
 80035d0:	d02b      	beq.n	800362a <_malloc_r+0xd2>
 80035d2:	6823      	ldr	r3, [r4, #0]
 80035d4:	442b      	add	r3, r5
 80035d6:	6023      	str	r3, [r4, #0]
 80035d8:	e00e      	b.n	80035f8 <_malloc_r+0xa0>
 80035da:	6822      	ldr	r2, [r4, #0]
 80035dc:	1b52      	subs	r2, r2, r5
 80035de:	d41e      	bmi.n	800361e <_malloc_r+0xc6>
 80035e0:	2a0b      	cmp	r2, #11
 80035e2:	d916      	bls.n	8003612 <_malloc_r+0xba>
 80035e4:	1961      	adds	r1, r4, r5
 80035e6:	42a3      	cmp	r3, r4
 80035e8:	6025      	str	r5, [r4, #0]
 80035ea:	bf18      	it	ne
 80035ec:	6059      	strne	r1, [r3, #4]
 80035ee:	6863      	ldr	r3, [r4, #4]
 80035f0:	bf08      	it	eq
 80035f2:	6031      	streq	r1, [r6, #0]
 80035f4:	5162      	str	r2, [r4, r5]
 80035f6:	604b      	str	r3, [r1, #4]
 80035f8:	4638      	mov	r0, r7
 80035fa:	f104 060b 	add.w	r6, r4, #11
 80035fe:	f000 fd8d 	bl	800411c <__malloc_unlock>
 8003602:	f026 0607 	bic.w	r6, r6, #7
 8003606:	1d23      	adds	r3, r4, #4
 8003608:	1af2      	subs	r2, r6, r3
 800360a:	d0b6      	beq.n	800357a <_malloc_r+0x22>
 800360c:	1b9b      	subs	r3, r3, r6
 800360e:	50a3      	str	r3, [r4, r2]
 8003610:	e7b3      	b.n	800357a <_malloc_r+0x22>
 8003612:	6862      	ldr	r2, [r4, #4]
 8003614:	42a3      	cmp	r3, r4
 8003616:	bf0c      	ite	eq
 8003618:	6032      	streq	r2, [r6, #0]
 800361a:	605a      	strne	r2, [r3, #4]
 800361c:	e7ec      	b.n	80035f8 <_malloc_r+0xa0>
 800361e:	4623      	mov	r3, r4
 8003620:	6864      	ldr	r4, [r4, #4]
 8003622:	e7b2      	b.n	800358a <_malloc_r+0x32>
 8003624:	4634      	mov	r4, r6
 8003626:	6876      	ldr	r6, [r6, #4]
 8003628:	e7b9      	b.n	800359e <_malloc_r+0x46>
 800362a:	230c      	movs	r3, #12
 800362c:	4638      	mov	r0, r7
 800362e:	603b      	str	r3, [r7, #0]
 8003630:	f000 fd74 	bl	800411c <__malloc_unlock>
 8003634:	e7a1      	b.n	800357a <_malloc_r+0x22>
 8003636:	6025      	str	r5, [r4, #0]
 8003638:	e7de      	b.n	80035f8 <_malloc_r+0xa0>
 800363a:	bf00      	nop
 800363c:	200012b0 	.word	0x200012b0

08003640 <__sfputc_r>:
 8003640:	6893      	ldr	r3, [r2, #8]
 8003642:	b410      	push	{r4}
 8003644:	3b01      	subs	r3, #1
 8003646:	2b00      	cmp	r3, #0
 8003648:	6093      	str	r3, [r2, #8]
 800364a:	da07      	bge.n	800365c <__sfputc_r+0x1c>
 800364c:	6994      	ldr	r4, [r2, #24]
 800364e:	42a3      	cmp	r3, r4
 8003650:	db01      	blt.n	8003656 <__sfputc_r+0x16>
 8003652:	290a      	cmp	r1, #10
 8003654:	d102      	bne.n	800365c <__sfputc_r+0x1c>
 8003656:	bc10      	pop	{r4}
 8003658:	f000 bb34 	b.w	8003cc4 <__swbuf_r>
 800365c:	6813      	ldr	r3, [r2, #0]
 800365e:	1c58      	adds	r0, r3, #1
 8003660:	6010      	str	r0, [r2, #0]
 8003662:	7019      	strb	r1, [r3, #0]
 8003664:	4608      	mov	r0, r1
 8003666:	bc10      	pop	{r4}
 8003668:	4770      	bx	lr

0800366a <__sfputs_r>:
 800366a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800366c:	4606      	mov	r6, r0
 800366e:	460f      	mov	r7, r1
 8003670:	4614      	mov	r4, r2
 8003672:	18d5      	adds	r5, r2, r3
 8003674:	42ac      	cmp	r4, r5
 8003676:	d101      	bne.n	800367c <__sfputs_r+0x12>
 8003678:	2000      	movs	r0, #0
 800367a:	e007      	b.n	800368c <__sfputs_r+0x22>
 800367c:	463a      	mov	r2, r7
 800367e:	4630      	mov	r0, r6
 8003680:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003684:	f7ff ffdc 	bl	8003640 <__sfputc_r>
 8003688:	1c43      	adds	r3, r0, #1
 800368a:	d1f3      	bne.n	8003674 <__sfputs_r+0xa>
 800368c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003690 <_vfiprintf_r>:
 8003690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003694:	460d      	mov	r5, r1
 8003696:	4614      	mov	r4, r2
 8003698:	4698      	mov	r8, r3
 800369a:	4606      	mov	r6, r0
 800369c:	b09d      	sub	sp, #116	; 0x74
 800369e:	b118      	cbz	r0, 80036a8 <_vfiprintf_r+0x18>
 80036a0:	6983      	ldr	r3, [r0, #24]
 80036a2:	b90b      	cbnz	r3, 80036a8 <_vfiprintf_r+0x18>
 80036a4:	f7ff fe98 	bl	80033d8 <__sinit>
 80036a8:	4b89      	ldr	r3, [pc, #548]	; (80038d0 <_vfiprintf_r+0x240>)
 80036aa:	429d      	cmp	r5, r3
 80036ac:	d11b      	bne.n	80036e6 <_vfiprintf_r+0x56>
 80036ae:	6875      	ldr	r5, [r6, #4]
 80036b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80036b2:	07d9      	lsls	r1, r3, #31
 80036b4:	d405      	bmi.n	80036c2 <_vfiprintf_r+0x32>
 80036b6:	89ab      	ldrh	r3, [r5, #12]
 80036b8:	059a      	lsls	r2, r3, #22
 80036ba:	d402      	bmi.n	80036c2 <_vfiprintf_r+0x32>
 80036bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80036be:	f7ff ff29 	bl	8003514 <__retarget_lock_acquire_recursive>
 80036c2:	89ab      	ldrh	r3, [r5, #12]
 80036c4:	071b      	lsls	r3, r3, #28
 80036c6:	d501      	bpl.n	80036cc <_vfiprintf_r+0x3c>
 80036c8:	692b      	ldr	r3, [r5, #16]
 80036ca:	b9eb      	cbnz	r3, 8003708 <_vfiprintf_r+0x78>
 80036cc:	4629      	mov	r1, r5
 80036ce:	4630      	mov	r0, r6
 80036d0:	f000 fb5c 	bl	8003d8c <__swsetup_r>
 80036d4:	b1c0      	cbz	r0, 8003708 <_vfiprintf_r+0x78>
 80036d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80036d8:	07dc      	lsls	r4, r3, #31
 80036da:	d50e      	bpl.n	80036fa <_vfiprintf_r+0x6a>
 80036dc:	f04f 30ff 	mov.w	r0, #4294967295
 80036e0:	b01d      	add	sp, #116	; 0x74
 80036e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80036e6:	4b7b      	ldr	r3, [pc, #492]	; (80038d4 <_vfiprintf_r+0x244>)
 80036e8:	429d      	cmp	r5, r3
 80036ea:	d101      	bne.n	80036f0 <_vfiprintf_r+0x60>
 80036ec:	68b5      	ldr	r5, [r6, #8]
 80036ee:	e7df      	b.n	80036b0 <_vfiprintf_r+0x20>
 80036f0:	4b79      	ldr	r3, [pc, #484]	; (80038d8 <_vfiprintf_r+0x248>)
 80036f2:	429d      	cmp	r5, r3
 80036f4:	bf08      	it	eq
 80036f6:	68f5      	ldreq	r5, [r6, #12]
 80036f8:	e7da      	b.n	80036b0 <_vfiprintf_r+0x20>
 80036fa:	89ab      	ldrh	r3, [r5, #12]
 80036fc:	0598      	lsls	r0, r3, #22
 80036fe:	d4ed      	bmi.n	80036dc <_vfiprintf_r+0x4c>
 8003700:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003702:	f7ff ff08 	bl	8003516 <__retarget_lock_release_recursive>
 8003706:	e7e9      	b.n	80036dc <_vfiprintf_r+0x4c>
 8003708:	2300      	movs	r3, #0
 800370a:	9309      	str	r3, [sp, #36]	; 0x24
 800370c:	2320      	movs	r3, #32
 800370e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003712:	2330      	movs	r3, #48	; 0x30
 8003714:	f04f 0901 	mov.w	r9, #1
 8003718:	f8cd 800c 	str.w	r8, [sp, #12]
 800371c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80038dc <_vfiprintf_r+0x24c>
 8003720:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003724:	4623      	mov	r3, r4
 8003726:	469a      	mov	sl, r3
 8003728:	f813 2b01 	ldrb.w	r2, [r3], #1
 800372c:	b10a      	cbz	r2, 8003732 <_vfiprintf_r+0xa2>
 800372e:	2a25      	cmp	r2, #37	; 0x25
 8003730:	d1f9      	bne.n	8003726 <_vfiprintf_r+0x96>
 8003732:	ebba 0b04 	subs.w	fp, sl, r4
 8003736:	d00b      	beq.n	8003750 <_vfiprintf_r+0xc0>
 8003738:	465b      	mov	r3, fp
 800373a:	4622      	mov	r2, r4
 800373c:	4629      	mov	r1, r5
 800373e:	4630      	mov	r0, r6
 8003740:	f7ff ff93 	bl	800366a <__sfputs_r>
 8003744:	3001      	adds	r0, #1
 8003746:	f000 80aa 	beq.w	800389e <_vfiprintf_r+0x20e>
 800374a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800374c:	445a      	add	r2, fp
 800374e:	9209      	str	r2, [sp, #36]	; 0x24
 8003750:	f89a 3000 	ldrb.w	r3, [sl]
 8003754:	2b00      	cmp	r3, #0
 8003756:	f000 80a2 	beq.w	800389e <_vfiprintf_r+0x20e>
 800375a:	2300      	movs	r3, #0
 800375c:	f04f 32ff 	mov.w	r2, #4294967295
 8003760:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003764:	f10a 0a01 	add.w	sl, sl, #1
 8003768:	9304      	str	r3, [sp, #16]
 800376a:	9307      	str	r3, [sp, #28]
 800376c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003770:	931a      	str	r3, [sp, #104]	; 0x68
 8003772:	4654      	mov	r4, sl
 8003774:	2205      	movs	r2, #5
 8003776:	f814 1b01 	ldrb.w	r1, [r4], #1
 800377a:	4858      	ldr	r0, [pc, #352]	; (80038dc <_vfiprintf_r+0x24c>)
 800377c:	f000 fcba 	bl	80040f4 <memchr>
 8003780:	9a04      	ldr	r2, [sp, #16]
 8003782:	b9d8      	cbnz	r0, 80037bc <_vfiprintf_r+0x12c>
 8003784:	06d1      	lsls	r1, r2, #27
 8003786:	bf44      	itt	mi
 8003788:	2320      	movmi	r3, #32
 800378a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800378e:	0713      	lsls	r3, r2, #28
 8003790:	bf44      	itt	mi
 8003792:	232b      	movmi	r3, #43	; 0x2b
 8003794:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003798:	f89a 3000 	ldrb.w	r3, [sl]
 800379c:	2b2a      	cmp	r3, #42	; 0x2a
 800379e:	d015      	beq.n	80037cc <_vfiprintf_r+0x13c>
 80037a0:	4654      	mov	r4, sl
 80037a2:	2000      	movs	r0, #0
 80037a4:	f04f 0c0a 	mov.w	ip, #10
 80037a8:	9a07      	ldr	r2, [sp, #28]
 80037aa:	4621      	mov	r1, r4
 80037ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 80037b0:	3b30      	subs	r3, #48	; 0x30
 80037b2:	2b09      	cmp	r3, #9
 80037b4:	d94e      	bls.n	8003854 <_vfiprintf_r+0x1c4>
 80037b6:	b1b0      	cbz	r0, 80037e6 <_vfiprintf_r+0x156>
 80037b8:	9207      	str	r2, [sp, #28]
 80037ba:	e014      	b.n	80037e6 <_vfiprintf_r+0x156>
 80037bc:	eba0 0308 	sub.w	r3, r0, r8
 80037c0:	fa09 f303 	lsl.w	r3, r9, r3
 80037c4:	4313      	orrs	r3, r2
 80037c6:	46a2      	mov	sl, r4
 80037c8:	9304      	str	r3, [sp, #16]
 80037ca:	e7d2      	b.n	8003772 <_vfiprintf_r+0xe2>
 80037cc:	9b03      	ldr	r3, [sp, #12]
 80037ce:	1d19      	adds	r1, r3, #4
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	9103      	str	r1, [sp, #12]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	bfbb      	ittet	lt
 80037d8:	425b      	neglt	r3, r3
 80037da:	f042 0202 	orrlt.w	r2, r2, #2
 80037de:	9307      	strge	r3, [sp, #28]
 80037e0:	9307      	strlt	r3, [sp, #28]
 80037e2:	bfb8      	it	lt
 80037e4:	9204      	strlt	r2, [sp, #16]
 80037e6:	7823      	ldrb	r3, [r4, #0]
 80037e8:	2b2e      	cmp	r3, #46	; 0x2e
 80037ea:	d10c      	bne.n	8003806 <_vfiprintf_r+0x176>
 80037ec:	7863      	ldrb	r3, [r4, #1]
 80037ee:	2b2a      	cmp	r3, #42	; 0x2a
 80037f0:	d135      	bne.n	800385e <_vfiprintf_r+0x1ce>
 80037f2:	9b03      	ldr	r3, [sp, #12]
 80037f4:	3402      	adds	r4, #2
 80037f6:	1d1a      	adds	r2, r3, #4
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	9203      	str	r2, [sp, #12]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	bfb8      	it	lt
 8003800:	f04f 33ff 	movlt.w	r3, #4294967295
 8003804:	9305      	str	r3, [sp, #20]
 8003806:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80038e0 <_vfiprintf_r+0x250>
 800380a:	2203      	movs	r2, #3
 800380c:	4650      	mov	r0, sl
 800380e:	7821      	ldrb	r1, [r4, #0]
 8003810:	f000 fc70 	bl	80040f4 <memchr>
 8003814:	b140      	cbz	r0, 8003828 <_vfiprintf_r+0x198>
 8003816:	2340      	movs	r3, #64	; 0x40
 8003818:	eba0 000a 	sub.w	r0, r0, sl
 800381c:	fa03 f000 	lsl.w	r0, r3, r0
 8003820:	9b04      	ldr	r3, [sp, #16]
 8003822:	3401      	adds	r4, #1
 8003824:	4303      	orrs	r3, r0
 8003826:	9304      	str	r3, [sp, #16]
 8003828:	f814 1b01 	ldrb.w	r1, [r4], #1
 800382c:	2206      	movs	r2, #6
 800382e:	482d      	ldr	r0, [pc, #180]	; (80038e4 <_vfiprintf_r+0x254>)
 8003830:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003834:	f000 fc5e 	bl	80040f4 <memchr>
 8003838:	2800      	cmp	r0, #0
 800383a:	d03f      	beq.n	80038bc <_vfiprintf_r+0x22c>
 800383c:	4b2a      	ldr	r3, [pc, #168]	; (80038e8 <_vfiprintf_r+0x258>)
 800383e:	bb1b      	cbnz	r3, 8003888 <_vfiprintf_r+0x1f8>
 8003840:	9b03      	ldr	r3, [sp, #12]
 8003842:	3307      	adds	r3, #7
 8003844:	f023 0307 	bic.w	r3, r3, #7
 8003848:	3308      	adds	r3, #8
 800384a:	9303      	str	r3, [sp, #12]
 800384c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800384e:	443b      	add	r3, r7
 8003850:	9309      	str	r3, [sp, #36]	; 0x24
 8003852:	e767      	b.n	8003724 <_vfiprintf_r+0x94>
 8003854:	460c      	mov	r4, r1
 8003856:	2001      	movs	r0, #1
 8003858:	fb0c 3202 	mla	r2, ip, r2, r3
 800385c:	e7a5      	b.n	80037aa <_vfiprintf_r+0x11a>
 800385e:	2300      	movs	r3, #0
 8003860:	f04f 0c0a 	mov.w	ip, #10
 8003864:	4619      	mov	r1, r3
 8003866:	3401      	adds	r4, #1
 8003868:	9305      	str	r3, [sp, #20]
 800386a:	4620      	mov	r0, r4
 800386c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003870:	3a30      	subs	r2, #48	; 0x30
 8003872:	2a09      	cmp	r2, #9
 8003874:	d903      	bls.n	800387e <_vfiprintf_r+0x1ee>
 8003876:	2b00      	cmp	r3, #0
 8003878:	d0c5      	beq.n	8003806 <_vfiprintf_r+0x176>
 800387a:	9105      	str	r1, [sp, #20]
 800387c:	e7c3      	b.n	8003806 <_vfiprintf_r+0x176>
 800387e:	4604      	mov	r4, r0
 8003880:	2301      	movs	r3, #1
 8003882:	fb0c 2101 	mla	r1, ip, r1, r2
 8003886:	e7f0      	b.n	800386a <_vfiprintf_r+0x1da>
 8003888:	ab03      	add	r3, sp, #12
 800388a:	9300      	str	r3, [sp, #0]
 800388c:	462a      	mov	r2, r5
 800388e:	4630      	mov	r0, r6
 8003890:	4b16      	ldr	r3, [pc, #88]	; (80038ec <_vfiprintf_r+0x25c>)
 8003892:	a904      	add	r1, sp, #16
 8003894:	f3af 8000 	nop.w
 8003898:	4607      	mov	r7, r0
 800389a:	1c78      	adds	r0, r7, #1
 800389c:	d1d6      	bne.n	800384c <_vfiprintf_r+0x1bc>
 800389e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80038a0:	07d9      	lsls	r1, r3, #31
 80038a2:	d405      	bmi.n	80038b0 <_vfiprintf_r+0x220>
 80038a4:	89ab      	ldrh	r3, [r5, #12]
 80038a6:	059a      	lsls	r2, r3, #22
 80038a8:	d402      	bmi.n	80038b0 <_vfiprintf_r+0x220>
 80038aa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80038ac:	f7ff fe33 	bl	8003516 <__retarget_lock_release_recursive>
 80038b0:	89ab      	ldrh	r3, [r5, #12]
 80038b2:	065b      	lsls	r3, r3, #25
 80038b4:	f53f af12 	bmi.w	80036dc <_vfiprintf_r+0x4c>
 80038b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80038ba:	e711      	b.n	80036e0 <_vfiprintf_r+0x50>
 80038bc:	ab03      	add	r3, sp, #12
 80038be:	9300      	str	r3, [sp, #0]
 80038c0:	462a      	mov	r2, r5
 80038c2:	4630      	mov	r0, r6
 80038c4:	4b09      	ldr	r3, [pc, #36]	; (80038ec <_vfiprintf_r+0x25c>)
 80038c6:	a904      	add	r1, sp, #16
 80038c8:	f000 f882 	bl	80039d0 <_printf_i>
 80038cc:	e7e4      	b.n	8003898 <_vfiprintf_r+0x208>
 80038ce:	bf00      	nop
 80038d0:	08004f4c 	.word	0x08004f4c
 80038d4:	08004f6c 	.word	0x08004f6c
 80038d8:	08004f2c 	.word	0x08004f2c
 80038dc:	08004f8c 	.word	0x08004f8c
 80038e0:	08004f92 	.word	0x08004f92
 80038e4:	08004f96 	.word	0x08004f96
 80038e8:	00000000 	.word	0x00000000
 80038ec:	0800366b 	.word	0x0800366b

080038f0 <_printf_common>:
 80038f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80038f4:	4616      	mov	r6, r2
 80038f6:	4699      	mov	r9, r3
 80038f8:	688a      	ldr	r2, [r1, #8]
 80038fa:	690b      	ldr	r3, [r1, #16]
 80038fc:	4607      	mov	r7, r0
 80038fe:	4293      	cmp	r3, r2
 8003900:	bfb8      	it	lt
 8003902:	4613      	movlt	r3, r2
 8003904:	6033      	str	r3, [r6, #0]
 8003906:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800390a:	460c      	mov	r4, r1
 800390c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003910:	b10a      	cbz	r2, 8003916 <_printf_common+0x26>
 8003912:	3301      	adds	r3, #1
 8003914:	6033      	str	r3, [r6, #0]
 8003916:	6823      	ldr	r3, [r4, #0]
 8003918:	0699      	lsls	r1, r3, #26
 800391a:	bf42      	ittt	mi
 800391c:	6833      	ldrmi	r3, [r6, #0]
 800391e:	3302      	addmi	r3, #2
 8003920:	6033      	strmi	r3, [r6, #0]
 8003922:	6825      	ldr	r5, [r4, #0]
 8003924:	f015 0506 	ands.w	r5, r5, #6
 8003928:	d106      	bne.n	8003938 <_printf_common+0x48>
 800392a:	f104 0a19 	add.w	sl, r4, #25
 800392e:	68e3      	ldr	r3, [r4, #12]
 8003930:	6832      	ldr	r2, [r6, #0]
 8003932:	1a9b      	subs	r3, r3, r2
 8003934:	42ab      	cmp	r3, r5
 8003936:	dc28      	bgt.n	800398a <_printf_common+0x9a>
 8003938:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800393c:	1e13      	subs	r3, r2, #0
 800393e:	6822      	ldr	r2, [r4, #0]
 8003940:	bf18      	it	ne
 8003942:	2301      	movne	r3, #1
 8003944:	0692      	lsls	r2, r2, #26
 8003946:	d42d      	bmi.n	80039a4 <_printf_common+0xb4>
 8003948:	4649      	mov	r1, r9
 800394a:	4638      	mov	r0, r7
 800394c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003950:	47c0      	blx	r8
 8003952:	3001      	adds	r0, #1
 8003954:	d020      	beq.n	8003998 <_printf_common+0xa8>
 8003956:	6823      	ldr	r3, [r4, #0]
 8003958:	68e5      	ldr	r5, [r4, #12]
 800395a:	f003 0306 	and.w	r3, r3, #6
 800395e:	2b04      	cmp	r3, #4
 8003960:	bf18      	it	ne
 8003962:	2500      	movne	r5, #0
 8003964:	6832      	ldr	r2, [r6, #0]
 8003966:	f04f 0600 	mov.w	r6, #0
 800396a:	68a3      	ldr	r3, [r4, #8]
 800396c:	bf08      	it	eq
 800396e:	1aad      	subeq	r5, r5, r2
 8003970:	6922      	ldr	r2, [r4, #16]
 8003972:	bf08      	it	eq
 8003974:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003978:	4293      	cmp	r3, r2
 800397a:	bfc4      	itt	gt
 800397c:	1a9b      	subgt	r3, r3, r2
 800397e:	18ed      	addgt	r5, r5, r3
 8003980:	341a      	adds	r4, #26
 8003982:	42b5      	cmp	r5, r6
 8003984:	d11a      	bne.n	80039bc <_printf_common+0xcc>
 8003986:	2000      	movs	r0, #0
 8003988:	e008      	b.n	800399c <_printf_common+0xac>
 800398a:	2301      	movs	r3, #1
 800398c:	4652      	mov	r2, sl
 800398e:	4649      	mov	r1, r9
 8003990:	4638      	mov	r0, r7
 8003992:	47c0      	blx	r8
 8003994:	3001      	adds	r0, #1
 8003996:	d103      	bne.n	80039a0 <_printf_common+0xb0>
 8003998:	f04f 30ff 	mov.w	r0, #4294967295
 800399c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039a0:	3501      	adds	r5, #1
 80039a2:	e7c4      	b.n	800392e <_printf_common+0x3e>
 80039a4:	2030      	movs	r0, #48	; 0x30
 80039a6:	18e1      	adds	r1, r4, r3
 80039a8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80039ac:	1c5a      	adds	r2, r3, #1
 80039ae:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80039b2:	4422      	add	r2, r4
 80039b4:	3302      	adds	r3, #2
 80039b6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80039ba:	e7c5      	b.n	8003948 <_printf_common+0x58>
 80039bc:	2301      	movs	r3, #1
 80039be:	4622      	mov	r2, r4
 80039c0:	4649      	mov	r1, r9
 80039c2:	4638      	mov	r0, r7
 80039c4:	47c0      	blx	r8
 80039c6:	3001      	adds	r0, #1
 80039c8:	d0e6      	beq.n	8003998 <_printf_common+0xa8>
 80039ca:	3601      	adds	r6, #1
 80039cc:	e7d9      	b.n	8003982 <_printf_common+0x92>
	...

080039d0 <_printf_i>:
 80039d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80039d4:	7e0f      	ldrb	r7, [r1, #24]
 80039d6:	4691      	mov	r9, r2
 80039d8:	2f78      	cmp	r7, #120	; 0x78
 80039da:	4680      	mov	r8, r0
 80039dc:	460c      	mov	r4, r1
 80039de:	469a      	mov	sl, r3
 80039e0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80039e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80039e6:	d807      	bhi.n	80039f8 <_printf_i+0x28>
 80039e8:	2f62      	cmp	r7, #98	; 0x62
 80039ea:	d80a      	bhi.n	8003a02 <_printf_i+0x32>
 80039ec:	2f00      	cmp	r7, #0
 80039ee:	f000 80d9 	beq.w	8003ba4 <_printf_i+0x1d4>
 80039f2:	2f58      	cmp	r7, #88	; 0x58
 80039f4:	f000 80a4 	beq.w	8003b40 <_printf_i+0x170>
 80039f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80039fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003a00:	e03a      	b.n	8003a78 <_printf_i+0xa8>
 8003a02:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003a06:	2b15      	cmp	r3, #21
 8003a08:	d8f6      	bhi.n	80039f8 <_printf_i+0x28>
 8003a0a:	a101      	add	r1, pc, #4	; (adr r1, 8003a10 <_printf_i+0x40>)
 8003a0c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003a10:	08003a69 	.word	0x08003a69
 8003a14:	08003a7d 	.word	0x08003a7d
 8003a18:	080039f9 	.word	0x080039f9
 8003a1c:	080039f9 	.word	0x080039f9
 8003a20:	080039f9 	.word	0x080039f9
 8003a24:	080039f9 	.word	0x080039f9
 8003a28:	08003a7d 	.word	0x08003a7d
 8003a2c:	080039f9 	.word	0x080039f9
 8003a30:	080039f9 	.word	0x080039f9
 8003a34:	080039f9 	.word	0x080039f9
 8003a38:	080039f9 	.word	0x080039f9
 8003a3c:	08003b8b 	.word	0x08003b8b
 8003a40:	08003aad 	.word	0x08003aad
 8003a44:	08003b6d 	.word	0x08003b6d
 8003a48:	080039f9 	.word	0x080039f9
 8003a4c:	080039f9 	.word	0x080039f9
 8003a50:	08003bad 	.word	0x08003bad
 8003a54:	080039f9 	.word	0x080039f9
 8003a58:	08003aad 	.word	0x08003aad
 8003a5c:	080039f9 	.word	0x080039f9
 8003a60:	080039f9 	.word	0x080039f9
 8003a64:	08003b75 	.word	0x08003b75
 8003a68:	682b      	ldr	r3, [r5, #0]
 8003a6a:	1d1a      	adds	r2, r3, #4
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	602a      	str	r2, [r5, #0]
 8003a70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003a74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003a78:	2301      	movs	r3, #1
 8003a7a:	e0a4      	b.n	8003bc6 <_printf_i+0x1f6>
 8003a7c:	6820      	ldr	r0, [r4, #0]
 8003a7e:	6829      	ldr	r1, [r5, #0]
 8003a80:	0606      	lsls	r6, r0, #24
 8003a82:	f101 0304 	add.w	r3, r1, #4
 8003a86:	d50a      	bpl.n	8003a9e <_printf_i+0xce>
 8003a88:	680e      	ldr	r6, [r1, #0]
 8003a8a:	602b      	str	r3, [r5, #0]
 8003a8c:	2e00      	cmp	r6, #0
 8003a8e:	da03      	bge.n	8003a98 <_printf_i+0xc8>
 8003a90:	232d      	movs	r3, #45	; 0x2d
 8003a92:	4276      	negs	r6, r6
 8003a94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a98:	230a      	movs	r3, #10
 8003a9a:	485e      	ldr	r0, [pc, #376]	; (8003c14 <_printf_i+0x244>)
 8003a9c:	e019      	b.n	8003ad2 <_printf_i+0x102>
 8003a9e:	680e      	ldr	r6, [r1, #0]
 8003aa0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003aa4:	602b      	str	r3, [r5, #0]
 8003aa6:	bf18      	it	ne
 8003aa8:	b236      	sxthne	r6, r6
 8003aaa:	e7ef      	b.n	8003a8c <_printf_i+0xbc>
 8003aac:	682b      	ldr	r3, [r5, #0]
 8003aae:	6820      	ldr	r0, [r4, #0]
 8003ab0:	1d19      	adds	r1, r3, #4
 8003ab2:	6029      	str	r1, [r5, #0]
 8003ab4:	0601      	lsls	r1, r0, #24
 8003ab6:	d501      	bpl.n	8003abc <_printf_i+0xec>
 8003ab8:	681e      	ldr	r6, [r3, #0]
 8003aba:	e002      	b.n	8003ac2 <_printf_i+0xf2>
 8003abc:	0646      	lsls	r6, r0, #25
 8003abe:	d5fb      	bpl.n	8003ab8 <_printf_i+0xe8>
 8003ac0:	881e      	ldrh	r6, [r3, #0]
 8003ac2:	2f6f      	cmp	r7, #111	; 0x6f
 8003ac4:	bf0c      	ite	eq
 8003ac6:	2308      	moveq	r3, #8
 8003ac8:	230a      	movne	r3, #10
 8003aca:	4852      	ldr	r0, [pc, #328]	; (8003c14 <_printf_i+0x244>)
 8003acc:	2100      	movs	r1, #0
 8003ace:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003ad2:	6865      	ldr	r5, [r4, #4]
 8003ad4:	2d00      	cmp	r5, #0
 8003ad6:	bfa8      	it	ge
 8003ad8:	6821      	ldrge	r1, [r4, #0]
 8003ada:	60a5      	str	r5, [r4, #8]
 8003adc:	bfa4      	itt	ge
 8003ade:	f021 0104 	bicge.w	r1, r1, #4
 8003ae2:	6021      	strge	r1, [r4, #0]
 8003ae4:	b90e      	cbnz	r6, 8003aea <_printf_i+0x11a>
 8003ae6:	2d00      	cmp	r5, #0
 8003ae8:	d04d      	beq.n	8003b86 <_printf_i+0x1b6>
 8003aea:	4615      	mov	r5, r2
 8003aec:	fbb6 f1f3 	udiv	r1, r6, r3
 8003af0:	fb03 6711 	mls	r7, r3, r1, r6
 8003af4:	5dc7      	ldrb	r7, [r0, r7]
 8003af6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003afa:	4637      	mov	r7, r6
 8003afc:	42bb      	cmp	r3, r7
 8003afe:	460e      	mov	r6, r1
 8003b00:	d9f4      	bls.n	8003aec <_printf_i+0x11c>
 8003b02:	2b08      	cmp	r3, #8
 8003b04:	d10b      	bne.n	8003b1e <_printf_i+0x14e>
 8003b06:	6823      	ldr	r3, [r4, #0]
 8003b08:	07de      	lsls	r6, r3, #31
 8003b0a:	d508      	bpl.n	8003b1e <_printf_i+0x14e>
 8003b0c:	6923      	ldr	r3, [r4, #16]
 8003b0e:	6861      	ldr	r1, [r4, #4]
 8003b10:	4299      	cmp	r1, r3
 8003b12:	bfde      	ittt	le
 8003b14:	2330      	movle	r3, #48	; 0x30
 8003b16:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003b1a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003b1e:	1b52      	subs	r2, r2, r5
 8003b20:	6122      	str	r2, [r4, #16]
 8003b22:	464b      	mov	r3, r9
 8003b24:	4621      	mov	r1, r4
 8003b26:	4640      	mov	r0, r8
 8003b28:	f8cd a000 	str.w	sl, [sp]
 8003b2c:	aa03      	add	r2, sp, #12
 8003b2e:	f7ff fedf 	bl	80038f0 <_printf_common>
 8003b32:	3001      	adds	r0, #1
 8003b34:	d14c      	bne.n	8003bd0 <_printf_i+0x200>
 8003b36:	f04f 30ff 	mov.w	r0, #4294967295
 8003b3a:	b004      	add	sp, #16
 8003b3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b40:	4834      	ldr	r0, [pc, #208]	; (8003c14 <_printf_i+0x244>)
 8003b42:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003b46:	6829      	ldr	r1, [r5, #0]
 8003b48:	6823      	ldr	r3, [r4, #0]
 8003b4a:	f851 6b04 	ldr.w	r6, [r1], #4
 8003b4e:	6029      	str	r1, [r5, #0]
 8003b50:	061d      	lsls	r5, r3, #24
 8003b52:	d514      	bpl.n	8003b7e <_printf_i+0x1ae>
 8003b54:	07df      	lsls	r7, r3, #31
 8003b56:	bf44      	itt	mi
 8003b58:	f043 0320 	orrmi.w	r3, r3, #32
 8003b5c:	6023      	strmi	r3, [r4, #0]
 8003b5e:	b91e      	cbnz	r6, 8003b68 <_printf_i+0x198>
 8003b60:	6823      	ldr	r3, [r4, #0]
 8003b62:	f023 0320 	bic.w	r3, r3, #32
 8003b66:	6023      	str	r3, [r4, #0]
 8003b68:	2310      	movs	r3, #16
 8003b6a:	e7af      	b.n	8003acc <_printf_i+0xfc>
 8003b6c:	6823      	ldr	r3, [r4, #0]
 8003b6e:	f043 0320 	orr.w	r3, r3, #32
 8003b72:	6023      	str	r3, [r4, #0]
 8003b74:	2378      	movs	r3, #120	; 0x78
 8003b76:	4828      	ldr	r0, [pc, #160]	; (8003c18 <_printf_i+0x248>)
 8003b78:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003b7c:	e7e3      	b.n	8003b46 <_printf_i+0x176>
 8003b7e:	0659      	lsls	r1, r3, #25
 8003b80:	bf48      	it	mi
 8003b82:	b2b6      	uxthmi	r6, r6
 8003b84:	e7e6      	b.n	8003b54 <_printf_i+0x184>
 8003b86:	4615      	mov	r5, r2
 8003b88:	e7bb      	b.n	8003b02 <_printf_i+0x132>
 8003b8a:	682b      	ldr	r3, [r5, #0]
 8003b8c:	6826      	ldr	r6, [r4, #0]
 8003b8e:	1d18      	adds	r0, r3, #4
 8003b90:	6961      	ldr	r1, [r4, #20]
 8003b92:	6028      	str	r0, [r5, #0]
 8003b94:	0635      	lsls	r5, r6, #24
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	d501      	bpl.n	8003b9e <_printf_i+0x1ce>
 8003b9a:	6019      	str	r1, [r3, #0]
 8003b9c:	e002      	b.n	8003ba4 <_printf_i+0x1d4>
 8003b9e:	0670      	lsls	r0, r6, #25
 8003ba0:	d5fb      	bpl.n	8003b9a <_printf_i+0x1ca>
 8003ba2:	8019      	strh	r1, [r3, #0]
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	4615      	mov	r5, r2
 8003ba8:	6123      	str	r3, [r4, #16]
 8003baa:	e7ba      	b.n	8003b22 <_printf_i+0x152>
 8003bac:	682b      	ldr	r3, [r5, #0]
 8003bae:	2100      	movs	r1, #0
 8003bb0:	1d1a      	adds	r2, r3, #4
 8003bb2:	602a      	str	r2, [r5, #0]
 8003bb4:	681d      	ldr	r5, [r3, #0]
 8003bb6:	6862      	ldr	r2, [r4, #4]
 8003bb8:	4628      	mov	r0, r5
 8003bba:	f000 fa9b 	bl	80040f4 <memchr>
 8003bbe:	b108      	cbz	r0, 8003bc4 <_printf_i+0x1f4>
 8003bc0:	1b40      	subs	r0, r0, r5
 8003bc2:	6060      	str	r0, [r4, #4]
 8003bc4:	6863      	ldr	r3, [r4, #4]
 8003bc6:	6123      	str	r3, [r4, #16]
 8003bc8:	2300      	movs	r3, #0
 8003bca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003bce:	e7a8      	b.n	8003b22 <_printf_i+0x152>
 8003bd0:	462a      	mov	r2, r5
 8003bd2:	4649      	mov	r1, r9
 8003bd4:	4640      	mov	r0, r8
 8003bd6:	6923      	ldr	r3, [r4, #16]
 8003bd8:	47d0      	blx	sl
 8003bda:	3001      	adds	r0, #1
 8003bdc:	d0ab      	beq.n	8003b36 <_printf_i+0x166>
 8003bde:	6823      	ldr	r3, [r4, #0]
 8003be0:	079b      	lsls	r3, r3, #30
 8003be2:	d413      	bmi.n	8003c0c <_printf_i+0x23c>
 8003be4:	68e0      	ldr	r0, [r4, #12]
 8003be6:	9b03      	ldr	r3, [sp, #12]
 8003be8:	4298      	cmp	r0, r3
 8003bea:	bfb8      	it	lt
 8003bec:	4618      	movlt	r0, r3
 8003bee:	e7a4      	b.n	8003b3a <_printf_i+0x16a>
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	4632      	mov	r2, r6
 8003bf4:	4649      	mov	r1, r9
 8003bf6:	4640      	mov	r0, r8
 8003bf8:	47d0      	blx	sl
 8003bfa:	3001      	adds	r0, #1
 8003bfc:	d09b      	beq.n	8003b36 <_printf_i+0x166>
 8003bfe:	3501      	adds	r5, #1
 8003c00:	68e3      	ldr	r3, [r4, #12]
 8003c02:	9903      	ldr	r1, [sp, #12]
 8003c04:	1a5b      	subs	r3, r3, r1
 8003c06:	42ab      	cmp	r3, r5
 8003c08:	dcf2      	bgt.n	8003bf0 <_printf_i+0x220>
 8003c0a:	e7eb      	b.n	8003be4 <_printf_i+0x214>
 8003c0c:	2500      	movs	r5, #0
 8003c0e:	f104 0619 	add.w	r6, r4, #25
 8003c12:	e7f5      	b.n	8003c00 <_printf_i+0x230>
 8003c14:	08004f9d 	.word	0x08004f9d
 8003c18:	08004fae 	.word	0x08004fae

08003c1c <_sbrk_r>:
 8003c1c:	b538      	push	{r3, r4, r5, lr}
 8003c1e:	2300      	movs	r3, #0
 8003c20:	4d05      	ldr	r5, [pc, #20]	; (8003c38 <_sbrk_r+0x1c>)
 8003c22:	4604      	mov	r4, r0
 8003c24:	4608      	mov	r0, r1
 8003c26:	602b      	str	r3, [r5, #0]
 8003c28:	f7fc fd10 	bl	800064c <_sbrk>
 8003c2c:	1c43      	adds	r3, r0, #1
 8003c2e:	d102      	bne.n	8003c36 <_sbrk_r+0x1a>
 8003c30:	682b      	ldr	r3, [r5, #0]
 8003c32:	b103      	cbz	r3, 8003c36 <_sbrk_r+0x1a>
 8003c34:	6023      	str	r3, [r4, #0]
 8003c36:	bd38      	pop	{r3, r4, r5, pc}
 8003c38:	200012b8 	.word	0x200012b8

08003c3c <__sread>:
 8003c3c:	b510      	push	{r4, lr}
 8003c3e:	460c      	mov	r4, r1
 8003c40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c44:	f000 fab8 	bl	80041b8 <_read_r>
 8003c48:	2800      	cmp	r0, #0
 8003c4a:	bfab      	itete	ge
 8003c4c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003c4e:	89a3      	ldrhlt	r3, [r4, #12]
 8003c50:	181b      	addge	r3, r3, r0
 8003c52:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003c56:	bfac      	ite	ge
 8003c58:	6563      	strge	r3, [r4, #84]	; 0x54
 8003c5a:	81a3      	strhlt	r3, [r4, #12]
 8003c5c:	bd10      	pop	{r4, pc}

08003c5e <__swrite>:
 8003c5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c62:	461f      	mov	r7, r3
 8003c64:	898b      	ldrh	r3, [r1, #12]
 8003c66:	4605      	mov	r5, r0
 8003c68:	05db      	lsls	r3, r3, #23
 8003c6a:	460c      	mov	r4, r1
 8003c6c:	4616      	mov	r6, r2
 8003c6e:	d505      	bpl.n	8003c7c <__swrite+0x1e>
 8003c70:	2302      	movs	r3, #2
 8003c72:	2200      	movs	r2, #0
 8003c74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c78:	f000 f9c4 	bl	8004004 <_lseek_r>
 8003c7c:	89a3      	ldrh	r3, [r4, #12]
 8003c7e:	4632      	mov	r2, r6
 8003c80:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003c84:	81a3      	strh	r3, [r4, #12]
 8003c86:	4628      	mov	r0, r5
 8003c88:	463b      	mov	r3, r7
 8003c8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003c8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003c92:	f000 b869 	b.w	8003d68 <_write_r>

08003c96 <__sseek>:
 8003c96:	b510      	push	{r4, lr}
 8003c98:	460c      	mov	r4, r1
 8003c9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c9e:	f000 f9b1 	bl	8004004 <_lseek_r>
 8003ca2:	1c43      	adds	r3, r0, #1
 8003ca4:	89a3      	ldrh	r3, [r4, #12]
 8003ca6:	bf15      	itete	ne
 8003ca8:	6560      	strne	r0, [r4, #84]	; 0x54
 8003caa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003cae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003cb2:	81a3      	strheq	r3, [r4, #12]
 8003cb4:	bf18      	it	ne
 8003cb6:	81a3      	strhne	r3, [r4, #12]
 8003cb8:	bd10      	pop	{r4, pc}

08003cba <__sclose>:
 8003cba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003cbe:	f000 b8d3 	b.w	8003e68 <_close_r>
	...

08003cc4 <__swbuf_r>:
 8003cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cc6:	460e      	mov	r6, r1
 8003cc8:	4614      	mov	r4, r2
 8003cca:	4605      	mov	r5, r0
 8003ccc:	b118      	cbz	r0, 8003cd6 <__swbuf_r+0x12>
 8003cce:	6983      	ldr	r3, [r0, #24]
 8003cd0:	b90b      	cbnz	r3, 8003cd6 <__swbuf_r+0x12>
 8003cd2:	f7ff fb81 	bl	80033d8 <__sinit>
 8003cd6:	4b21      	ldr	r3, [pc, #132]	; (8003d5c <__swbuf_r+0x98>)
 8003cd8:	429c      	cmp	r4, r3
 8003cda:	d12b      	bne.n	8003d34 <__swbuf_r+0x70>
 8003cdc:	686c      	ldr	r4, [r5, #4]
 8003cde:	69a3      	ldr	r3, [r4, #24]
 8003ce0:	60a3      	str	r3, [r4, #8]
 8003ce2:	89a3      	ldrh	r3, [r4, #12]
 8003ce4:	071a      	lsls	r2, r3, #28
 8003ce6:	d52f      	bpl.n	8003d48 <__swbuf_r+0x84>
 8003ce8:	6923      	ldr	r3, [r4, #16]
 8003cea:	b36b      	cbz	r3, 8003d48 <__swbuf_r+0x84>
 8003cec:	6923      	ldr	r3, [r4, #16]
 8003cee:	6820      	ldr	r0, [r4, #0]
 8003cf0:	b2f6      	uxtb	r6, r6
 8003cf2:	1ac0      	subs	r0, r0, r3
 8003cf4:	6963      	ldr	r3, [r4, #20]
 8003cf6:	4637      	mov	r7, r6
 8003cf8:	4283      	cmp	r3, r0
 8003cfa:	dc04      	bgt.n	8003d06 <__swbuf_r+0x42>
 8003cfc:	4621      	mov	r1, r4
 8003cfe:	4628      	mov	r0, r5
 8003d00:	f000 f944 	bl	8003f8c <_fflush_r>
 8003d04:	bb30      	cbnz	r0, 8003d54 <__swbuf_r+0x90>
 8003d06:	68a3      	ldr	r3, [r4, #8]
 8003d08:	3001      	adds	r0, #1
 8003d0a:	3b01      	subs	r3, #1
 8003d0c:	60a3      	str	r3, [r4, #8]
 8003d0e:	6823      	ldr	r3, [r4, #0]
 8003d10:	1c5a      	adds	r2, r3, #1
 8003d12:	6022      	str	r2, [r4, #0]
 8003d14:	701e      	strb	r6, [r3, #0]
 8003d16:	6963      	ldr	r3, [r4, #20]
 8003d18:	4283      	cmp	r3, r0
 8003d1a:	d004      	beq.n	8003d26 <__swbuf_r+0x62>
 8003d1c:	89a3      	ldrh	r3, [r4, #12]
 8003d1e:	07db      	lsls	r3, r3, #31
 8003d20:	d506      	bpl.n	8003d30 <__swbuf_r+0x6c>
 8003d22:	2e0a      	cmp	r6, #10
 8003d24:	d104      	bne.n	8003d30 <__swbuf_r+0x6c>
 8003d26:	4621      	mov	r1, r4
 8003d28:	4628      	mov	r0, r5
 8003d2a:	f000 f92f 	bl	8003f8c <_fflush_r>
 8003d2e:	b988      	cbnz	r0, 8003d54 <__swbuf_r+0x90>
 8003d30:	4638      	mov	r0, r7
 8003d32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d34:	4b0a      	ldr	r3, [pc, #40]	; (8003d60 <__swbuf_r+0x9c>)
 8003d36:	429c      	cmp	r4, r3
 8003d38:	d101      	bne.n	8003d3e <__swbuf_r+0x7a>
 8003d3a:	68ac      	ldr	r4, [r5, #8]
 8003d3c:	e7cf      	b.n	8003cde <__swbuf_r+0x1a>
 8003d3e:	4b09      	ldr	r3, [pc, #36]	; (8003d64 <__swbuf_r+0xa0>)
 8003d40:	429c      	cmp	r4, r3
 8003d42:	bf08      	it	eq
 8003d44:	68ec      	ldreq	r4, [r5, #12]
 8003d46:	e7ca      	b.n	8003cde <__swbuf_r+0x1a>
 8003d48:	4621      	mov	r1, r4
 8003d4a:	4628      	mov	r0, r5
 8003d4c:	f000 f81e 	bl	8003d8c <__swsetup_r>
 8003d50:	2800      	cmp	r0, #0
 8003d52:	d0cb      	beq.n	8003cec <__swbuf_r+0x28>
 8003d54:	f04f 37ff 	mov.w	r7, #4294967295
 8003d58:	e7ea      	b.n	8003d30 <__swbuf_r+0x6c>
 8003d5a:	bf00      	nop
 8003d5c:	08004f4c 	.word	0x08004f4c
 8003d60:	08004f6c 	.word	0x08004f6c
 8003d64:	08004f2c 	.word	0x08004f2c

08003d68 <_write_r>:
 8003d68:	b538      	push	{r3, r4, r5, lr}
 8003d6a:	4604      	mov	r4, r0
 8003d6c:	4608      	mov	r0, r1
 8003d6e:	4611      	mov	r1, r2
 8003d70:	2200      	movs	r2, #0
 8003d72:	4d05      	ldr	r5, [pc, #20]	; (8003d88 <_write_r+0x20>)
 8003d74:	602a      	str	r2, [r5, #0]
 8003d76:	461a      	mov	r2, r3
 8003d78:	f7fc faea 	bl	8000350 <_write>
 8003d7c:	1c43      	adds	r3, r0, #1
 8003d7e:	d102      	bne.n	8003d86 <_write_r+0x1e>
 8003d80:	682b      	ldr	r3, [r5, #0]
 8003d82:	b103      	cbz	r3, 8003d86 <_write_r+0x1e>
 8003d84:	6023      	str	r3, [r4, #0]
 8003d86:	bd38      	pop	{r3, r4, r5, pc}
 8003d88:	200012b8 	.word	0x200012b8

08003d8c <__swsetup_r>:
 8003d8c:	4b32      	ldr	r3, [pc, #200]	; (8003e58 <__swsetup_r+0xcc>)
 8003d8e:	b570      	push	{r4, r5, r6, lr}
 8003d90:	681d      	ldr	r5, [r3, #0]
 8003d92:	4606      	mov	r6, r0
 8003d94:	460c      	mov	r4, r1
 8003d96:	b125      	cbz	r5, 8003da2 <__swsetup_r+0x16>
 8003d98:	69ab      	ldr	r3, [r5, #24]
 8003d9a:	b913      	cbnz	r3, 8003da2 <__swsetup_r+0x16>
 8003d9c:	4628      	mov	r0, r5
 8003d9e:	f7ff fb1b 	bl	80033d8 <__sinit>
 8003da2:	4b2e      	ldr	r3, [pc, #184]	; (8003e5c <__swsetup_r+0xd0>)
 8003da4:	429c      	cmp	r4, r3
 8003da6:	d10f      	bne.n	8003dc8 <__swsetup_r+0x3c>
 8003da8:	686c      	ldr	r4, [r5, #4]
 8003daa:	89a3      	ldrh	r3, [r4, #12]
 8003dac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003db0:	0719      	lsls	r1, r3, #28
 8003db2:	d42c      	bmi.n	8003e0e <__swsetup_r+0x82>
 8003db4:	06dd      	lsls	r5, r3, #27
 8003db6:	d411      	bmi.n	8003ddc <__swsetup_r+0x50>
 8003db8:	2309      	movs	r3, #9
 8003dba:	6033      	str	r3, [r6, #0]
 8003dbc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8003dc4:	81a3      	strh	r3, [r4, #12]
 8003dc6:	e03e      	b.n	8003e46 <__swsetup_r+0xba>
 8003dc8:	4b25      	ldr	r3, [pc, #148]	; (8003e60 <__swsetup_r+0xd4>)
 8003dca:	429c      	cmp	r4, r3
 8003dcc:	d101      	bne.n	8003dd2 <__swsetup_r+0x46>
 8003dce:	68ac      	ldr	r4, [r5, #8]
 8003dd0:	e7eb      	b.n	8003daa <__swsetup_r+0x1e>
 8003dd2:	4b24      	ldr	r3, [pc, #144]	; (8003e64 <__swsetup_r+0xd8>)
 8003dd4:	429c      	cmp	r4, r3
 8003dd6:	bf08      	it	eq
 8003dd8:	68ec      	ldreq	r4, [r5, #12]
 8003dda:	e7e6      	b.n	8003daa <__swsetup_r+0x1e>
 8003ddc:	0758      	lsls	r0, r3, #29
 8003dde:	d512      	bpl.n	8003e06 <__swsetup_r+0x7a>
 8003de0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003de2:	b141      	cbz	r1, 8003df6 <__swsetup_r+0x6a>
 8003de4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003de8:	4299      	cmp	r1, r3
 8003dea:	d002      	beq.n	8003df2 <__swsetup_r+0x66>
 8003dec:	4630      	mov	r0, r6
 8003dee:	f000 f99b 	bl	8004128 <_free_r>
 8003df2:	2300      	movs	r3, #0
 8003df4:	6363      	str	r3, [r4, #52]	; 0x34
 8003df6:	89a3      	ldrh	r3, [r4, #12]
 8003df8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003dfc:	81a3      	strh	r3, [r4, #12]
 8003dfe:	2300      	movs	r3, #0
 8003e00:	6063      	str	r3, [r4, #4]
 8003e02:	6923      	ldr	r3, [r4, #16]
 8003e04:	6023      	str	r3, [r4, #0]
 8003e06:	89a3      	ldrh	r3, [r4, #12]
 8003e08:	f043 0308 	orr.w	r3, r3, #8
 8003e0c:	81a3      	strh	r3, [r4, #12]
 8003e0e:	6923      	ldr	r3, [r4, #16]
 8003e10:	b94b      	cbnz	r3, 8003e26 <__swsetup_r+0x9a>
 8003e12:	89a3      	ldrh	r3, [r4, #12]
 8003e14:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003e18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e1c:	d003      	beq.n	8003e26 <__swsetup_r+0x9a>
 8003e1e:	4621      	mov	r1, r4
 8003e20:	4630      	mov	r0, r6
 8003e22:	f000 f927 	bl	8004074 <__smakebuf_r>
 8003e26:	89a0      	ldrh	r0, [r4, #12]
 8003e28:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003e2c:	f010 0301 	ands.w	r3, r0, #1
 8003e30:	d00a      	beq.n	8003e48 <__swsetup_r+0xbc>
 8003e32:	2300      	movs	r3, #0
 8003e34:	60a3      	str	r3, [r4, #8]
 8003e36:	6963      	ldr	r3, [r4, #20]
 8003e38:	425b      	negs	r3, r3
 8003e3a:	61a3      	str	r3, [r4, #24]
 8003e3c:	6923      	ldr	r3, [r4, #16]
 8003e3e:	b943      	cbnz	r3, 8003e52 <__swsetup_r+0xc6>
 8003e40:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003e44:	d1ba      	bne.n	8003dbc <__swsetup_r+0x30>
 8003e46:	bd70      	pop	{r4, r5, r6, pc}
 8003e48:	0781      	lsls	r1, r0, #30
 8003e4a:	bf58      	it	pl
 8003e4c:	6963      	ldrpl	r3, [r4, #20]
 8003e4e:	60a3      	str	r3, [r4, #8]
 8003e50:	e7f4      	b.n	8003e3c <__swsetup_r+0xb0>
 8003e52:	2000      	movs	r0, #0
 8003e54:	e7f7      	b.n	8003e46 <__swsetup_r+0xba>
 8003e56:	bf00      	nop
 8003e58:	20000020 	.word	0x20000020
 8003e5c:	08004f4c 	.word	0x08004f4c
 8003e60:	08004f6c 	.word	0x08004f6c
 8003e64:	08004f2c 	.word	0x08004f2c

08003e68 <_close_r>:
 8003e68:	b538      	push	{r3, r4, r5, lr}
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	4d05      	ldr	r5, [pc, #20]	; (8003e84 <_close_r+0x1c>)
 8003e6e:	4604      	mov	r4, r0
 8003e70:	4608      	mov	r0, r1
 8003e72:	602b      	str	r3, [r5, #0]
 8003e74:	f7fc fbb9 	bl	80005ea <_close>
 8003e78:	1c43      	adds	r3, r0, #1
 8003e7a:	d102      	bne.n	8003e82 <_close_r+0x1a>
 8003e7c:	682b      	ldr	r3, [r5, #0]
 8003e7e:	b103      	cbz	r3, 8003e82 <_close_r+0x1a>
 8003e80:	6023      	str	r3, [r4, #0]
 8003e82:	bd38      	pop	{r3, r4, r5, pc}
 8003e84:	200012b8 	.word	0x200012b8

08003e88 <__sflush_r>:
 8003e88:	898a      	ldrh	r2, [r1, #12]
 8003e8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e8c:	4605      	mov	r5, r0
 8003e8e:	0710      	lsls	r0, r2, #28
 8003e90:	460c      	mov	r4, r1
 8003e92:	d457      	bmi.n	8003f44 <__sflush_r+0xbc>
 8003e94:	684b      	ldr	r3, [r1, #4]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	dc04      	bgt.n	8003ea4 <__sflush_r+0x1c>
 8003e9a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	dc01      	bgt.n	8003ea4 <__sflush_r+0x1c>
 8003ea0:	2000      	movs	r0, #0
 8003ea2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ea4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003ea6:	2e00      	cmp	r6, #0
 8003ea8:	d0fa      	beq.n	8003ea0 <__sflush_r+0x18>
 8003eaa:	2300      	movs	r3, #0
 8003eac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003eb0:	682f      	ldr	r7, [r5, #0]
 8003eb2:	602b      	str	r3, [r5, #0]
 8003eb4:	d032      	beq.n	8003f1c <__sflush_r+0x94>
 8003eb6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003eb8:	89a3      	ldrh	r3, [r4, #12]
 8003eba:	075a      	lsls	r2, r3, #29
 8003ebc:	d505      	bpl.n	8003eca <__sflush_r+0x42>
 8003ebe:	6863      	ldr	r3, [r4, #4]
 8003ec0:	1ac0      	subs	r0, r0, r3
 8003ec2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003ec4:	b10b      	cbz	r3, 8003eca <__sflush_r+0x42>
 8003ec6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003ec8:	1ac0      	subs	r0, r0, r3
 8003eca:	2300      	movs	r3, #0
 8003ecc:	4602      	mov	r2, r0
 8003ece:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003ed0:	4628      	mov	r0, r5
 8003ed2:	6a21      	ldr	r1, [r4, #32]
 8003ed4:	47b0      	blx	r6
 8003ed6:	1c43      	adds	r3, r0, #1
 8003ed8:	89a3      	ldrh	r3, [r4, #12]
 8003eda:	d106      	bne.n	8003eea <__sflush_r+0x62>
 8003edc:	6829      	ldr	r1, [r5, #0]
 8003ede:	291d      	cmp	r1, #29
 8003ee0:	d82c      	bhi.n	8003f3c <__sflush_r+0xb4>
 8003ee2:	4a29      	ldr	r2, [pc, #164]	; (8003f88 <__sflush_r+0x100>)
 8003ee4:	40ca      	lsrs	r2, r1
 8003ee6:	07d6      	lsls	r6, r2, #31
 8003ee8:	d528      	bpl.n	8003f3c <__sflush_r+0xb4>
 8003eea:	2200      	movs	r2, #0
 8003eec:	6062      	str	r2, [r4, #4]
 8003eee:	6922      	ldr	r2, [r4, #16]
 8003ef0:	04d9      	lsls	r1, r3, #19
 8003ef2:	6022      	str	r2, [r4, #0]
 8003ef4:	d504      	bpl.n	8003f00 <__sflush_r+0x78>
 8003ef6:	1c42      	adds	r2, r0, #1
 8003ef8:	d101      	bne.n	8003efe <__sflush_r+0x76>
 8003efa:	682b      	ldr	r3, [r5, #0]
 8003efc:	b903      	cbnz	r3, 8003f00 <__sflush_r+0x78>
 8003efe:	6560      	str	r0, [r4, #84]	; 0x54
 8003f00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003f02:	602f      	str	r7, [r5, #0]
 8003f04:	2900      	cmp	r1, #0
 8003f06:	d0cb      	beq.n	8003ea0 <__sflush_r+0x18>
 8003f08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003f0c:	4299      	cmp	r1, r3
 8003f0e:	d002      	beq.n	8003f16 <__sflush_r+0x8e>
 8003f10:	4628      	mov	r0, r5
 8003f12:	f000 f909 	bl	8004128 <_free_r>
 8003f16:	2000      	movs	r0, #0
 8003f18:	6360      	str	r0, [r4, #52]	; 0x34
 8003f1a:	e7c2      	b.n	8003ea2 <__sflush_r+0x1a>
 8003f1c:	6a21      	ldr	r1, [r4, #32]
 8003f1e:	2301      	movs	r3, #1
 8003f20:	4628      	mov	r0, r5
 8003f22:	47b0      	blx	r6
 8003f24:	1c41      	adds	r1, r0, #1
 8003f26:	d1c7      	bne.n	8003eb8 <__sflush_r+0x30>
 8003f28:	682b      	ldr	r3, [r5, #0]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d0c4      	beq.n	8003eb8 <__sflush_r+0x30>
 8003f2e:	2b1d      	cmp	r3, #29
 8003f30:	d001      	beq.n	8003f36 <__sflush_r+0xae>
 8003f32:	2b16      	cmp	r3, #22
 8003f34:	d101      	bne.n	8003f3a <__sflush_r+0xb2>
 8003f36:	602f      	str	r7, [r5, #0]
 8003f38:	e7b2      	b.n	8003ea0 <__sflush_r+0x18>
 8003f3a:	89a3      	ldrh	r3, [r4, #12]
 8003f3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f40:	81a3      	strh	r3, [r4, #12]
 8003f42:	e7ae      	b.n	8003ea2 <__sflush_r+0x1a>
 8003f44:	690f      	ldr	r7, [r1, #16]
 8003f46:	2f00      	cmp	r7, #0
 8003f48:	d0aa      	beq.n	8003ea0 <__sflush_r+0x18>
 8003f4a:	0793      	lsls	r3, r2, #30
 8003f4c:	bf18      	it	ne
 8003f4e:	2300      	movne	r3, #0
 8003f50:	680e      	ldr	r6, [r1, #0]
 8003f52:	bf08      	it	eq
 8003f54:	694b      	ldreq	r3, [r1, #20]
 8003f56:	1bf6      	subs	r6, r6, r7
 8003f58:	600f      	str	r7, [r1, #0]
 8003f5a:	608b      	str	r3, [r1, #8]
 8003f5c:	2e00      	cmp	r6, #0
 8003f5e:	dd9f      	ble.n	8003ea0 <__sflush_r+0x18>
 8003f60:	4633      	mov	r3, r6
 8003f62:	463a      	mov	r2, r7
 8003f64:	4628      	mov	r0, r5
 8003f66:	6a21      	ldr	r1, [r4, #32]
 8003f68:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8003f6c:	47e0      	blx	ip
 8003f6e:	2800      	cmp	r0, #0
 8003f70:	dc06      	bgt.n	8003f80 <__sflush_r+0xf8>
 8003f72:	89a3      	ldrh	r3, [r4, #12]
 8003f74:	f04f 30ff 	mov.w	r0, #4294967295
 8003f78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f7c:	81a3      	strh	r3, [r4, #12]
 8003f7e:	e790      	b.n	8003ea2 <__sflush_r+0x1a>
 8003f80:	4407      	add	r7, r0
 8003f82:	1a36      	subs	r6, r6, r0
 8003f84:	e7ea      	b.n	8003f5c <__sflush_r+0xd4>
 8003f86:	bf00      	nop
 8003f88:	20400001 	.word	0x20400001

08003f8c <_fflush_r>:
 8003f8c:	b538      	push	{r3, r4, r5, lr}
 8003f8e:	690b      	ldr	r3, [r1, #16]
 8003f90:	4605      	mov	r5, r0
 8003f92:	460c      	mov	r4, r1
 8003f94:	b913      	cbnz	r3, 8003f9c <_fflush_r+0x10>
 8003f96:	2500      	movs	r5, #0
 8003f98:	4628      	mov	r0, r5
 8003f9a:	bd38      	pop	{r3, r4, r5, pc}
 8003f9c:	b118      	cbz	r0, 8003fa6 <_fflush_r+0x1a>
 8003f9e:	6983      	ldr	r3, [r0, #24]
 8003fa0:	b90b      	cbnz	r3, 8003fa6 <_fflush_r+0x1a>
 8003fa2:	f7ff fa19 	bl	80033d8 <__sinit>
 8003fa6:	4b14      	ldr	r3, [pc, #80]	; (8003ff8 <_fflush_r+0x6c>)
 8003fa8:	429c      	cmp	r4, r3
 8003faa:	d11b      	bne.n	8003fe4 <_fflush_r+0x58>
 8003fac:	686c      	ldr	r4, [r5, #4]
 8003fae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d0ef      	beq.n	8003f96 <_fflush_r+0xa>
 8003fb6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003fb8:	07d0      	lsls	r0, r2, #31
 8003fba:	d404      	bmi.n	8003fc6 <_fflush_r+0x3a>
 8003fbc:	0599      	lsls	r1, r3, #22
 8003fbe:	d402      	bmi.n	8003fc6 <_fflush_r+0x3a>
 8003fc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003fc2:	f7ff faa7 	bl	8003514 <__retarget_lock_acquire_recursive>
 8003fc6:	4628      	mov	r0, r5
 8003fc8:	4621      	mov	r1, r4
 8003fca:	f7ff ff5d 	bl	8003e88 <__sflush_r>
 8003fce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003fd0:	4605      	mov	r5, r0
 8003fd2:	07da      	lsls	r2, r3, #31
 8003fd4:	d4e0      	bmi.n	8003f98 <_fflush_r+0xc>
 8003fd6:	89a3      	ldrh	r3, [r4, #12]
 8003fd8:	059b      	lsls	r3, r3, #22
 8003fda:	d4dd      	bmi.n	8003f98 <_fflush_r+0xc>
 8003fdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003fde:	f7ff fa9a 	bl	8003516 <__retarget_lock_release_recursive>
 8003fe2:	e7d9      	b.n	8003f98 <_fflush_r+0xc>
 8003fe4:	4b05      	ldr	r3, [pc, #20]	; (8003ffc <_fflush_r+0x70>)
 8003fe6:	429c      	cmp	r4, r3
 8003fe8:	d101      	bne.n	8003fee <_fflush_r+0x62>
 8003fea:	68ac      	ldr	r4, [r5, #8]
 8003fec:	e7df      	b.n	8003fae <_fflush_r+0x22>
 8003fee:	4b04      	ldr	r3, [pc, #16]	; (8004000 <_fflush_r+0x74>)
 8003ff0:	429c      	cmp	r4, r3
 8003ff2:	bf08      	it	eq
 8003ff4:	68ec      	ldreq	r4, [r5, #12]
 8003ff6:	e7da      	b.n	8003fae <_fflush_r+0x22>
 8003ff8:	08004f4c 	.word	0x08004f4c
 8003ffc:	08004f6c 	.word	0x08004f6c
 8004000:	08004f2c 	.word	0x08004f2c

08004004 <_lseek_r>:
 8004004:	b538      	push	{r3, r4, r5, lr}
 8004006:	4604      	mov	r4, r0
 8004008:	4608      	mov	r0, r1
 800400a:	4611      	mov	r1, r2
 800400c:	2200      	movs	r2, #0
 800400e:	4d05      	ldr	r5, [pc, #20]	; (8004024 <_lseek_r+0x20>)
 8004010:	602a      	str	r2, [r5, #0]
 8004012:	461a      	mov	r2, r3
 8004014:	f7fc fb0d 	bl	8000632 <_lseek>
 8004018:	1c43      	adds	r3, r0, #1
 800401a:	d102      	bne.n	8004022 <_lseek_r+0x1e>
 800401c:	682b      	ldr	r3, [r5, #0]
 800401e:	b103      	cbz	r3, 8004022 <_lseek_r+0x1e>
 8004020:	6023      	str	r3, [r4, #0]
 8004022:	bd38      	pop	{r3, r4, r5, pc}
 8004024:	200012b8 	.word	0x200012b8

08004028 <__swhatbuf_r>:
 8004028:	b570      	push	{r4, r5, r6, lr}
 800402a:	460e      	mov	r6, r1
 800402c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004030:	4614      	mov	r4, r2
 8004032:	2900      	cmp	r1, #0
 8004034:	461d      	mov	r5, r3
 8004036:	b096      	sub	sp, #88	; 0x58
 8004038:	da08      	bge.n	800404c <__swhatbuf_r+0x24>
 800403a:	2200      	movs	r2, #0
 800403c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004040:	602a      	str	r2, [r5, #0]
 8004042:	061a      	lsls	r2, r3, #24
 8004044:	d410      	bmi.n	8004068 <__swhatbuf_r+0x40>
 8004046:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800404a:	e00e      	b.n	800406a <__swhatbuf_r+0x42>
 800404c:	466a      	mov	r2, sp
 800404e:	f000 f8c5 	bl	80041dc <_fstat_r>
 8004052:	2800      	cmp	r0, #0
 8004054:	dbf1      	blt.n	800403a <__swhatbuf_r+0x12>
 8004056:	9a01      	ldr	r2, [sp, #4]
 8004058:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800405c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004060:	425a      	negs	r2, r3
 8004062:	415a      	adcs	r2, r3
 8004064:	602a      	str	r2, [r5, #0]
 8004066:	e7ee      	b.n	8004046 <__swhatbuf_r+0x1e>
 8004068:	2340      	movs	r3, #64	; 0x40
 800406a:	2000      	movs	r0, #0
 800406c:	6023      	str	r3, [r4, #0]
 800406e:	b016      	add	sp, #88	; 0x58
 8004070:	bd70      	pop	{r4, r5, r6, pc}
	...

08004074 <__smakebuf_r>:
 8004074:	898b      	ldrh	r3, [r1, #12]
 8004076:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004078:	079d      	lsls	r5, r3, #30
 800407a:	4606      	mov	r6, r0
 800407c:	460c      	mov	r4, r1
 800407e:	d507      	bpl.n	8004090 <__smakebuf_r+0x1c>
 8004080:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004084:	6023      	str	r3, [r4, #0]
 8004086:	6123      	str	r3, [r4, #16]
 8004088:	2301      	movs	r3, #1
 800408a:	6163      	str	r3, [r4, #20]
 800408c:	b002      	add	sp, #8
 800408e:	bd70      	pop	{r4, r5, r6, pc}
 8004090:	466a      	mov	r2, sp
 8004092:	ab01      	add	r3, sp, #4
 8004094:	f7ff ffc8 	bl	8004028 <__swhatbuf_r>
 8004098:	9900      	ldr	r1, [sp, #0]
 800409a:	4605      	mov	r5, r0
 800409c:	4630      	mov	r0, r6
 800409e:	f7ff fa5b 	bl	8003558 <_malloc_r>
 80040a2:	b948      	cbnz	r0, 80040b8 <__smakebuf_r+0x44>
 80040a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80040a8:	059a      	lsls	r2, r3, #22
 80040aa:	d4ef      	bmi.n	800408c <__smakebuf_r+0x18>
 80040ac:	f023 0303 	bic.w	r3, r3, #3
 80040b0:	f043 0302 	orr.w	r3, r3, #2
 80040b4:	81a3      	strh	r3, [r4, #12]
 80040b6:	e7e3      	b.n	8004080 <__smakebuf_r+0xc>
 80040b8:	4b0d      	ldr	r3, [pc, #52]	; (80040f0 <__smakebuf_r+0x7c>)
 80040ba:	62b3      	str	r3, [r6, #40]	; 0x28
 80040bc:	89a3      	ldrh	r3, [r4, #12]
 80040be:	6020      	str	r0, [r4, #0]
 80040c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040c4:	81a3      	strh	r3, [r4, #12]
 80040c6:	9b00      	ldr	r3, [sp, #0]
 80040c8:	6120      	str	r0, [r4, #16]
 80040ca:	6163      	str	r3, [r4, #20]
 80040cc:	9b01      	ldr	r3, [sp, #4]
 80040ce:	b15b      	cbz	r3, 80040e8 <__smakebuf_r+0x74>
 80040d0:	4630      	mov	r0, r6
 80040d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80040d6:	f000 f893 	bl	8004200 <_isatty_r>
 80040da:	b128      	cbz	r0, 80040e8 <__smakebuf_r+0x74>
 80040dc:	89a3      	ldrh	r3, [r4, #12]
 80040de:	f023 0303 	bic.w	r3, r3, #3
 80040e2:	f043 0301 	orr.w	r3, r3, #1
 80040e6:	81a3      	strh	r3, [r4, #12]
 80040e8:	89a0      	ldrh	r0, [r4, #12]
 80040ea:	4305      	orrs	r5, r0
 80040ec:	81a5      	strh	r5, [r4, #12]
 80040ee:	e7cd      	b.n	800408c <__smakebuf_r+0x18>
 80040f0:	08003371 	.word	0x08003371

080040f4 <memchr>:
 80040f4:	4603      	mov	r3, r0
 80040f6:	b510      	push	{r4, lr}
 80040f8:	b2c9      	uxtb	r1, r1
 80040fa:	4402      	add	r2, r0
 80040fc:	4293      	cmp	r3, r2
 80040fe:	4618      	mov	r0, r3
 8004100:	d101      	bne.n	8004106 <memchr+0x12>
 8004102:	2000      	movs	r0, #0
 8004104:	e003      	b.n	800410e <memchr+0x1a>
 8004106:	7804      	ldrb	r4, [r0, #0]
 8004108:	3301      	adds	r3, #1
 800410a:	428c      	cmp	r4, r1
 800410c:	d1f6      	bne.n	80040fc <memchr+0x8>
 800410e:	bd10      	pop	{r4, pc}

08004110 <__malloc_lock>:
 8004110:	4801      	ldr	r0, [pc, #4]	; (8004118 <__malloc_lock+0x8>)
 8004112:	f7ff b9ff 	b.w	8003514 <__retarget_lock_acquire_recursive>
 8004116:	bf00      	nop
 8004118:	200012ac 	.word	0x200012ac

0800411c <__malloc_unlock>:
 800411c:	4801      	ldr	r0, [pc, #4]	; (8004124 <__malloc_unlock+0x8>)
 800411e:	f7ff b9fa 	b.w	8003516 <__retarget_lock_release_recursive>
 8004122:	bf00      	nop
 8004124:	200012ac 	.word	0x200012ac

08004128 <_free_r>:
 8004128:	b538      	push	{r3, r4, r5, lr}
 800412a:	4605      	mov	r5, r0
 800412c:	2900      	cmp	r1, #0
 800412e:	d040      	beq.n	80041b2 <_free_r+0x8a>
 8004130:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004134:	1f0c      	subs	r4, r1, #4
 8004136:	2b00      	cmp	r3, #0
 8004138:	bfb8      	it	lt
 800413a:	18e4      	addlt	r4, r4, r3
 800413c:	f7ff ffe8 	bl	8004110 <__malloc_lock>
 8004140:	4a1c      	ldr	r2, [pc, #112]	; (80041b4 <_free_r+0x8c>)
 8004142:	6813      	ldr	r3, [r2, #0]
 8004144:	b933      	cbnz	r3, 8004154 <_free_r+0x2c>
 8004146:	6063      	str	r3, [r4, #4]
 8004148:	6014      	str	r4, [r2, #0]
 800414a:	4628      	mov	r0, r5
 800414c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004150:	f7ff bfe4 	b.w	800411c <__malloc_unlock>
 8004154:	42a3      	cmp	r3, r4
 8004156:	d908      	bls.n	800416a <_free_r+0x42>
 8004158:	6820      	ldr	r0, [r4, #0]
 800415a:	1821      	adds	r1, r4, r0
 800415c:	428b      	cmp	r3, r1
 800415e:	bf01      	itttt	eq
 8004160:	6819      	ldreq	r1, [r3, #0]
 8004162:	685b      	ldreq	r3, [r3, #4]
 8004164:	1809      	addeq	r1, r1, r0
 8004166:	6021      	streq	r1, [r4, #0]
 8004168:	e7ed      	b.n	8004146 <_free_r+0x1e>
 800416a:	461a      	mov	r2, r3
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	b10b      	cbz	r3, 8004174 <_free_r+0x4c>
 8004170:	42a3      	cmp	r3, r4
 8004172:	d9fa      	bls.n	800416a <_free_r+0x42>
 8004174:	6811      	ldr	r1, [r2, #0]
 8004176:	1850      	adds	r0, r2, r1
 8004178:	42a0      	cmp	r0, r4
 800417a:	d10b      	bne.n	8004194 <_free_r+0x6c>
 800417c:	6820      	ldr	r0, [r4, #0]
 800417e:	4401      	add	r1, r0
 8004180:	1850      	adds	r0, r2, r1
 8004182:	4283      	cmp	r3, r0
 8004184:	6011      	str	r1, [r2, #0]
 8004186:	d1e0      	bne.n	800414a <_free_r+0x22>
 8004188:	6818      	ldr	r0, [r3, #0]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	4401      	add	r1, r0
 800418e:	6011      	str	r1, [r2, #0]
 8004190:	6053      	str	r3, [r2, #4]
 8004192:	e7da      	b.n	800414a <_free_r+0x22>
 8004194:	d902      	bls.n	800419c <_free_r+0x74>
 8004196:	230c      	movs	r3, #12
 8004198:	602b      	str	r3, [r5, #0]
 800419a:	e7d6      	b.n	800414a <_free_r+0x22>
 800419c:	6820      	ldr	r0, [r4, #0]
 800419e:	1821      	adds	r1, r4, r0
 80041a0:	428b      	cmp	r3, r1
 80041a2:	bf01      	itttt	eq
 80041a4:	6819      	ldreq	r1, [r3, #0]
 80041a6:	685b      	ldreq	r3, [r3, #4]
 80041a8:	1809      	addeq	r1, r1, r0
 80041aa:	6021      	streq	r1, [r4, #0]
 80041ac:	6063      	str	r3, [r4, #4]
 80041ae:	6054      	str	r4, [r2, #4]
 80041b0:	e7cb      	b.n	800414a <_free_r+0x22>
 80041b2:	bd38      	pop	{r3, r4, r5, pc}
 80041b4:	200012b0 	.word	0x200012b0

080041b8 <_read_r>:
 80041b8:	b538      	push	{r3, r4, r5, lr}
 80041ba:	4604      	mov	r4, r0
 80041bc:	4608      	mov	r0, r1
 80041be:	4611      	mov	r1, r2
 80041c0:	2200      	movs	r2, #0
 80041c2:	4d05      	ldr	r5, [pc, #20]	; (80041d8 <_read_r+0x20>)
 80041c4:	602a      	str	r2, [r5, #0]
 80041c6:	461a      	mov	r2, r3
 80041c8:	f7fc f9f2 	bl	80005b0 <_read>
 80041cc:	1c43      	adds	r3, r0, #1
 80041ce:	d102      	bne.n	80041d6 <_read_r+0x1e>
 80041d0:	682b      	ldr	r3, [r5, #0]
 80041d2:	b103      	cbz	r3, 80041d6 <_read_r+0x1e>
 80041d4:	6023      	str	r3, [r4, #0]
 80041d6:	bd38      	pop	{r3, r4, r5, pc}
 80041d8:	200012b8 	.word	0x200012b8

080041dc <_fstat_r>:
 80041dc:	b538      	push	{r3, r4, r5, lr}
 80041de:	2300      	movs	r3, #0
 80041e0:	4d06      	ldr	r5, [pc, #24]	; (80041fc <_fstat_r+0x20>)
 80041e2:	4604      	mov	r4, r0
 80041e4:	4608      	mov	r0, r1
 80041e6:	4611      	mov	r1, r2
 80041e8:	602b      	str	r3, [r5, #0]
 80041ea:	f7fc fa09 	bl	8000600 <_fstat>
 80041ee:	1c43      	adds	r3, r0, #1
 80041f0:	d102      	bne.n	80041f8 <_fstat_r+0x1c>
 80041f2:	682b      	ldr	r3, [r5, #0]
 80041f4:	b103      	cbz	r3, 80041f8 <_fstat_r+0x1c>
 80041f6:	6023      	str	r3, [r4, #0]
 80041f8:	bd38      	pop	{r3, r4, r5, pc}
 80041fa:	bf00      	nop
 80041fc:	200012b8 	.word	0x200012b8

08004200 <_isatty_r>:
 8004200:	b538      	push	{r3, r4, r5, lr}
 8004202:	2300      	movs	r3, #0
 8004204:	4d05      	ldr	r5, [pc, #20]	; (800421c <_isatty_r+0x1c>)
 8004206:	4604      	mov	r4, r0
 8004208:	4608      	mov	r0, r1
 800420a:	602b      	str	r3, [r5, #0]
 800420c:	f7fc fa07 	bl	800061e <_isatty>
 8004210:	1c43      	adds	r3, r0, #1
 8004212:	d102      	bne.n	800421a <_isatty_r+0x1a>
 8004214:	682b      	ldr	r3, [r5, #0]
 8004216:	b103      	cbz	r3, 800421a <_isatty_r+0x1a>
 8004218:	6023      	str	r3, [r4, #0]
 800421a:	bd38      	pop	{r3, r4, r5, pc}
 800421c:	200012b8 	.word	0x200012b8

08004220 <_init>:
 8004220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004222:	bf00      	nop
 8004224:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004226:	bc08      	pop	{r3}
 8004228:	469e      	mov	lr, r3
 800422a:	4770      	bx	lr

0800422c <_fini>:
 800422c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800422e:	bf00      	nop
 8004230:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004232:	bc08      	pop	{r3}
 8004234:	469e      	mov	lr, r3
 8004236:	4770      	bx	lr
