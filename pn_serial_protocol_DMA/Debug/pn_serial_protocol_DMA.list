
pn_serial_protocol_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003dcc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000750  08003ed8  08003ed8  00013ed8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004628  08004628  00020084  2**0
                  CONTENTS
  4 .ARM          00000000  08004628  08004628  00020084  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004628  08004628  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004628  08004628  00014628  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800462c  0800462c  0001462c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08004630  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009a4  20000084  080046b4  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a28  080046b4  00020a28  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007ce6  00000000  00000000  000200ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e5f  00000000  00000000  00027d93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000858  00000000  00000000  00029bf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000790  00000000  00000000  0002a450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018395  00000000  00000000  0002abe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009fa4  00000000  00000000  00042f75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083d49  00000000  00000000  0004cf19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d0c62  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028e8  00000000  00000000  000d0cb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000084 	.word	0x20000084
 8000128:	00000000 	.word	0x00000000
 800012c:	08003ec0 	.word	0x08003ec0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000088 	.word	0x20000088
 8000148:	08003ec0 	.word	0x08003ec0

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fae0 	bl	8000714 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f810 	bl	8000178 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f8da 	bl	8000310 <MX_GPIO_Init>
  MX_DMA_Init();
 800015c:	f000 f8ba 	bl	80002d4 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000160:	f000 f864 	bl	800022c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000164:	f000 f88c 	bl	8000280 <MX_USART2_UART_Init>
  MX_CRC_Init();
 8000168:	f000 f84c 	bl	8000204 <MX_CRC_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  StaticSerialProtocolTest.run();
 800016c:	4b01      	ldr	r3, [pc, #4]	; (8000174 <main+0x28>)
 800016e:	681b      	ldr	r3, [r3, #0]
 8000170:	4798      	blx	r3
  while (1)
 8000172:	e7fe      	b.n	8000172 <main+0x26>
 8000174:	2000001c 	.word	0x2000001c

08000178 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	b090      	sub	sp, #64	; 0x40
 800017c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800017e:	f107 0318 	add.w	r3, r7, #24
 8000182:	2228      	movs	r2, #40	; 0x28
 8000184:	2100      	movs	r1, #0
 8000186:	4618      	mov	r0, r3
 8000188:	f002 fe16 	bl	8002db8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800018c:	1d3b      	adds	r3, r7, #4
 800018e:	2200      	movs	r2, #0
 8000190:	601a      	str	r2, [r3, #0]
 8000192:	605a      	str	r2, [r3, #4]
 8000194:	609a      	str	r2, [r3, #8]
 8000196:	60da      	str	r2, [r3, #12]
 8000198:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800019a:	2301      	movs	r3, #1
 800019c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800019e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001a2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001a4:	2300      	movs	r3, #0
 80001a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001a8:	2301      	movs	r3, #1
 80001aa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001ac:	2302      	movs	r3, #2
 80001ae:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001b4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001b6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80001ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001bc:	f107 0318 	add.w	r3, r7, #24
 80001c0:	4618      	mov	r0, r3
 80001c2:	f001 f811 	bl	80011e8 <HAL_RCC_OscConfig>
 80001c6:	4603      	mov	r3, r0
 80001c8:	2b00      	cmp	r3, #0
 80001ca:	d001      	beq.n	80001d0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80001cc:	f000 f8d8 	bl	8000380 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001d0:	230f      	movs	r3, #15
 80001d2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001d4:	2302      	movs	r3, #2
 80001d6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001d8:	2300      	movs	r3, #0
 80001da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001e2:	2300      	movs	r3, #0
 80001e4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001e6:	1d3b      	adds	r3, r7, #4
 80001e8:	2102      	movs	r1, #2
 80001ea:	4618      	mov	r0, r3
 80001ec:	f001 fa7e 	bl	80016ec <HAL_RCC_ClockConfig>
 80001f0:	4603      	mov	r3, r0
 80001f2:	2b00      	cmp	r3, #0
 80001f4:	d001      	beq.n	80001fa <SystemClock_Config+0x82>
  {
    Error_Handler();
 80001f6:	f000 f8c3 	bl	8000380 <Error_Handler>
  }
}
 80001fa:	bf00      	nop
 80001fc:	3740      	adds	r7, #64	; 0x40
 80001fe:	46bd      	mov	sp, r7
 8000200:	bd80      	pop	{r7, pc}
	...

08000204 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000208:	4b06      	ldr	r3, [pc, #24]	; (8000224 <MX_CRC_Init+0x20>)
 800020a:	4a07      	ldr	r2, [pc, #28]	; (8000228 <MX_CRC_Init+0x24>)
 800020c:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800020e:	4805      	ldr	r0, [pc, #20]	; (8000224 <MX_CRC_Init+0x20>)
 8000210:	f000 fbef 	bl	80009f2 <HAL_CRC_Init>
 8000214:	4603      	mov	r3, r0
 8000216:	2b00      	cmp	r3, #0
 8000218:	d001      	beq.n	800021e <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800021a:	f000 f8b1 	bl	8000380 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800021e:	bf00      	nop
 8000220:	bd80      	pop	{r7, pc}
 8000222:	bf00      	nop
 8000224:	200000a0 	.word	0x200000a0
 8000228:	40023000 	.word	0x40023000

0800022c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000230:	4b11      	ldr	r3, [pc, #68]	; (8000278 <MX_USART1_UART_Init+0x4c>)
 8000232:	4a12      	ldr	r2, [pc, #72]	; (800027c <MX_USART1_UART_Init+0x50>)
 8000234:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000236:	4b10      	ldr	r3, [pc, #64]	; (8000278 <MX_USART1_UART_Init+0x4c>)
 8000238:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800023c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800023e:	4b0e      	ldr	r3, [pc, #56]	; (8000278 <MX_USART1_UART_Init+0x4c>)
 8000240:	2200      	movs	r2, #0
 8000242:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000244:	4b0c      	ldr	r3, [pc, #48]	; (8000278 <MX_USART1_UART_Init+0x4c>)
 8000246:	2200      	movs	r2, #0
 8000248:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800024a:	4b0b      	ldr	r3, [pc, #44]	; (8000278 <MX_USART1_UART_Init+0x4c>)
 800024c:	2200      	movs	r2, #0
 800024e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000250:	4b09      	ldr	r3, [pc, #36]	; (8000278 <MX_USART1_UART_Init+0x4c>)
 8000252:	220c      	movs	r2, #12
 8000254:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000256:	4b08      	ldr	r3, [pc, #32]	; (8000278 <MX_USART1_UART_Init+0x4c>)
 8000258:	2200      	movs	r2, #0
 800025a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800025c:	4b06      	ldr	r3, [pc, #24]	; (8000278 <MX_USART1_UART_Init+0x4c>)
 800025e:	2200      	movs	r2, #0
 8000260:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000262:	4805      	ldr	r0, [pc, #20]	; (8000278 <MX_USART1_UART_Init+0x4c>)
 8000264:	f001 fbda 	bl	8001a1c <HAL_UART_Init>
 8000268:	4603      	mov	r3, r0
 800026a:	2b00      	cmp	r3, #0
 800026c:	d001      	beq.n	8000272 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800026e:	f000 f887 	bl	8000380 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000272:	bf00      	nop
 8000274:	bd80      	pop	{r7, pc}
 8000276:	bf00      	nop
 8000278:	200000a8 	.word	0x200000a8
 800027c:	40013800 	.word	0x40013800

08000280 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000284:	4b11      	ldr	r3, [pc, #68]	; (80002cc <MX_USART2_UART_Init+0x4c>)
 8000286:	4a12      	ldr	r2, [pc, #72]	; (80002d0 <MX_USART2_UART_Init+0x50>)
 8000288:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800028a:	4b10      	ldr	r3, [pc, #64]	; (80002cc <MX_USART2_UART_Init+0x4c>)
 800028c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000290:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000292:	4b0e      	ldr	r3, [pc, #56]	; (80002cc <MX_USART2_UART_Init+0x4c>)
 8000294:	2200      	movs	r2, #0
 8000296:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000298:	4b0c      	ldr	r3, [pc, #48]	; (80002cc <MX_USART2_UART_Init+0x4c>)
 800029a:	2200      	movs	r2, #0
 800029c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800029e:	4b0b      	ldr	r3, [pc, #44]	; (80002cc <MX_USART2_UART_Init+0x4c>)
 80002a0:	2200      	movs	r2, #0
 80002a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80002a4:	4b09      	ldr	r3, [pc, #36]	; (80002cc <MX_USART2_UART_Init+0x4c>)
 80002a6:	220c      	movs	r2, #12
 80002a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002aa:	4b08      	ldr	r3, [pc, #32]	; (80002cc <MX_USART2_UART_Init+0x4c>)
 80002ac:	2200      	movs	r2, #0
 80002ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80002b0:	4b06      	ldr	r3, [pc, #24]	; (80002cc <MX_USART2_UART_Init+0x4c>)
 80002b2:	2200      	movs	r2, #0
 80002b4:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart2) != HAL_OK)
 80002b6:	4805      	ldr	r0, [pc, #20]	; (80002cc <MX_USART2_UART_Init+0x4c>)
 80002b8:	f001 fbfd 	bl	8001ab6 <HAL_HalfDuplex_Init>
 80002bc:	4603      	mov	r3, r0
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d001      	beq.n	80002c6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80002c2:	f000 f85d 	bl	8000380 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80002c6:	bf00      	nop
 80002c8:	bd80      	pop	{r7, pc}
 80002ca:	bf00      	nop
 80002cc:	200000ec 	.word	0x200000ec
 80002d0:	40004400 	.word	0x40004400

080002d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b082      	sub	sp, #8
 80002d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80002da:	4b0c      	ldr	r3, [pc, #48]	; (800030c <MX_DMA_Init+0x38>)
 80002dc:	695b      	ldr	r3, [r3, #20]
 80002de:	4a0b      	ldr	r2, [pc, #44]	; (800030c <MX_DMA_Init+0x38>)
 80002e0:	f043 0301 	orr.w	r3, r3, #1
 80002e4:	6153      	str	r3, [r2, #20]
 80002e6:	4b09      	ldr	r3, [pc, #36]	; (800030c <MX_DMA_Init+0x38>)
 80002e8:	695b      	ldr	r3, [r3, #20]
 80002ea:	f003 0301 	and.w	r3, r3, #1
 80002ee:	607b      	str	r3, [r7, #4]
 80002f0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80002f2:	2200      	movs	r2, #0
 80002f4:	2100      	movs	r1, #0
 80002f6:	200f      	movs	r0, #15
 80002f8:	f000 fb45 	bl	8000986 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80002fc:	200f      	movs	r0, #15
 80002fe:	f000 fb5e 	bl	80009be <HAL_NVIC_EnableIRQ>

}
 8000302:	bf00      	nop
 8000304:	3708      	adds	r7, #8
 8000306:	46bd      	mov	sp, r7
 8000308:	bd80      	pop	{r7, pc}
 800030a:	bf00      	nop
 800030c:	40021000 	.word	0x40021000

08000310 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000310:	b480      	push	{r7}
 8000312:	b083      	sub	sp, #12
 8000314:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000316:	4b0e      	ldr	r3, [pc, #56]	; (8000350 <MX_GPIO_Init+0x40>)
 8000318:	699b      	ldr	r3, [r3, #24]
 800031a:	4a0d      	ldr	r2, [pc, #52]	; (8000350 <MX_GPIO_Init+0x40>)
 800031c:	f043 0320 	orr.w	r3, r3, #32
 8000320:	6193      	str	r3, [r2, #24]
 8000322:	4b0b      	ldr	r3, [pc, #44]	; (8000350 <MX_GPIO_Init+0x40>)
 8000324:	699b      	ldr	r3, [r3, #24]
 8000326:	f003 0320 	and.w	r3, r3, #32
 800032a:	607b      	str	r3, [r7, #4]
 800032c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800032e:	4b08      	ldr	r3, [pc, #32]	; (8000350 <MX_GPIO_Init+0x40>)
 8000330:	699b      	ldr	r3, [r3, #24]
 8000332:	4a07      	ldr	r2, [pc, #28]	; (8000350 <MX_GPIO_Init+0x40>)
 8000334:	f043 0304 	orr.w	r3, r3, #4
 8000338:	6193      	str	r3, [r2, #24]
 800033a:	4b05      	ldr	r3, [pc, #20]	; (8000350 <MX_GPIO_Init+0x40>)
 800033c:	699b      	ldr	r3, [r3, #24]
 800033e:	f003 0304 	and.w	r3, r3, #4
 8000342:	603b      	str	r3, [r7, #0]
 8000344:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000346:	bf00      	nop
 8000348:	370c      	adds	r7, #12
 800034a:	46bd      	mov	sp, r7
 800034c:	bc80      	pop	{r7}
 800034e:	4770      	bx	lr
 8000350:	40021000 	.word	0x40021000

08000354 <_write>:

/* USER CODE BEGIN 4 */
int _write(int fp, char *data, int len) {
 8000354:	b580      	push	{r7, lr}
 8000356:	b084      	sub	sp, #16
 8000358:	af00      	add	r7, sp, #0
 800035a:	60f8      	str	r0, [r7, #12]
 800035c:	60b9      	str	r1, [r7, #8]
 800035e:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) data, len, HAL_MAX_DELAY);
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	b29a      	uxth	r2, r3
 8000364:	f04f 33ff 	mov.w	r3, #4294967295
 8000368:	68b9      	ldr	r1, [r7, #8]
 800036a:	4804      	ldr	r0, [pc, #16]	; (800037c <_write+0x28>)
 800036c:	f001 fbf8 	bl	8001b60 <HAL_UART_Transmit>
	return len;
 8000370:	687b      	ldr	r3, [r7, #4]
}
 8000372:	4618      	mov	r0, r3
 8000374:	3710      	adds	r7, #16
 8000376:	46bd      	mov	sp, r7
 8000378:	bd80      	pop	{r7, pc}
 800037a:	bf00      	nop
 800037c:	200000ec 	.word	0x200000ec

08000380 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000380:	b480      	push	{r7}
 8000382:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000384:	b672      	cpsid	i
}
 8000386:	bf00      	nop
   /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000388:	e7fe      	b.n	8000388 <Error_Handler+0x8>
	...

0800038c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800038c:	b480      	push	{r7}
 800038e:	b083      	sub	sp, #12
 8000390:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000392:	4b0e      	ldr	r3, [pc, #56]	; (80003cc <HAL_MspInit+0x40>)
 8000394:	699b      	ldr	r3, [r3, #24]
 8000396:	4a0d      	ldr	r2, [pc, #52]	; (80003cc <HAL_MspInit+0x40>)
 8000398:	f043 0301 	orr.w	r3, r3, #1
 800039c:	6193      	str	r3, [r2, #24]
 800039e:	4b0b      	ldr	r3, [pc, #44]	; (80003cc <HAL_MspInit+0x40>)
 80003a0:	699b      	ldr	r3, [r3, #24]
 80003a2:	f003 0301 	and.w	r3, r3, #1
 80003a6:	607b      	str	r3, [r7, #4]
 80003a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003aa:	4b08      	ldr	r3, [pc, #32]	; (80003cc <HAL_MspInit+0x40>)
 80003ac:	69db      	ldr	r3, [r3, #28]
 80003ae:	4a07      	ldr	r2, [pc, #28]	; (80003cc <HAL_MspInit+0x40>)
 80003b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003b4:	61d3      	str	r3, [r2, #28]
 80003b6:	4b05      	ldr	r3, [pc, #20]	; (80003cc <HAL_MspInit+0x40>)
 80003b8:	69db      	ldr	r3, [r3, #28]
 80003ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003be:	603b      	str	r3, [r7, #0]
 80003c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003c2:	bf00      	nop
 80003c4:	370c      	adds	r7, #12
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bc80      	pop	{r7}
 80003ca:	4770      	bx	lr
 80003cc:	40021000 	.word	0x40021000

080003d0 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80003d0:	b480      	push	{r7}
 80003d2:	b085      	sub	sp, #20
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	4a09      	ldr	r2, [pc, #36]	; (8000404 <HAL_CRC_MspInit+0x34>)
 80003de:	4293      	cmp	r3, r2
 80003e0:	d10b      	bne.n	80003fa <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80003e2:	4b09      	ldr	r3, [pc, #36]	; (8000408 <HAL_CRC_MspInit+0x38>)
 80003e4:	695b      	ldr	r3, [r3, #20]
 80003e6:	4a08      	ldr	r2, [pc, #32]	; (8000408 <HAL_CRC_MspInit+0x38>)
 80003e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003ec:	6153      	str	r3, [r2, #20]
 80003ee:	4b06      	ldr	r3, [pc, #24]	; (8000408 <HAL_CRC_MspInit+0x38>)
 80003f0:	695b      	ldr	r3, [r3, #20]
 80003f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80003f6:	60fb      	str	r3, [r7, #12]
 80003f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80003fa:	bf00      	nop
 80003fc:	3714      	adds	r7, #20
 80003fe:	46bd      	mov	sp, r7
 8000400:	bc80      	pop	{r7}
 8000402:	4770      	bx	lr
 8000404:	40023000 	.word	0x40023000
 8000408:	40021000 	.word	0x40021000

0800040c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b08a      	sub	sp, #40	; 0x28
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000414:	f107 0318 	add.w	r3, r7, #24
 8000418:	2200      	movs	r2, #0
 800041a:	601a      	str	r2, [r3, #0]
 800041c:	605a      	str	r2, [r3, #4]
 800041e:	609a      	str	r2, [r3, #8]
 8000420:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	4a44      	ldr	r2, [pc, #272]	; (8000538 <HAL_UART_MspInit+0x12c>)
 8000428:	4293      	cmp	r3, r2
 800042a:	d158      	bne.n	80004de <HAL_UART_MspInit+0xd2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800042c:	4b43      	ldr	r3, [pc, #268]	; (800053c <HAL_UART_MspInit+0x130>)
 800042e:	699b      	ldr	r3, [r3, #24]
 8000430:	4a42      	ldr	r2, [pc, #264]	; (800053c <HAL_UART_MspInit+0x130>)
 8000432:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000436:	6193      	str	r3, [r2, #24]
 8000438:	4b40      	ldr	r3, [pc, #256]	; (800053c <HAL_UART_MspInit+0x130>)
 800043a:	699b      	ldr	r3, [r3, #24]
 800043c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000440:	617b      	str	r3, [r7, #20]
 8000442:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000444:	4b3d      	ldr	r3, [pc, #244]	; (800053c <HAL_UART_MspInit+0x130>)
 8000446:	699b      	ldr	r3, [r3, #24]
 8000448:	4a3c      	ldr	r2, [pc, #240]	; (800053c <HAL_UART_MspInit+0x130>)
 800044a:	f043 0304 	orr.w	r3, r3, #4
 800044e:	6193      	str	r3, [r2, #24]
 8000450:	4b3a      	ldr	r3, [pc, #232]	; (800053c <HAL_UART_MspInit+0x130>)
 8000452:	699b      	ldr	r3, [r3, #24]
 8000454:	f003 0304 	and.w	r3, r3, #4
 8000458:	613b      	str	r3, [r7, #16]
 800045a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800045c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000460:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000462:	2302      	movs	r3, #2
 8000464:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000466:	2303      	movs	r3, #3
 8000468:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800046a:	f107 0318 	add.w	r3, r7, #24
 800046e:	4619      	mov	r1, r3
 8000470:	4833      	ldr	r0, [pc, #204]	; (8000540 <HAL_UART_MspInit+0x134>)
 8000472:	f000 fd35 	bl	8000ee0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000476:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800047a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800047c:	2300      	movs	r3, #0
 800047e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000480:	2300      	movs	r3, #0
 8000482:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000484:	f107 0318 	add.w	r3, r7, #24
 8000488:	4619      	mov	r1, r3
 800048a:	482d      	ldr	r0, [pc, #180]	; (8000540 <HAL_UART_MspInit+0x134>)
 800048c:	f000 fd28 	bl	8000ee0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8000490:	4b2c      	ldr	r3, [pc, #176]	; (8000544 <HAL_UART_MspInit+0x138>)
 8000492:	4a2d      	ldr	r2, [pc, #180]	; (8000548 <HAL_UART_MspInit+0x13c>)
 8000494:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000496:	4b2b      	ldr	r3, [pc, #172]	; (8000544 <HAL_UART_MspInit+0x138>)
 8000498:	2200      	movs	r2, #0
 800049a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800049c:	4b29      	ldr	r3, [pc, #164]	; (8000544 <HAL_UART_MspInit+0x138>)
 800049e:	2200      	movs	r2, #0
 80004a0:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80004a2:	4b28      	ldr	r3, [pc, #160]	; (8000544 <HAL_UART_MspInit+0x138>)
 80004a4:	2280      	movs	r2, #128	; 0x80
 80004a6:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80004a8:	4b26      	ldr	r3, [pc, #152]	; (8000544 <HAL_UART_MspInit+0x138>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80004ae:	4b25      	ldr	r3, [pc, #148]	; (8000544 <HAL_UART_MspInit+0x138>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80004b4:	4b23      	ldr	r3, [pc, #140]	; (8000544 <HAL_UART_MspInit+0x138>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80004ba:	4b22      	ldr	r3, [pc, #136]	; (8000544 <HAL_UART_MspInit+0x138>)
 80004bc:	2200      	movs	r2, #0
 80004be:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80004c0:	4820      	ldr	r0, [pc, #128]	; (8000544 <HAL_UART_MspInit+0x138>)
 80004c2:	f000 fae5 	bl	8000a90 <HAL_DMA_Init>
 80004c6:	4603      	mov	r3, r0
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d001      	beq.n	80004d0 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 80004cc:	f7ff ff58 	bl	8000380 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	4a1c      	ldr	r2, [pc, #112]	; (8000544 <HAL_UART_MspInit+0x138>)
 80004d4:	639a      	str	r2, [r3, #56]	; 0x38
 80004d6:	4a1b      	ldr	r2, [pc, #108]	; (8000544 <HAL_UART_MspInit+0x138>)
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80004dc:	e028      	b.n	8000530 <HAL_UART_MspInit+0x124>
  else if(huart->Instance==USART2)
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	4a1a      	ldr	r2, [pc, #104]	; (800054c <HAL_UART_MspInit+0x140>)
 80004e4:	4293      	cmp	r3, r2
 80004e6:	d123      	bne.n	8000530 <HAL_UART_MspInit+0x124>
    __HAL_RCC_USART2_CLK_ENABLE();
 80004e8:	4b14      	ldr	r3, [pc, #80]	; (800053c <HAL_UART_MspInit+0x130>)
 80004ea:	69db      	ldr	r3, [r3, #28]
 80004ec:	4a13      	ldr	r2, [pc, #76]	; (800053c <HAL_UART_MspInit+0x130>)
 80004ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004f2:	61d3      	str	r3, [r2, #28]
 80004f4:	4b11      	ldr	r3, [pc, #68]	; (800053c <HAL_UART_MspInit+0x130>)
 80004f6:	69db      	ldr	r3, [r3, #28]
 80004f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004fc:	60fb      	str	r3, [r7, #12]
 80004fe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000500:	4b0e      	ldr	r3, [pc, #56]	; (800053c <HAL_UART_MspInit+0x130>)
 8000502:	699b      	ldr	r3, [r3, #24]
 8000504:	4a0d      	ldr	r2, [pc, #52]	; (800053c <HAL_UART_MspInit+0x130>)
 8000506:	f043 0304 	orr.w	r3, r3, #4
 800050a:	6193      	str	r3, [r2, #24]
 800050c:	4b0b      	ldr	r3, [pc, #44]	; (800053c <HAL_UART_MspInit+0x130>)
 800050e:	699b      	ldr	r3, [r3, #24]
 8000510:	f003 0304 	and.w	r3, r3, #4
 8000514:	60bb      	str	r3, [r7, #8]
 8000516:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000518:	2304      	movs	r3, #4
 800051a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800051c:	2312      	movs	r3, #18
 800051e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000520:	2303      	movs	r3, #3
 8000522:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000524:	f107 0318 	add.w	r3, r7, #24
 8000528:	4619      	mov	r1, r3
 800052a:	4805      	ldr	r0, [pc, #20]	; (8000540 <HAL_UART_MspInit+0x134>)
 800052c:	f000 fcd8 	bl	8000ee0 <HAL_GPIO_Init>
}
 8000530:	bf00      	nop
 8000532:	3728      	adds	r7, #40	; 0x28
 8000534:	46bd      	mov	sp, r7
 8000536:	bd80      	pop	{r7, pc}
 8000538:	40013800 	.word	0x40013800
 800053c:	40021000 	.word	0x40021000
 8000540:	40010800 	.word	0x40010800
 8000544:	20000130 	.word	0x20000130
 8000548:	40020058 	.word	0x40020058
 800054c:	40004400 	.word	0x40004400

08000550 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000550:	b480      	push	{r7}
 8000552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000554:	e7fe      	b.n	8000554 <NMI_Handler+0x4>

08000556 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000556:	b480      	push	{r7}
 8000558:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800055a:	e7fe      	b.n	800055a <HardFault_Handler+0x4>

0800055c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800055c:	b480      	push	{r7}
 800055e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000560:	e7fe      	b.n	8000560 <MemManage_Handler+0x4>

08000562 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000562:	b480      	push	{r7}
 8000564:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000566:	e7fe      	b.n	8000566 <BusFault_Handler+0x4>

08000568 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000568:	b480      	push	{r7}
 800056a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800056c:	e7fe      	b.n	800056c <UsageFault_Handler+0x4>

0800056e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800056e:	b480      	push	{r7}
 8000570:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000572:	bf00      	nop
 8000574:	46bd      	mov	sp, r7
 8000576:	bc80      	pop	{r7}
 8000578:	4770      	bx	lr

0800057a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800057a:	b480      	push	{r7}
 800057c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800057e:	bf00      	nop
 8000580:	46bd      	mov	sp, r7
 8000582:	bc80      	pop	{r7}
 8000584:	4770      	bx	lr

08000586 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000586:	b480      	push	{r7}
 8000588:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800058a:	bf00      	nop
 800058c:	46bd      	mov	sp, r7
 800058e:	bc80      	pop	{r7}
 8000590:	4770      	bx	lr

08000592 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000592:	b580      	push	{r7, lr}
 8000594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000596:	f000 f903 	bl	80007a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800059a:	bf00      	nop
 800059c:	bd80      	pop	{r7, pc}
	...

080005a0 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80005a4:	4802      	ldr	r0, [pc, #8]	; (80005b0 <DMA1_Channel5_IRQHandler+0x10>)
 80005a6:	f000 fb67 	bl	8000c78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80005aa:	bf00      	nop
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	20000130 	.word	0x20000130

080005b4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b086      	sub	sp, #24
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	60f8      	str	r0, [r7, #12]
 80005bc:	60b9      	str	r1, [r7, #8]
 80005be:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005c0:	2300      	movs	r3, #0
 80005c2:	617b      	str	r3, [r7, #20]
 80005c4:	e00a      	b.n	80005dc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80005c6:	f3af 8000 	nop.w
 80005ca:	4601      	mov	r1, r0
 80005cc:	68bb      	ldr	r3, [r7, #8]
 80005ce:	1c5a      	adds	r2, r3, #1
 80005d0:	60ba      	str	r2, [r7, #8]
 80005d2:	b2ca      	uxtb	r2, r1
 80005d4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005d6:	697b      	ldr	r3, [r7, #20]
 80005d8:	3301      	adds	r3, #1
 80005da:	617b      	str	r3, [r7, #20]
 80005dc:	697a      	ldr	r2, [r7, #20]
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	429a      	cmp	r2, r3
 80005e2:	dbf0      	blt.n	80005c6 <_read+0x12>
  }

  return len;
 80005e4:	687b      	ldr	r3, [r7, #4]
}
 80005e6:	4618      	mov	r0, r3
 80005e8:	3718      	adds	r7, #24
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}

080005ee <_close>:
  }
  return len;
}

int _close(int file)
{
 80005ee:	b480      	push	{r7}
 80005f0:	b083      	sub	sp, #12
 80005f2:	af00      	add	r7, sp, #0
 80005f4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80005f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80005fa:	4618      	mov	r0, r3
 80005fc:	370c      	adds	r7, #12
 80005fe:	46bd      	mov	sp, r7
 8000600:	bc80      	pop	{r7}
 8000602:	4770      	bx	lr

08000604 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000604:	b480      	push	{r7}
 8000606:	b083      	sub	sp, #12
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
 800060c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800060e:	683b      	ldr	r3, [r7, #0]
 8000610:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000614:	605a      	str	r2, [r3, #4]
  return 0;
 8000616:	2300      	movs	r3, #0
}
 8000618:	4618      	mov	r0, r3
 800061a:	370c      	adds	r7, #12
 800061c:	46bd      	mov	sp, r7
 800061e:	bc80      	pop	{r7}
 8000620:	4770      	bx	lr

08000622 <_isatty>:

int _isatty(int file)
{
 8000622:	b480      	push	{r7}
 8000624:	b083      	sub	sp, #12
 8000626:	af00      	add	r7, sp, #0
 8000628:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800062a:	2301      	movs	r3, #1
}
 800062c:	4618      	mov	r0, r3
 800062e:	370c      	adds	r7, #12
 8000630:	46bd      	mov	sp, r7
 8000632:	bc80      	pop	{r7}
 8000634:	4770      	bx	lr

08000636 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000636:	b480      	push	{r7}
 8000638:	b085      	sub	sp, #20
 800063a:	af00      	add	r7, sp, #0
 800063c:	60f8      	str	r0, [r7, #12]
 800063e:	60b9      	str	r1, [r7, #8]
 8000640:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000642:	2300      	movs	r3, #0
}
 8000644:	4618      	mov	r0, r3
 8000646:	3714      	adds	r7, #20
 8000648:	46bd      	mov	sp, r7
 800064a:	bc80      	pop	{r7}
 800064c:	4770      	bx	lr
	...

08000650 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b086      	sub	sp, #24
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000658:	4a14      	ldr	r2, [pc, #80]	; (80006ac <_sbrk+0x5c>)
 800065a:	4b15      	ldr	r3, [pc, #84]	; (80006b0 <_sbrk+0x60>)
 800065c:	1ad3      	subs	r3, r2, r3
 800065e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000660:	697b      	ldr	r3, [r7, #20]
 8000662:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000664:	4b13      	ldr	r3, [pc, #76]	; (80006b4 <_sbrk+0x64>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	2b00      	cmp	r3, #0
 800066a:	d102      	bne.n	8000672 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800066c:	4b11      	ldr	r3, [pc, #68]	; (80006b4 <_sbrk+0x64>)
 800066e:	4a12      	ldr	r2, [pc, #72]	; (80006b8 <_sbrk+0x68>)
 8000670:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000672:	4b10      	ldr	r3, [pc, #64]	; (80006b4 <_sbrk+0x64>)
 8000674:	681a      	ldr	r2, [r3, #0]
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	4413      	add	r3, r2
 800067a:	693a      	ldr	r2, [r7, #16]
 800067c:	429a      	cmp	r2, r3
 800067e:	d207      	bcs.n	8000690 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000680:	f002 fb70 	bl	8002d64 <__errno>
 8000684:	4603      	mov	r3, r0
 8000686:	220c      	movs	r2, #12
 8000688:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800068a:	f04f 33ff 	mov.w	r3, #4294967295
 800068e:	e009      	b.n	80006a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000690:	4b08      	ldr	r3, [pc, #32]	; (80006b4 <_sbrk+0x64>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000696:	4b07      	ldr	r3, [pc, #28]	; (80006b4 <_sbrk+0x64>)
 8000698:	681a      	ldr	r2, [r3, #0]
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	4413      	add	r3, r2
 800069e:	4a05      	ldr	r2, [pc, #20]	; (80006b4 <_sbrk+0x64>)
 80006a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80006a2:	68fb      	ldr	r3, [r7, #12]
}
 80006a4:	4618      	mov	r0, r3
 80006a6:	3718      	adds	r7, #24
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	20005000 	.word	0x20005000
 80006b0:	00000400 	.word	0x00000400
 80006b4:	20000174 	.word	0x20000174
 80006b8:	20000a28 	.word	0x20000a28

080006bc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006c0:	bf00      	nop
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bc80      	pop	{r7}
 80006c6:	4770      	bx	lr

080006c8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006c8:	480c      	ldr	r0, [pc, #48]	; (80006fc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80006ca:	490d      	ldr	r1, [pc, #52]	; (8000700 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80006cc:	4a0d      	ldr	r2, [pc, #52]	; (8000704 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80006ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006d0:	e002      	b.n	80006d8 <LoopCopyDataInit>

080006d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006d6:	3304      	adds	r3, #4

080006d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006dc:	d3f9      	bcc.n	80006d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006de:	4a0a      	ldr	r2, [pc, #40]	; (8000708 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80006e0:	4c0a      	ldr	r4, [pc, #40]	; (800070c <LoopFillZerobss+0x22>)
  movs r3, #0
 80006e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006e4:	e001      	b.n	80006ea <LoopFillZerobss>

080006e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006e8:	3204      	adds	r2, #4

080006ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006ec:	d3fb      	bcc.n	80006e6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80006ee:	f7ff ffe5 	bl	80006bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006f2:	f002 fb3d 	bl	8002d70 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006f6:	f7ff fd29 	bl	800014c <main>
  bx lr
 80006fa:	4770      	bx	lr
  ldr r0, =_sdata
 80006fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000700:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8000704:	08004630 	.word	0x08004630
  ldr r2, =_sbss
 8000708:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 800070c:	20000a28 	.word	0x20000a28

08000710 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000710:	e7fe      	b.n	8000710 <ADC1_2_IRQHandler>
	...

08000714 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000718:	4b08      	ldr	r3, [pc, #32]	; (800073c <HAL_Init+0x28>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	4a07      	ldr	r2, [pc, #28]	; (800073c <HAL_Init+0x28>)
 800071e:	f043 0310 	orr.w	r3, r3, #16
 8000722:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000724:	2003      	movs	r0, #3
 8000726:	f000 f923 	bl	8000970 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800072a:	200f      	movs	r0, #15
 800072c:	f000 f808 	bl	8000740 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000730:	f7ff fe2c 	bl	800038c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000734:	2300      	movs	r3, #0
}
 8000736:	4618      	mov	r0, r3
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	40022000 	.word	0x40022000

08000740 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000748:	4b12      	ldr	r3, [pc, #72]	; (8000794 <HAL_InitTick+0x54>)
 800074a:	681a      	ldr	r2, [r3, #0]
 800074c:	4b12      	ldr	r3, [pc, #72]	; (8000798 <HAL_InitTick+0x58>)
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	4619      	mov	r1, r3
 8000752:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000756:	fbb3 f3f1 	udiv	r3, r3, r1
 800075a:	fbb2 f3f3 	udiv	r3, r2, r3
 800075e:	4618      	mov	r0, r3
 8000760:	f000 f93b 	bl	80009da <HAL_SYSTICK_Config>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800076a:	2301      	movs	r3, #1
 800076c:	e00e      	b.n	800078c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	2b0f      	cmp	r3, #15
 8000772:	d80a      	bhi.n	800078a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000774:	2200      	movs	r2, #0
 8000776:	6879      	ldr	r1, [r7, #4]
 8000778:	f04f 30ff 	mov.w	r0, #4294967295
 800077c:	f000 f903 	bl	8000986 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000780:	4a06      	ldr	r2, [pc, #24]	; (800079c <HAL_InitTick+0x5c>)
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000786:	2300      	movs	r3, #0
 8000788:	e000      	b.n	800078c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800078a:	2301      	movs	r3, #1
}
 800078c:	4618      	mov	r0, r3
 800078e:	3708      	adds	r7, #8
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	20000000 	.word	0x20000000
 8000798:	20000008 	.word	0x20000008
 800079c:	20000004 	.word	0x20000004

080007a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007a4:	4b05      	ldr	r3, [pc, #20]	; (80007bc <HAL_IncTick+0x1c>)
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	461a      	mov	r2, r3
 80007aa:	4b05      	ldr	r3, [pc, #20]	; (80007c0 <HAL_IncTick+0x20>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	4413      	add	r3, r2
 80007b0:	4a03      	ldr	r2, [pc, #12]	; (80007c0 <HAL_IncTick+0x20>)
 80007b2:	6013      	str	r3, [r2, #0]
}
 80007b4:	bf00      	nop
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bc80      	pop	{r7}
 80007ba:	4770      	bx	lr
 80007bc:	20000008 	.word	0x20000008
 80007c0:	20000178 	.word	0x20000178

080007c4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
  return uwTick;
 80007c8:	4b02      	ldr	r3, [pc, #8]	; (80007d4 <HAL_GetTick+0x10>)
 80007ca:	681b      	ldr	r3, [r3, #0]
}
 80007cc:	4618      	mov	r0, r3
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bc80      	pop	{r7}
 80007d2:	4770      	bx	lr
 80007d4:	20000178 	.word	0x20000178

080007d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007d8:	b480      	push	{r7}
 80007da:	b085      	sub	sp, #20
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	f003 0307 	and.w	r3, r3, #7
 80007e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007e8:	4b0c      	ldr	r3, [pc, #48]	; (800081c <__NVIC_SetPriorityGrouping+0x44>)
 80007ea:	68db      	ldr	r3, [r3, #12]
 80007ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007ee:	68ba      	ldr	r2, [r7, #8]
 80007f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007f4:	4013      	ands	r3, r2
 80007f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007fc:	68bb      	ldr	r3, [r7, #8]
 80007fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000800:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000804:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000808:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800080a:	4a04      	ldr	r2, [pc, #16]	; (800081c <__NVIC_SetPriorityGrouping+0x44>)
 800080c:	68bb      	ldr	r3, [r7, #8]
 800080e:	60d3      	str	r3, [r2, #12]
}
 8000810:	bf00      	nop
 8000812:	3714      	adds	r7, #20
 8000814:	46bd      	mov	sp, r7
 8000816:	bc80      	pop	{r7}
 8000818:	4770      	bx	lr
 800081a:	bf00      	nop
 800081c:	e000ed00 	.word	0xe000ed00

08000820 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000824:	4b04      	ldr	r3, [pc, #16]	; (8000838 <__NVIC_GetPriorityGrouping+0x18>)
 8000826:	68db      	ldr	r3, [r3, #12]
 8000828:	0a1b      	lsrs	r3, r3, #8
 800082a:	f003 0307 	and.w	r3, r3, #7
}
 800082e:	4618      	mov	r0, r3
 8000830:	46bd      	mov	sp, r7
 8000832:	bc80      	pop	{r7}
 8000834:	4770      	bx	lr
 8000836:	bf00      	nop
 8000838:	e000ed00 	.word	0xe000ed00

0800083c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800083c:	b480      	push	{r7}
 800083e:	b083      	sub	sp, #12
 8000840:	af00      	add	r7, sp, #0
 8000842:	4603      	mov	r3, r0
 8000844:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800084a:	2b00      	cmp	r3, #0
 800084c:	db0b      	blt.n	8000866 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800084e:	79fb      	ldrb	r3, [r7, #7]
 8000850:	f003 021f 	and.w	r2, r3, #31
 8000854:	4906      	ldr	r1, [pc, #24]	; (8000870 <__NVIC_EnableIRQ+0x34>)
 8000856:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800085a:	095b      	lsrs	r3, r3, #5
 800085c:	2001      	movs	r0, #1
 800085e:	fa00 f202 	lsl.w	r2, r0, r2
 8000862:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000866:	bf00      	nop
 8000868:	370c      	adds	r7, #12
 800086a:	46bd      	mov	sp, r7
 800086c:	bc80      	pop	{r7}
 800086e:	4770      	bx	lr
 8000870:	e000e100 	.word	0xe000e100

08000874 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000874:	b480      	push	{r7}
 8000876:	b083      	sub	sp, #12
 8000878:	af00      	add	r7, sp, #0
 800087a:	4603      	mov	r3, r0
 800087c:	6039      	str	r1, [r7, #0]
 800087e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000880:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000884:	2b00      	cmp	r3, #0
 8000886:	db0a      	blt.n	800089e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000888:	683b      	ldr	r3, [r7, #0]
 800088a:	b2da      	uxtb	r2, r3
 800088c:	490c      	ldr	r1, [pc, #48]	; (80008c0 <__NVIC_SetPriority+0x4c>)
 800088e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000892:	0112      	lsls	r2, r2, #4
 8000894:	b2d2      	uxtb	r2, r2
 8000896:	440b      	add	r3, r1
 8000898:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800089c:	e00a      	b.n	80008b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800089e:	683b      	ldr	r3, [r7, #0]
 80008a0:	b2da      	uxtb	r2, r3
 80008a2:	4908      	ldr	r1, [pc, #32]	; (80008c4 <__NVIC_SetPriority+0x50>)
 80008a4:	79fb      	ldrb	r3, [r7, #7]
 80008a6:	f003 030f 	and.w	r3, r3, #15
 80008aa:	3b04      	subs	r3, #4
 80008ac:	0112      	lsls	r2, r2, #4
 80008ae:	b2d2      	uxtb	r2, r2
 80008b0:	440b      	add	r3, r1
 80008b2:	761a      	strb	r2, [r3, #24]
}
 80008b4:	bf00      	nop
 80008b6:	370c      	adds	r7, #12
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bc80      	pop	{r7}
 80008bc:	4770      	bx	lr
 80008be:	bf00      	nop
 80008c0:	e000e100 	.word	0xe000e100
 80008c4:	e000ed00 	.word	0xe000ed00

080008c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b089      	sub	sp, #36	; 0x24
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	60f8      	str	r0, [r7, #12]
 80008d0:	60b9      	str	r1, [r7, #8]
 80008d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	f003 0307 	and.w	r3, r3, #7
 80008da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008dc:	69fb      	ldr	r3, [r7, #28]
 80008de:	f1c3 0307 	rsb	r3, r3, #7
 80008e2:	2b04      	cmp	r3, #4
 80008e4:	bf28      	it	cs
 80008e6:	2304      	movcs	r3, #4
 80008e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008ea:	69fb      	ldr	r3, [r7, #28]
 80008ec:	3304      	adds	r3, #4
 80008ee:	2b06      	cmp	r3, #6
 80008f0:	d902      	bls.n	80008f8 <NVIC_EncodePriority+0x30>
 80008f2:	69fb      	ldr	r3, [r7, #28]
 80008f4:	3b03      	subs	r3, #3
 80008f6:	e000      	b.n	80008fa <NVIC_EncodePriority+0x32>
 80008f8:	2300      	movs	r3, #0
 80008fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008fc:	f04f 32ff 	mov.w	r2, #4294967295
 8000900:	69bb      	ldr	r3, [r7, #24]
 8000902:	fa02 f303 	lsl.w	r3, r2, r3
 8000906:	43da      	mvns	r2, r3
 8000908:	68bb      	ldr	r3, [r7, #8]
 800090a:	401a      	ands	r2, r3
 800090c:	697b      	ldr	r3, [r7, #20]
 800090e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000910:	f04f 31ff 	mov.w	r1, #4294967295
 8000914:	697b      	ldr	r3, [r7, #20]
 8000916:	fa01 f303 	lsl.w	r3, r1, r3
 800091a:	43d9      	mvns	r1, r3
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000920:	4313      	orrs	r3, r2
         );
}
 8000922:	4618      	mov	r0, r3
 8000924:	3724      	adds	r7, #36	; 0x24
 8000926:	46bd      	mov	sp, r7
 8000928:	bc80      	pop	{r7}
 800092a:	4770      	bx	lr

0800092c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	3b01      	subs	r3, #1
 8000938:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800093c:	d301      	bcc.n	8000942 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800093e:	2301      	movs	r3, #1
 8000940:	e00f      	b.n	8000962 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000942:	4a0a      	ldr	r2, [pc, #40]	; (800096c <SysTick_Config+0x40>)
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	3b01      	subs	r3, #1
 8000948:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800094a:	210f      	movs	r1, #15
 800094c:	f04f 30ff 	mov.w	r0, #4294967295
 8000950:	f7ff ff90 	bl	8000874 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000954:	4b05      	ldr	r3, [pc, #20]	; (800096c <SysTick_Config+0x40>)
 8000956:	2200      	movs	r2, #0
 8000958:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800095a:	4b04      	ldr	r3, [pc, #16]	; (800096c <SysTick_Config+0x40>)
 800095c:	2207      	movs	r2, #7
 800095e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000960:	2300      	movs	r3, #0
}
 8000962:	4618      	mov	r0, r3
 8000964:	3708      	adds	r7, #8
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	e000e010 	.word	0xe000e010

08000970 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000978:	6878      	ldr	r0, [r7, #4]
 800097a:	f7ff ff2d 	bl	80007d8 <__NVIC_SetPriorityGrouping>
}
 800097e:	bf00      	nop
 8000980:	3708      	adds	r7, #8
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}

08000986 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000986:	b580      	push	{r7, lr}
 8000988:	b086      	sub	sp, #24
 800098a:	af00      	add	r7, sp, #0
 800098c:	4603      	mov	r3, r0
 800098e:	60b9      	str	r1, [r7, #8]
 8000990:	607a      	str	r2, [r7, #4]
 8000992:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000994:	2300      	movs	r3, #0
 8000996:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000998:	f7ff ff42 	bl	8000820 <__NVIC_GetPriorityGrouping>
 800099c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800099e:	687a      	ldr	r2, [r7, #4]
 80009a0:	68b9      	ldr	r1, [r7, #8]
 80009a2:	6978      	ldr	r0, [r7, #20]
 80009a4:	f7ff ff90 	bl	80008c8 <NVIC_EncodePriority>
 80009a8:	4602      	mov	r2, r0
 80009aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009ae:	4611      	mov	r1, r2
 80009b0:	4618      	mov	r0, r3
 80009b2:	f7ff ff5f 	bl	8000874 <__NVIC_SetPriority>
}
 80009b6:	bf00      	nop
 80009b8:	3718      	adds	r7, #24
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}

080009be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009be:	b580      	push	{r7, lr}
 80009c0:	b082      	sub	sp, #8
 80009c2:	af00      	add	r7, sp, #0
 80009c4:	4603      	mov	r3, r0
 80009c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009cc:	4618      	mov	r0, r3
 80009ce:	f7ff ff35 	bl	800083c <__NVIC_EnableIRQ>
}
 80009d2:	bf00      	nop
 80009d4:	3708      	adds	r7, #8
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}

080009da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009da:	b580      	push	{r7, lr}
 80009dc:	b082      	sub	sp, #8
 80009de:	af00      	add	r7, sp, #0
 80009e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009e2:	6878      	ldr	r0, [r7, #4]
 80009e4:	f7ff ffa2 	bl	800092c <SysTick_Config>
 80009e8:	4603      	mov	r3, r0
}
 80009ea:	4618      	mov	r0, r3
 80009ec:	3708      	adds	r7, #8
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}

080009f2 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80009f2:	b580      	push	{r7, lr}
 80009f4:	b082      	sub	sp, #8
 80009f6:	af00      	add	r7, sp, #0
 80009f8:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d101      	bne.n	8000a04 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8000a00:	2301      	movs	r3, #1
 8000a02:	e00e      	b.n	8000a22 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	795b      	ldrb	r3, [r3, #5]
 8000a08:	b2db      	uxtb	r3, r3
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d105      	bne.n	8000a1a <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	2200      	movs	r2, #0
 8000a12:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8000a14:	6878      	ldr	r0, [r7, #4]
 8000a16:	f7ff fcdb 	bl	80003d0 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8000a20:	2300      	movs	r3, #0
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	3708      	adds	r7, #8
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}

08000a2a <HAL_CRC_Calculate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8000a2a:	b480      	push	{r7}
 8000a2c:	b087      	sub	sp, #28
 8000a2e:	af00      	add	r7, sp, #0
 8000a30:	60f8      	str	r0, [r7, #12]
 8000a32:	60b9      	str	r1, [r7, #8]
 8000a34:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8000a36:	2300      	movs	r3, #0
 8000a38:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	2202      	movs	r2, #2
 8000a3e:	715a      	strb	r2, [r3, #5]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	689a      	ldr	r2, [r3, #8]
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	f042 0201 	orr.w	r2, r2, #1
 8000a4e:	609a      	str	r2, [r3, #8]

  /* Enter 32-bit input data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 8000a50:	2300      	movs	r3, #0
 8000a52:	617b      	str	r3, [r7, #20]
 8000a54:	e00a      	b.n	8000a6c <HAL_CRC_Calculate+0x42>
  {
    hcrc->Instance->DR = pBuffer[index];
 8000a56:	697b      	ldr	r3, [r7, #20]
 8000a58:	009b      	lsls	r3, r3, #2
 8000a5a:	68ba      	ldr	r2, [r7, #8]
 8000a5c:	441a      	add	r2, r3
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	6812      	ldr	r2, [r2, #0]
 8000a64:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 8000a66:	697b      	ldr	r3, [r7, #20]
 8000a68:	3301      	adds	r3, #1
 8000a6a:	617b      	str	r3, [r7, #20]
 8000a6c:	697a      	ldr	r2, [r7, #20]
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	429a      	cmp	r2, r3
 8000a72:	d3f0      	bcc.n	8000a56 <HAL_CRC_Calculate+0x2c>
  }
  temp = hcrc->Instance->DR;
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	2201      	movs	r2, #1
 8000a80:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 8000a82:	693b      	ldr	r3, [r7, #16]
}
 8000a84:	4618      	mov	r0, r3
 8000a86:	371c      	adds	r7, #28
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bc80      	pop	{r7}
 8000a8c:	4770      	bx	lr
	...

08000a90 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b085      	sub	sp, #20
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d101      	bne.n	8000aa6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	e043      	b.n	8000b2e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	461a      	mov	r2, r3
 8000aac:	4b22      	ldr	r3, [pc, #136]	; (8000b38 <HAL_DMA_Init+0xa8>)
 8000aae:	4413      	add	r3, r2
 8000ab0:	4a22      	ldr	r2, [pc, #136]	; (8000b3c <HAL_DMA_Init+0xac>)
 8000ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ab6:	091b      	lsrs	r3, r3, #4
 8000ab8:	009a      	lsls	r2, r3, #2
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	4a1f      	ldr	r2, [pc, #124]	; (8000b40 <HAL_DMA_Init+0xb0>)
 8000ac2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	2202      	movs	r2, #2
 8000ac8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000ada:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000ade:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000ae8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	68db      	ldr	r3, [r3, #12]
 8000aee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000af4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	695b      	ldr	r3, [r3, #20]
 8000afa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b00:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	69db      	ldr	r3, [r3, #28]
 8000b06:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000b08:	68fa      	ldr	r2, [r7, #12]
 8000b0a:	4313      	orrs	r3, r2
 8000b0c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	68fa      	ldr	r2, [r7, #12]
 8000b14:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	2200      	movs	r2, #0
 8000b1a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	2201      	movs	r2, #1
 8000b20:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	2200      	movs	r2, #0
 8000b28:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000b2c:	2300      	movs	r3, #0
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	3714      	adds	r7, #20
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bc80      	pop	{r7}
 8000b36:	4770      	bx	lr
 8000b38:	bffdfff8 	.word	0xbffdfff8
 8000b3c:	cccccccd 	.word	0xcccccccd
 8000b40:	40020000 	.word	0x40020000

08000b44 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b086      	sub	sp, #24
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	60f8      	str	r0, [r7, #12]
 8000b4c:	60b9      	str	r1, [r7, #8]
 8000b4e:	607a      	str	r2, [r7, #4]
 8000b50:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000b52:	2300      	movs	r3, #0
 8000b54:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b5c:	2b01      	cmp	r3, #1
 8000b5e:	d101      	bne.n	8000b64 <HAL_DMA_Start_IT+0x20>
 8000b60:	2302      	movs	r3, #2
 8000b62:	e04a      	b.n	8000bfa <HAL_DMA_Start_IT+0xb6>
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	2201      	movs	r2, #1
 8000b68:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000b72:	2b01      	cmp	r3, #1
 8000b74:	d13a      	bne.n	8000bec <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	2202      	movs	r2, #2
 8000b7a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	2200      	movs	r2, #0
 8000b82:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	681a      	ldr	r2, [r3, #0]
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	f022 0201 	bic.w	r2, r2, #1
 8000b92:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	687a      	ldr	r2, [r7, #4]
 8000b98:	68b9      	ldr	r1, [r7, #8]
 8000b9a:	68f8      	ldr	r0, [r7, #12]
 8000b9c:	f000 f972 	bl	8000e84 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d008      	beq.n	8000bba <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	681a      	ldr	r2, [r3, #0]
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	f042 020e 	orr.w	r2, r2, #14
 8000bb6:	601a      	str	r2, [r3, #0]
 8000bb8:	e00f      	b.n	8000bda <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	681a      	ldr	r2, [r3, #0]
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	f022 0204 	bic.w	r2, r2, #4
 8000bc8:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	681a      	ldr	r2, [r3, #0]
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	f042 020a 	orr.w	r2, r2, #10
 8000bd8:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	681a      	ldr	r2, [r3, #0]
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	f042 0201 	orr.w	r2, r2, #1
 8000be8:	601a      	str	r2, [r3, #0]
 8000bea:	e005      	b.n	8000bf8 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	2200      	movs	r2, #0
 8000bf0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8000bf8:	7dfb      	ldrb	r3, [r7, #23]
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	3718      	adds	r7, #24
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}

08000c02 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000c02:	b480      	push	{r7}
 8000c04:	b085      	sub	sp, #20
 8000c06:	af00      	add	r7, sp, #0
 8000c08:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000c14:	2b02      	cmp	r3, #2
 8000c16:	d008      	beq.n	8000c2a <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	2204      	movs	r2, #4
 8000c1c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	2200      	movs	r2, #0
 8000c22:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000c26:	2301      	movs	r3, #1
 8000c28:	e020      	b.n	8000c6c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	681a      	ldr	r2, [r3, #0]
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	f022 020e 	bic.w	r2, r2, #14
 8000c38:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	681a      	ldr	r2, [r3, #0]
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	f022 0201 	bic.w	r2, r2, #1
 8000c48:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c52:	2101      	movs	r1, #1
 8000c54:	fa01 f202 	lsl.w	r2, r1, r2
 8000c58:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	2200      	movs	r2, #0
 8000c66:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000c6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	3714      	adds	r7, #20
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bc80      	pop	{r7}
 8000c74:	4770      	bx	lr
	...

08000c78 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b084      	sub	sp, #16
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c94:	2204      	movs	r2, #4
 8000c96:	409a      	lsls	r2, r3
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	4013      	ands	r3, r2
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d04f      	beq.n	8000d40 <HAL_DMA_IRQHandler+0xc8>
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	f003 0304 	and.w	r3, r3, #4
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d04a      	beq.n	8000d40 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	f003 0320 	and.w	r3, r3, #32
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d107      	bne.n	8000cc8 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	681a      	ldr	r2, [r3, #0]
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	f022 0204 	bic.w	r2, r2, #4
 8000cc6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a66      	ldr	r2, [pc, #408]	; (8000e68 <HAL_DMA_IRQHandler+0x1f0>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d029      	beq.n	8000d26 <HAL_DMA_IRQHandler+0xae>
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4a65      	ldr	r2, [pc, #404]	; (8000e6c <HAL_DMA_IRQHandler+0x1f4>)
 8000cd8:	4293      	cmp	r3, r2
 8000cda:	d022      	beq.n	8000d22 <HAL_DMA_IRQHandler+0xaa>
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a63      	ldr	r2, [pc, #396]	; (8000e70 <HAL_DMA_IRQHandler+0x1f8>)
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d01a      	beq.n	8000d1c <HAL_DMA_IRQHandler+0xa4>
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	4a62      	ldr	r2, [pc, #392]	; (8000e74 <HAL_DMA_IRQHandler+0x1fc>)
 8000cec:	4293      	cmp	r3, r2
 8000cee:	d012      	beq.n	8000d16 <HAL_DMA_IRQHandler+0x9e>
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a60      	ldr	r2, [pc, #384]	; (8000e78 <HAL_DMA_IRQHandler+0x200>)
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d00a      	beq.n	8000d10 <HAL_DMA_IRQHandler+0x98>
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	4a5f      	ldr	r2, [pc, #380]	; (8000e7c <HAL_DMA_IRQHandler+0x204>)
 8000d00:	4293      	cmp	r3, r2
 8000d02:	d102      	bne.n	8000d0a <HAL_DMA_IRQHandler+0x92>
 8000d04:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d08:	e00e      	b.n	8000d28 <HAL_DMA_IRQHandler+0xb0>
 8000d0a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000d0e:	e00b      	b.n	8000d28 <HAL_DMA_IRQHandler+0xb0>
 8000d10:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000d14:	e008      	b.n	8000d28 <HAL_DMA_IRQHandler+0xb0>
 8000d16:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000d1a:	e005      	b.n	8000d28 <HAL_DMA_IRQHandler+0xb0>
 8000d1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d20:	e002      	b.n	8000d28 <HAL_DMA_IRQHandler+0xb0>
 8000d22:	2340      	movs	r3, #64	; 0x40
 8000d24:	e000      	b.n	8000d28 <HAL_DMA_IRQHandler+0xb0>
 8000d26:	2304      	movs	r3, #4
 8000d28:	4a55      	ldr	r2, [pc, #340]	; (8000e80 <HAL_DMA_IRQHandler+0x208>)
 8000d2a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	f000 8094 	beq.w	8000e5e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d3a:	6878      	ldr	r0, [r7, #4]
 8000d3c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8000d3e:	e08e      	b.n	8000e5e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d44:	2202      	movs	r2, #2
 8000d46:	409a      	lsls	r2, r3
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	4013      	ands	r3, r2
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d056      	beq.n	8000dfe <HAL_DMA_IRQHandler+0x186>
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	f003 0302 	and.w	r3, r3, #2
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d051      	beq.n	8000dfe <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	f003 0320 	and.w	r3, r3, #32
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d10b      	bne.n	8000d80 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	681a      	ldr	r2, [r3, #0]
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f022 020a 	bic.w	r2, r2, #10
 8000d76:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a38      	ldr	r2, [pc, #224]	; (8000e68 <HAL_DMA_IRQHandler+0x1f0>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d029      	beq.n	8000dde <HAL_DMA_IRQHandler+0x166>
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4a37      	ldr	r2, [pc, #220]	; (8000e6c <HAL_DMA_IRQHandler+0x1f4>)
 8000d90:	4293      	cmp	r3, r2
 8000d92:	d022      	beq.n	8000dda <HAL_DMA_IRQHandler+0x162>
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a35      	ldr	r2, [pc, #212]	; (8000e70 <HAL_DMA_IRQHandler+0x1f8>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d01a      	beq.n	8000dd4 <HAL_DMA_IRQHandler+0x15c>
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	4a34      	ldr	r2, [pc, #208]	; (8000e74 <HAL_DMA_IRQHandler+0x1fc>)
 8000da4:	4293      	cmp	r3, r2
 8000da6:	d012      	beq.n	8000dce <HAL_DMA_IRQHandler+0x156>
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a32      	ldr	r2, [pc, #200]	; (8000e78 <HAL_DMA_IRQHandler+0x200>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d00a      	beq.n	8000dc8 <HAL_DMA_IRQHandler+0x150>
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	4a31      	ldr	r2, [pc, #196]	; (8000e7c <HAL_DMA_IRQHandler+0x204>)
 8000db8:	4293      	cmp	r3, r2
 8000dba:	d102      	bne.n	8000dc2 <HAL_DMA_IRQHandler+0x14a>
 8000dbc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000dc0:	e00e      	b.n	8000de0 <HAL_DMA_IRQHandler+0x168>
 8000dc2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000dc6:	e00b      	b.n	8000de0 <HAL_DMA_IRQHandler+0x168>
 8000dc8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000dcc:	e008      	b.n	8000de0 <HAL_DMA_IRQHandler+0x168>
 8000dce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dd2:	e005      	b.n	8000de0 <HAL_DMA_IRQHandler+0x168>
 8000dd4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000dd8:	e002      	b.n	8000de0 <HAL_DMA_IRQHandler+0x168>
 8000dda:	2320      	movs	r3, #32
 8000ddc:	e000      	b.n	8000de0 <HAL_DMA_IRQHandler+0x168>
 8000dde:	2302      	movs	r3, #2
 8000de0:	4a27      	ldr	r2, [pc, #156]	; (8000e80 <HAL_DMA_IRQHandler+0x208>)
 8000de2:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	2200      	movs	r2, #0
 8000de8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d034      	beq.n	8000e5e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000df8:	6878      	ldr	r0, [r7, #4]
 8000dfa:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000dfc:	e02f      	b.n	8000e5e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e02:	2208      	movs	r2, #8
 8000e04:	409a      	lsls	r2, r3
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	4013      	ands	r3, r2
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d028      	beq.n	8000e60 <HAL_DMA_IRQHandler+0x1e8>
 8000e0e:	68bb      	ldr	r3, [r7, #8]
 8000e10:	f003 0308 	and.w	r3, r3, #8
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d023      	beq.n	8000e60 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	681a      	ldr	r2, [r3, #0]
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	f022 020e 	bic.w	r2, r2, #14
 8000e26:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e30:	2101      	movs	r1, #1
 8000e32:	fa01 f202 	lsl.w	r2, r1, r2
 8000e36:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	2201      	movs	r2, #1
 8000e42:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	2200      	movs	r2, #0
 8000e4a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d004      	beq.n	8000e60 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5a:	6878      	ldr	r0, [r7, #4]
 8000e5c:	4798      	blx	r3
    }
  }
  return;
 8000e5e:	bf00      	nop
 8000e60:	bf00      	nop
}
 8000e62:	3710      	adds	r7, #16
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	40020008 	.word	0x40020008
 8000e6c:	4002001c 	.word	0x4002001c
 8000e70:	40020030 	.word	0x40020030
 8000e74:	40020044 	.word	0x40020044
 8000e78:	40020058 	.word	0x40020058
 8000e7c:	4002006c 	.word	0x4002006c
 8000e80:	40020000 	.word	0x40020000

08000e84 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b085      	sub	sp, #20
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	60f8      	str	r0, [r7, #12]
 8000e8c:	60b9      	str	r1, [r7, #8]
 8000e8e:	607a      	str	r2, [r7, #4]
 8000e90:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e9a:	2101      	movs	r1, #1
 8000e9c:	fa01 f202 	lsl.w	r2, r1, r2
 8000ea0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	683a      	ldr	r2, [r7, #0]
 8000ea8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	2b10      	cmp	r3, #16
 8000eb0:	d108      	bne.n	8000ec4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	687a      	ldr	r2, [r7, #4]
 8000eb8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	68ba      	ldr	r2, [r7, #8]
 8000ec0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000ec2:	e007      	b.n	8000ed4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	68ba      	ldr	r2, [r7, #8]
 8000eca:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	687a      	ldr	r2, [r7, #4]
 8000ed2:	60da      	str	r2, [r3, #12]
}
 8000ed4:	bf00      	nop
 8000ed6:	3714      	adds	r7, #20
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bc80      	pop	{r7}
 8000edc:	4770      	bx	lr
	...

08000ee0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b08b      	sub	sp, #44	; 0x2c
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
 8000ee8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000eea:	2300      	movs	r3, #0
 8000eec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ef2:	e169      	b.n	80011c8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8000efc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	69fa      	ldr	r2, [r7, #28]
 8000f04:	4013      	ands	r3, r2
 8000f06:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000f08:	69ba      	ldr	r2, [r7, #24]
 8000f0a:	69fb      	ldr	r3, [r7, #28]
 8000f0c:	429a      	cmp	r2, r3
 8000f0e:	f040 8158 	bne.w	80011c2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	4a9a      	ldr	r2, [pc, #616]	; (8001180 <HAL_GPIO_Init+0x2a0>)
 8000f18:	4293      	cmp	r3, r2
 8000f1a:	d05e      	beq.n	8000fda <HAL_GPIO_Init+0xfa>
 8000f1c:	4a98      	ldr	r2, [pc, #608]	; (8001180 <HAL_GPIO_Init+0x2a0>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d875      	bhi.n	800100e <HAL_GPIO_Init+0x12e>
 8000f22:	4a98      	ldr	r2, [pc, #608]	; (8001184 <HAL_GPIO_Init+0x2a4>)
 8000f24:	4293      	cmp	r3, r2
 8000f26:	d058      	beq.n	8000fda <HAL_GPIO_Init+0xfa>
 8000f28:	4a96      	ldr	r2, [pc, #600]	; (8001184 <HAL_GPIO_Init+0x2a4>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d86f      	bhi.n	800100e <HAL_GPIO_Init+0x12e>
 8000f2e:	4a96      	ldr	r2, [pc, #600]	; (8001188 <HAL_GPIO_Init+0x2a8>)
 8000f30:	4293      	cmp	r3, r2
 8000f32:	d052      	beq.n	8000fda <HAL_GPIO_Init+0xfa>
 8000f34:	4a94      	ldr	r2, [pc, #592]	; (8001188 <HAL_GPIO_Init+0x2a8>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d869      	bhi.n	800100e <HAL_GPIO_Init+0x12e>
 8000f3a:	4a94      	ldr	r2, [pc, #592]	; (800118c <HAL_GPIO_Init+0x2ac>)
 8000f3c:	4293      	cmp	r3, r2
 8000f3e:	d04c      	beq.n	8000fda <HAL_GPIO_Init+0xfa>
 8000f40:	4a92      	ldr	r2, [pc, #584]	; (800118c <HAL_GPIO_Init+0x2ac>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d863      	bhi.n	800100e <HAL_GPIO_Init+0x12e>
 8000f46:	4a92      	ldr	r2, [pc, #584]	; (8001190 <HAL_GPIO_Init+0x2b0>)
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	d046      	beq.n	8000fda <HAL_GPIO_Init+0xfa>
 8000f4c:	4a90      	ldr	r2, [pc, #576]	; (8001190 <HAL_GPIO_Init+0x2b0>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d85d      	bhi.n	800100e <HAL_GPIO_Init+0x12e>
 8000f52:	2b12      	cmp	r3, #18
 8000f54:	d82a      	bhi.n	8000fac <HAL_GPIO_Init+0xcc>
 8000f56:	2b12      	cmp	r3, #18
 8000f58:	d859      	bhi.n	800100e <HAL_GPIO_Init+0x12e>
 8000f5a:	a201      	add	r2, pc, #4	; (adr r2, 8000f60 <HAL_GPIO_Init+0x80>)
 8000f5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f60:	08000fdb 	.word	0x08000fdb
 8000f64:	08000fb5 	.word	0x08000fb5
 8000f68:	08000fc7 	.word	0x08000fc7
 8000f6c:	08001009 	.word	0x08001009
 8000f70:	0800100f 	.word	0x0800100f
 8000f74:	0800100f 	.word	0x0800100f
 8000f78:	0800100f 	.word	0x0800100f
 8000f7c:	0800100f 	.word	0x0800100f
 8000f80:	0800100f 	.word	0x0800100f
 8000f84:	0800100f 	.word	0x0800100f
 8000f88:	0800100f 	.word	0x0800100f
 8000f8c:	0800100f 	.word	0x0800100f
 8000f90:	0800100f 	.word	0x0800100f
 8000f94:	0800100f 	.word	0x0800100f
 8000f98:	0800100f 	.word	0x0800100f
 8000f9c:	0800100f 	.word	0x0800100f
 8000fa0:	0800100f 	.word	0x0800100f
 8000fa4:	08000fbd 	.word	0x08000fbd
 8000fa8:	08000fd1 	.word	0x08000fd1
 8000fac:	4a79      	ldr	r2, [pc, #484]	; (8001194 <HAL_GPIO_Init+0x2b4>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d013      	beq.n	8000fda <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000fb2:	e02c      	b.n	800100e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	68db      	ldr	r3, [r3, #12]
 8000fb8:	623b      	str	r3, [r7, #32]
          break;
 8000fba:	e029      	b.n	8001010 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	68db      	ldr	r3, [r3, #12]
 8000fc0:	3304      	adds	r3, #4
 8000fc2:	623b      	str	r3, [r7, #32]
          break;
 8000fc4:	e024      	b.n	8001010 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	68db      	ldr	r3, [r3, #12]
 8000fca:	3308      	adds	r3, #8
 8000fcc:	623b      	str	r3, [r7, #32]
          break;
 8000fce:	e01f      	b.n	8001010 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	68db      	ldr	r3, [r3, #12]
 8000fd4:	330c      	adds	r3, #12
 8000fd6:	623b      	str	r3, [r7, #32]
          break;
 8000fd8:	e01a      	b.n	8001010 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	689b      	ldr	r3, [r3, #8]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d102      	bne.n	8000fe8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000fe2:	2304      	movs	r3, #4
 8000fe4:	623b      	str	r3, [r7, #32]
          break;
 8000fe6:	e013      	b.n	8001010 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	689b      	ldr	r3, [r3, #8]
 8000fec:	2b01      	cmp	r3, #1
 8000fee:	d105      	bne.n	8000ffc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ff0:	2308      	movs	r3, #8
 8000ff2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	69fa      	ldr	r2, [r7, #28]
 8000ff8:	611a      	str	r2, [r3, #16]
          break;
 8000ffa:	e009      	b.n	8001010 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ffc:	2308      	movs	r3, #8
 8000ffe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	69fa      	ldr	r2, [r7, #28]
 8001004:	615a      	str	r2, [r3, #20]
          break;
 8001006:	e003      	b.n	8001010 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001008:	2300      	movs	r3, #0
 800100a:	623b      	str	r3, [r7, #32]
          break;
 800100c:	e000      	b.n	8001010 <HAL_GPIO_Init+0x130>
          break;
 800100e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001010:	69bb      	ldr	r3, [r7, #24]
 8001012:	2bff      	cmp	r3, #255	; 0xff
 8001014:	d801      	bhi.n	800101a <HAL_GPIO_Init+0x13a>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	e001      	b.n	800101e <HAL_GPIO_Init+0x13e>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	3304      	adds	r3, #4
 800101e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001020:	69bb      	ldr	r3, [r7, #24]
 8001022:	2bff      	cmp	r3, #255	; 0xff
 8001024:	d802      	bhi.n	800102c <HAL_GPIO_Init+0x14c>
 8001026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001028:	009b      	lsls	r3, r3, #2
 800102a:	e002      	b.n	8001032 <HAL_GPIO_Init+0x152>
 800102c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800102e:	3b08      	subs	r3, #8
 8001030:	009b      	lsls	r3, r3, #2
 8001032:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	681a      	ldr	r2, [r3, #0]
 8001038:	210f      	movs	r1, #15
 800103a:	693b      	ldr	r3, [r7, #16]
 800103c:	fa01 f303 	lsl.w	r3, r1, r3
 8001040:	43db      	mvns	r3, r3
 8001042:	401a      	ands	r2, r3
 8001044:	6a39      	ldr	r1, [r7, #32]
 8001046:	693b      	ldr	r3, [r7, #16]
 8001048:	fa01 f303 	lsl.w	r3, r1, r3
 800104c:	431a      	orrs	r2, r3
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800105a:	2b00      	cmp	r3, #0
 800105c:	f000 80b1 	beq.w	80011c2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001060:	4b4d      	ldr	r3, [pc, #308]	; (8001198 <HAL_GPIO_Init+0x2b8>)
 8001062:	699b      	ldr	r3, [r3, #24]
 8001064:	4a4c      	ldr	r2, [pc, #304]	; (8001198 <HAL_GPIO_Init+0x2b8>)
 8001066:	f043 0301 	orr.w	r3, r3, #1
 800106a:	6193      	str	r3, [r2, #24]
 800106c:	4b4a      	ldr	r3, [pc, #296]	; (8001198 <HAL_GPIO_Init+0x2b8>)
 800106e:	699b      	ldr	r3, [r3, #24]
 8001070:	f003 0301 	and.w	r3, r3, #1
 8001074:	60bb      	str	r3, [r7, #8]
 8001076:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001078:	4a48      	ldr	r2, [pc, #288]	; (800119c <HAL_GPIO_Init+0x2bc>)
 800107a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800107c:	089b      	lsrs	r3, r3, #2
 800107e:	3302      	adds	r3, #2
 8001080:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001084:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001088:	f003 0303 	and.w	r3, r3, #3
 800108c:	009b      	lsls	r3, r3, #2
 800108e:	220f      	movs	r2, #15
 8001090:	fa02 f303 	lsl.w	r3, r2, r3
 8001094:	43db      	mvns	r3, r3
 8001096:	68fa      	ldr	r2, [r7, #12]
 8001098:	4013      	ands	r3, r2
 800109a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	4a40      	ldr	r2, [pc, #256]	; (80011a0 <HAL_GPIO_Init+0x2c0>)
 80010a0:	4293      	cmp	r3, r2
 80010a2:	d013      	beq.n	80010cc <HAL_GPIO_Init+0x1ec>
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	4a3f      	ldr	r2, [pc, #252]	; (80011a4 <HAL_GPIO_Init+0x2c4>)
 80010a8:	4293      	cmp	r3, r2
 80010aa:	d00d      	beq.n	80010c8 <HAL_GPIO_Init+0x1e8>
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	4a3e      	ldr	r2, [pc, #248]	; (80011a8 <HAL_GPIO_Init+0x2c8>)
 80010b0:	4293      	cmp	r3, r2
 80010b2:	d007      	beq.n	80010c4 <HAL_GPIO_Init+0x1e4>
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	4a3d      	ldr	r2, [pc, #244]	; (80011ac <HAL_GPIO_Init+0x2cc>)
 80010b8:	4293      	cmp	r3, r2
 80010ba:	d101      	bne.n	80010c0 <HAL_GPIO_Init+0x1e0>
 80010bc:	2303      	movs	r3, #3
 80010be:	e006      	b.n	80010ce <HAL_GPIO_Init+0x1ee>
 80010c0:	2304      	movs	r3, #4
 80010c2:	e004      	b.n	80010ce <HAL_GPIO_Init+0x1ee>
 80010c4:	2302      	movs	r3, #2
 80010c6:	e002      	b.n	80010ce <HAL_GPIO_Init+0x1ee>
 80010c8:	2301      	movs	r3, #1
 80010ca:	e000      	b.n	80010ce <HAL_GPIO_Init+0x1ee>
 80010cc:	2300      	movs	r3, #0
 80010ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010d0:	f002 0203 	and.w	r2, r2, #3
 80010d4:	0092      	lsls	r2, r2, #2
 80010d6:	4093      	lsls	r3, r2
 80010d8:	68fa      	ldr	r2, [r7, #12]
 80010da:	4313      	orrs	r3, r2
 80010dc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80010de:	492f      	ldr	r1, [pc, #188]	; (800119c <HAL_GPIO_Init+0x2bc>)
 80010e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e2:	089b      	lsrs	r3, r3, #2
 80010e4:	3302      	adds	r3, #2
 80010e6:	68fa      	ldr	r2, [r7, #12]
 80010e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d006      	beq.n	8001106 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80010f8:	4b2d      	ldr	r3, [pc, #180]	; (80011b0 <HAL_GPIO_Init+0x2d0>)
 80010fa:	681a      	ldr	r2, [r3, #0]
 80010fc:	492c      	ldr	r1, [pc, #176]	; (80011b0 <HAL_GPIO_Init+0x2d0>)
 80010fe:	69bb      	ldr	r3, [r7, #24]
 8001100:	4313      	orrs	r3, r2
 8001102:	600b      	str	r3, [r1, #0]
 8001104:	e006      	b.n	8001114 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001106:	4b2a      	ldr	r3, [pc, #168]	; (80011b0 <HAL_GPIO_Init+0x2d0>)
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	69bb      	ldr	r3, [r7, #24]
 800110c:	43db      	mvns	r3, r3
 800110e:	4928      	ldr	r1, [pc, #160]	; (80011b0 <HAL_GPIO_Init+0x2d0>)
 8001110:	4013      	ands	r3, r2
 8001112:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800111c:	2b00      	cmp	r3, #0
 800111e:	d006      	beq.n	800112e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001120:	4b23      	ldr	r3, [pc, #140]	; (80011b0 <HAL_GPIO_Init+0x2d0>)
 8001122:	685a      	ldr	r2, [r3, #4]
 8001124:	4922      	ldr	r1, [pc, #136]	; (80011b0 <HAL_GPIO_Init+0x2d0>)
 8001126:	69bb      	ldr	r3, [r7, #24]
 8001128:	4313      	orrs	r3, r2
 800112a:	604b      	str	r3, [r1, #4]
 800112c:	e006      	b.n	800113c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800112e:	4b20      	ldr	r3, [pc, #128]	; (80011b0 <HAL_GPIO_Init+0x2d0>)
 8001130:	685a      	ldr	r2, [r3, #4]
 8001132:	69bb      	ldr	r3, [r7, #24]
 8001134:	43db      	mvns	r3, r3
 8001136:	491e      	ldr	r1, [pc, #120]	; (80011b0 <HAL_GPIO_Init+0x2d0>)
 8001138:	4013      	ands	r3, r2
 800113a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001144:	2b00      	cmp	r3, #0
 8001146:	d006      	beq.n	8001156 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001148:	4b19      	ldr	r3, [pc, #100]	; (80011b0 <HAL_GPIO_Init+0x2d0>)
 800114a:	689a      	ldr	r2, [r3, #8]
 800114c:	4918      	ldr	r1, [pc, #96]	; (80011b0 <HAL_GPIO_Init+0x2d0>)
 800114e:	69bb      	ldr	r3, [r7, #24]
 8001150:	4313      	orrs	r3, r2
 8001152:	608b      	str	r3, [r1, #8]
 8001154:	e006      	b.n	8001164 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001156:	4b16      	ldr	r3, [pc, #88]	; (80011b0 <HAL_GPIO_Init+0x2d0>)
 8001158:	689a      	ldr	r2, [r3, #8]
 800115a:	69bb      	ldr	r3, [r7, #24]
 800115c:	43db      	mvns	r3, r3
 800115e:	4914      	ldr	r1, [pc, #80]	; (80011b0 <HAL_GPIO_Init+0x2d0>)
 8001160:	4013      	ands	r3, r2
 8001162:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800116c:	2b00      	cmp	r3, #0
 800116e:	d021      	beq.n	80011b4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001170:	4b0f      	ldr	r3, [pc, #60]	; (80011b0 <HAL_GPIO_Init+0x2d0>)
 8001172:	68da      	ldr	r2, [r3, #12]
 8001174:	490e      	ldr	r1, [pc, #56]	; (80011b0 <HAL_GPIO_Init+0x2d0>)
 8001176:	69bb      	ldr	r3, [r7, #24]
 8001178:	4313      	orrs	r3, r2
 800117a:	60cb      	str	r3, [r1, #12]
 800117c:	e021      	b.n	80011c2 <HAL_GPIO_Init+0x2e2>
 800117e:	bf00      	nop
 8001180:	10320000 	.word	0x10320000
 8001184:	10310000 	.word	0x10310000
 8001188:	10220000 	.word	0x10220000
 800118c:	10210000 	.word	0x10210000
 8001190:	10120000 	.word	0x10120000
 8001194:	10110000 	.word	0x10110000
 8001198:	40021000 	.word	0x40021000
 800119c:	40010000 	.word	0x40010000
 80011a0:	40010800 	.word	0x40010800
 80011a4:	40010c00 	.word	0x40010c00
 80011a8:	40011000 	.word	0x40011000
 80011ac:	40011400 	.word	0x40011400
 80011b0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80011b4:	4b0b      	ldr	r3, [pc, #44]	; (80011e4 <HAL_GPIO_Init+0x304>)
 80011b6:	68da      	ldr	r2, [r3, #12]
 80011b8:	69bb      	ldr	r3, [r7, #24]
 80011ba:	43db      	mvns	r3, r3
 80011bc:	4909      	ldr	r1, [pc, #36]	; (80011e4 <HAL_GPIO_Init+0x304>)
 80011be:	4013      	ands	r3, r2
 80011c0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80011c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011c4:	3301      	adds	r3, #1
 80011c6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ce:	fa22 f303 	lsr.w	r3, r2, r3
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	f47f ae8e 	bne.w	8000ef4 <HAL_GPIO_Init+0x14>
  }
}
 80011d8:	bf00      	nop
 80011da:	bf00      	nop
 80011dc:	372c      	adds	r7, #44	; 0x2c
 80011de:	46bd      	mov	sp, r7
 80011e0:	bc80      	pop	{r7}
 80011e2:	4770      	bx	lr
 80011e4:	40010400 	.word	0x40010400

080011e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b086      	sub	sp, #24
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d101      	bne.n	80011fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011f6:	2301      	movs	r3, #1
 80011f8:	e272      	b.n	80016e0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f003 0301 	and.w	r3, r3, #1
 8001202:	2b00      	cmp	r3, #0
 8001204:	f000 8087 	beq.w	8001316 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001208:	4b92      	ldr	r3, [pc, #584]	; (8001454 <HAL_RCC_OscConfig+0x26c>)
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	f003 030c 	and.w	r3, r3, #12
 8001210:	2b04      	cmp	r3, #4
 8001212:	d00c      	beq.n	800122e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001214:	4b8f      	ldr	r3, [pc, #572]	; (8001454 <HAL_RCC_OscConfig+0x26c>)
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	f003 030c 	and.w	r3, r3, #12
 800121c:	2b08      	cmp	r3, #8
 800121e:	d112      	bne.n	8001246 <HAL_RCC_OscConfig+0x5e>
 8001220:	4b8c      	ldr	r3, [pc, #560]	; (8001454 <HAL_RCC_OscConfig+0x26c>)
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001228:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800122c:	d10b      	bne.n	8001246 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800122e:	4b89      	ldr	r3, [pc, #548]	; (8001454 <HAL_RCC_OscConfig+0x26c>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001236:	2b00      	cmp	r3, #0
 8001238:	d06c      	beq.n	8001314 <HAL_RCC_OscConfig+0x12c>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d168      	bne.n	8001314 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001242:	2301      	movs	r3, #1
 8001244:	e24c      	b.n	80016e0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800124e:	d106      	bne.n	800125e <HAL_RCC_OscConfig+0x76>
 8001250:	4b80      	ldr	r3, [pc, #512]	; (8001454 <HAL_RCC_OscConfig+0x26c>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a7f      	ldr	r2, [pc, #508]	; (8001454 <HAL_RCC_OscConfig+0x26c>)
 8001256:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800125a:	6013      	str	r3, [r2, #0]
 800125c:	e02e      	b.n	80012bc <HAL_RCC_OscConfig+0xd4>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d10c      	bne.n	8001280 <HAL_RCC_OscConfig+0x98>
 8001266:	4b7b      	ldr	r3, [pc, #492]	; (8001454 <HAL_RCC_OscConfig+0x26c>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4a7a      	ldr	r2, [pc, #488]	; (8001454 <HAL_RCC_OscConfig+0x26c>)
 800126c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001270:	6013      	str	r3, [r2, #0]
 8001272:	4b78      	ldr	r3, [pc, #480]	; (8001454 <HAL_RCC_OscConfig+0x26c>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4a77      	ldr	r2, [pc, #476]	; (8001454 <HAL_RCC_OscConfig+0x26c>)
 8001278:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800127c:	6013      	str	r3, [r2, #0]
 800127e:	e01d      	b.n	80012bc <HAL_RCC_OscConfig+0xd4>
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001288:	d10c      	bne.n	80012a4 <HAL_RCC_OscConfig+0xbc>
 800128a:	4b72      	ldr	r3, [pc, #456]	; (8001454 <HAL_RCC_OscConfig+0x26c>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4a71      	ldr	r2, [pc, #452]	; (8001454 <HAL_RCC_OscConfig+0x26c>)
 8001290:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001294:	6013      	str	r3, [r2, #0]
 8001296:	4b6f      	ldr	r3, [pc, #444]	; (8001454 <HAL_RCC_OscConfig+0x26c>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4a6e      	ldr	r2, [pc, #440]	; (8001454 <HAL_RCC_OscConfig+0x26c>)
 800129c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012a0:	6013      	str	r3, [r2, #0]
 80012a2:	e00b      	b.n	80012bc <HAL_RCC_OscConfig+0xd4>
 80012a4:	4b6b      	ldr	r3, [pc, #428]	; (8001454 <HAL_RCC_OscConfig+0x26c>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a6a      	ldr	r2, [pc, #424]	; (8001454 <HAL_RCC_OscConfig+0x26c>)
 80012aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012ae:	6013      	str	r3, [r2, #0]
 80012b0:	4b68      	ldr	r3, [pc, #416]	; (8001454 <HAL_RCC_OscConfig+0x26c>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a67      	ldr	r2, [pc, #412]	; (8001454 <HAL_RCC_OscConfig+0x26c>)
 80012b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012ba:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d013      	beq.n	80012ec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012c4:	f7ff fa7e 	bl	80007c4 <HAL_GetTick>
 80012c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012ca:	e008      	b.n	80012de <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012cc:	f7ff fa7a 	bl	80007c4 <HAL_GetTick>
 80012d0:	4602      	mov	r2, r0
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	2b64      	cmp	r3, #100	; 0x64
 80012d8:	d901      	bls.n	80012de <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80012da:	2303      	movs	r3, #3
 80012dc:	e200      	b.n	80016e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012de:	4b5d      	ldr	r3, [pc, #372]	; (8001454 <HAL_RCC_OscConfig+0x26c>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d0f0      	beq.n	80012cc <HAL_RCC_OscConfig+0xe4>
 80012ea:	e014      	b.n	8001316 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012ec:	f7ff fa6a 	bl	80007c4 <HAL_GetTick>
 80012f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012f2:	e008      	b.n	8001306 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012f4:	f7ff fa66 	bl	80007c4 <HAL_GetTick>
 80012f8:	4602      	mov	r2, r0
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	2b64      	cmp	r3, #100	; 0x64
 8001300:	d901      	bls.n	8001306 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001302:	2303      	movs	r3, #3
 8001304:	e1ec      	b.n	80016e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001306:	4b53      	ldr	r3, [pc, #332]	; (8001454 <HAL_RCC_OscConfig+0x26c>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800130e:	2b00      	cmp	r3, #0
 8001310:	d1f0      	bne.n	80012f4 <HAL_RCC_OscConfig+0x10c>
 8001312:	e000      	b.n	8001316 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001314:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f003 0302 	and.w	r3, r3, #2
 800131e:	2b00      	cmp	r3, #0
 8001320:	d063      	beq.n	80013ea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001322:	4b4c      	ldr	r3, [pc, #304]	; (8001454 <HAL_RCC_OscConfig+0x26c>)
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	f003 030c 	and.w	r3, r3, #12
 800132a:	2b00      	cmp	r3, #0
 800132c:	d00b      	beq.n	8001346 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800132e:	4b49      	ldr	r3, [pc, #292]	; (8001454 <HAL_RCC_OscConfig+0x26c>)
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	f003 030c 	and.w	r3, r3, #12
 8001336:	2b08      	cmp	r3, #8
 8001338:	d11c      	bne.n	8001374 <HAL_RCC_OscConfig+0x18c>
 800133a:	4b46      	ldr	r3, [pc, #280]	; (8001454 <HAL_RCC_OscConfig+0x26c>)
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001342:	2b00      	cmp	r3, #0
 8001344:	d116      	bne.n	8001374 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001346:	4b43      	ldr	r3, [pc, #268]	; (8001454 <HAL_RCC_OscConfig+0x26c>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f003 0302 	and.w	r3, r3, #2
 800134e:	2b00      	cmp	r3, #0
 8001350:	d005      	beq.n	800135e <HAL_RCC_OscConfig+0x176>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	691b      	ldr	r3, [r3, #16]
 8001356:	2b01      	cmp	r3, #1
 8001358:	d001      	beq.n	800135e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800135a:	2301      	movs	r3, #1
 800135c:	e1c0      	b.n	80016e0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800135e:	4b3d      	ldr	r3, [pc, #244]	; (8001454 <HAL_RCC_OscConfig+0x26c>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	695b      	ldr	r3, [r3, #20]
 800136a:	00db      	lsls	r3, r3, #3
 800136c:	4939      	ldr	r1, [pc, #228]	; (8001454 <HAL_RCC_OscConfig+0x26c>)
 800136e:	4313      	orrs	r3, r2
 8001370:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001372:	e03a      	b.n	80013ea <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	691b      	ldr	r3, [r3, #16]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d020      	beq.n	80013be <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800137c:	4b36      	ldr	r3, [pc, #216]	; (8001458 <HAL_RCC_OscConfig+0x270>)
 800137e:	2201      	movs	r2, #1
 8001380:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001382:	f7ff fa1f 	bl	80007c4 <HAL_GetTick>
 8001386:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001388:	e008      	b.n	800139c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800138a:	f7ff fa1b 	bl	80007c4 <HAL_GetTick>
 800138e:	4602      	mov	r2, r0
 8001390:	693b      	ldr	r3, [r7, #16]
 8001392:	1ad3      	subs	r3, r2, r3
 8001394:	2b02      	cmp	r3, #2
 8001396:	d901      	bls.n	800139c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001398:	2303      	movs	r3, #3
 800139a:	e1a1      	b.n	80016e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800139c:	4b2d      	ldr	r3, [pc, #180]	; (8001454 <HAL_RCC_OscConfig+0x26c>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f003 0302 	and.w	r3, r3, #2
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d0f0      	beq.n	800138a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013a8:	4b2a      	ldr	r3, [pc, #168]	; (8001454 <HAL_RCC_OscConfig+0x26c>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	695b      	ldr	r3, [r3, #20]
 80013b4:	00db      	lsls	r3, r3, #3
 80013b6:	4927      	ldr	r1, [pc, #156]	; (8001454 <HAL_RCC_OscConfig+0x26c>)
 80013b8:	4313      	orrs	r3, r2
 80013ba:	600b      	str	r3, [r1, #0]
 80013bc:	e015      	b.n	80013ea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013be:	4b26      	ldr	r3, [pc, #152]	; (8001458 <HAL_RCC_OscConfig+0x270>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013c4:	f7ff f9fe 	bl	80007c4 <HAL_GetTick>
 80013c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013ca:	e008      	b.n	80013de <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013cc:	f7ff f9fa 	bl	80007c4 <HAL_GetTick>
 80013d0:	4602      	mov	r2, r0
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	2b02      	cmp	r3, #2
 80013d8:	d901      	bls.n	80013de <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80013da:	2303      	movs	r3, #3
 80013dc:	e180      	b.n	80016e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013de:	4b1d      	ldr	r3, [pc, #116]	; (8001454 <HAL_RCC_OscConfig+0x26c>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f003 0302 	and.w	r3, r3, #2
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d1f0      	bne.n	80013cc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f003 0308 	and.w	r3, r3, #8
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d03a      	beq.n	800146c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	699b      	ldr	r3, [r3, #24]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d019      	beq.n	8001432 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013fe:	4b17      	ldr	r3, [pc, #92]	; (800145c <HAL_RCC_OscConfig+0x274>)
 8001400:	2201      	movs	r2, #1
 8001402:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001404:	f7ff f9de 	bl	80007c4 <HAL_GetTick>
 8001408:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800140a:	e008      	b.n	800141e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800140c:	f7ff f9da 	bl	80007c4 <HAL_GetTick>
 8001410:	4602      	mov	r2, r0
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	2b02      	cmp	r3, #2
 8001418:	d901      	bls.n	800141e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800141a:	2303      	movs	r3, #3
 800141c:	e160      	b.n	80016e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800141e:	4b0d      	ldr	r3, [pc, #52]	; (8001454 <HAL_RCC_OscConfig+0x26c>)
 8001420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001422:	f003 0302 	and.w	r3, r3, #2
 8001426:	2b00      	cmp	r3, #0
 8001428:	d0f0      	beq.n	800140c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800142a:	2001      	movs	r0, #1
 800142c:	f000 fad8 	bl	80019e0 <RCC_Delay>
 8001430:	e01c      	b.n	800146c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001432:	4b0a      	ldr	r3, [pc, #40]	; (800145c <HAL_RCC_OscConfig+0x274>)
 8001434:	2200      	movs	r2, #0
 8001436:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001438:	f7ff f9c4 	bl	80007c4 <HAL_GetTick>
 800143c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800143e:	e00f      	b.n	8001460 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001440:	f7ff f9c0 	bl	80007c4 <HAL_GetTick>
 8001444:	4602      	mov	r2, r0
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	2b02      	cmp	r3, #2
 800144c:	d908      	bls.n	8001460 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800144e:	2303      	movs	r3, #3
 8001450:	e146      	b.n	80016e0 <HAL_RCC_OscConfig+0x4f8>
 8001452:	bf00      	nop
 8001454:	40021000 	.word	0x40021000
 8001458:	42420000 	.word	0x42420000
 800145c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001460:	4b92      	ldr	r3, [pc, #584]	; (80016ac <HAL_RCC_OscConfig+0x4c4>)
 8001462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001464:	f003 0302 	and.w	r3, r3, #2
 8001468:	2b00      	cmp	r3, #0
 800146a:	d1e9      	bne.n	8001440 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f003 0304 	and.w	r3, r3, #4
 8001474:	2b00      	cmp	r3, #0
 8001476:	f000 80a6 	beq.w	80015c6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800147a:	2300      	movs	r3, #0
 800147c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800147e:	4b8b      	ldr	r3, [pc, #556]	; (80016ac <HAL_RCC_OscConfig+0x4c4>)
 8001480:	69db      	ldr	r3, [r3, #28]
 8001482:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001486:	2b00      	cmp	r3, #0
 8001488:	d10d      	bne.n	80014a6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800148a:	4b88      	ldr	r3, [pc, #544]	; (80016ac <HAL_RCC_OscConfig+0x4c4>)
 800148c:	69db      	ldr	r3, [r3, #28]
 800148e:	4a87      	ldr	r2, [pc, #540]	; (80016ac <HAL_RCC_OscConfig+0x4c4>)
 8001490:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001494:	61d3      	str	r3, [r2, #28]
 8001496:	4b85      	ldr	r3, [pc, #532]	; (80016ac <HAL_RCC_OscConfig+0x4c4>)
 8001498:	69db      	ldr	r3, [r3, #28]
 800149a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800149e:	60bb      	str	r3, [r7, #8]
 80014a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014a2:	2301      	movs	r3, #1
 80014a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014a6:	4b82      	ldr	r3, [pc, #520]	; (80016b0 <HAL_RCC_OscConfig+0x4c8>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d118      	bne.n	80014e4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014b2:	4b7f      	ldr	r3, [pc, #508]	; (80016b0 <HAL_RCC_OscConfig+0x4c8>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a7e      	ldr	r2, [pc, #504]	; (80016b0 <HAL_RCC_OscConfig+0x4c8>)
 80014b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014be:	f7ff f981 	bl	80007c4 <HAL_GetTick>
 80014c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014c4:	e008      	b.n	80014d8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014c6:	f7ff f97d 	bl	80007c4 <HAL_GetTick>
 80014ca:	4602      	mov	r2, r0
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	1ad3      	subs	r3, r2, r3
 80014d0:	2b64      	cmp	r3, #100	; 0x64
 80014d2:	d901      	bls.n	80014d8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80014d4:	2303      	movs	r3, #3
 80014d6:	e103      	b.n	80016e0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014d8:	4b75      	ldr	r3, [pc, #468]	; (80016b0 <HAL_RCC_OscConfig+0x4c8>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d0f0      	beq.n	80014c6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	2b01      	cmp	r3, #1
 80014ea:	d106      	bne.n	80014fa <HAL_RCC_OscConfig+0x312>
 80014ec:	4b6f      	ldr	r3, [pc, #444]	; (80016ac <HAL_RCC_OscConfig+0x4c4>)
 80014ee:	6a1b      	ldr	r3, [r3, #32]
 80014f0:	4a6e      	ldr	r2, [pc, #440]	; (80016ac <HAL_RCC_OscConfig+0x4c4>)
 80014f2:	f043 0301 	orr.w	r3, r3, #1
 80014f6:	6213      	str	r3, [r2, #32]
 80014f8:	e02d      	b.n	8001556 <HAL_RCC_OscConfig+0x36e>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	68db      	ldr	r3, [r3, #12]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d10c      	bne.n	800151c <HAL_RCC_OscConfig+0x334>
 8001502:	4b6a      	ldr	r3, [pc, #424]	; (80016ac <HAL_RCC_OscConfig+0x4c4>)
 8001504:	6a1b      	ldr	r3, [r3, #32]
 8001506:	4a69      	ldr	r2, [pc, #420]	; (80016ac <HAL_RCC_OscConfig+0x4c4>)
 8001508:	f023 0301 	bic.w	r3, r3, #1
 800150c:	6213      	str	r3, [r2, #32]
 800150e:	4b67      	ldr	r3, [pc, #412]	; (80016ac <HAL_RCC_OscConfig+0x4c4>)
 8001510:	6a1b      	ldr	r3, [r3, #32]
 8001512:	4a66      	ldr	r2, [pc, #408]	; (80016ac <HAL_RCC_OscConfig+0x4c4>)
 8001514:	f023 0304 	bic.w	r3, r3, #4
 8001518:	6213      	str	r3, [r2, #32]
 800151a:	e01c      	b.n	8001556 <HAL_RCC_OscConfig+0x36e>
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	68db      	ldr	r3, [r3, #12]
 8001520:	2b05      	cmp	r3, #5
 8001522:	d10c      	bne.n	800153e <HAL_RCC_OscConfig+0x356>
 8001524:	4b61      	ldr	r3, [pc, #388]	; (80016ac <HAL_RCC_OscConfig+0x4c4>)
 8001526:	6a1b      	ldr	r3, [r3, #32]
 8001528:	4a60      	ldr	r2, [pc, #384]	; (80016ac <HAL_RCC_OscConfig+0x4c4>)
 800152a:	f043 0304 	orr.w	r3, r3, #4
 800152e:	6213      	str	r3, [r2, #32]
 8001530:	4b5e      	ldr	r3, [pc, #376]	; (80016ac <HAL_RCC_OscConfig+0x4c4>)
 8001532:	6a1b      	ldr	r3, [r3, #32]
 8001534:	4a5d      	ldr	r2, [pc, #372]	; (80016ac <HAL_RCC_OscConfig+0x4c4>)
 8001536:	f043 0301 	orr.w	r3, r3, #1
 800153a:	6213      	str	r3, [r2, #32]
 800153c:	e00b      	b.n	8001556 <HAL_RCC_OscConfig+0x36e>
 800153e:	4b5b      	ldr	r3, [pc, #364]	; (80016ac <HAL_RCC_OscConfig+0x4c4>)
 8001540:	6a1b      	ldr	r3, [r3, #32]
 8001542:	4a5a      	ldr	r2, [pc, #360]	; (80016ac <HAL_RCC_OscConfig+0x4c4>)
 8001544:	f023 0301 	bic.w	r3, r3, #1
 8001548:	6213      	str	r3, [r2, #32]
 800154a:	4b58      	ldr	r3, [pc, #352]	; (80016ac <HAL_RCC_OscConfig+0x4c4>)
 800154c:	6a1b      	ldr	r3, [r3, #32]
 800154e:	4a57      	ldr	r2, [pc, #348]	; (80016ac <HAL_RCC_OscConfig+0x4c4>)
 8001550:	f023 0304 	bic.w	r3, r3, #4
 8001554:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	68db      	ldr	r3, [r3, #12]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d015      	beq.n	800158a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800155e:	f7ff f931 	bl	80007c4 <HAL_GetTick>
 8001562:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001564:	e00a      	b.n	800157c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001566:	f7ff f92d 	bl	80007c4 <HAL_GetTick>
 800156a:	4602      	mov	r2, r0
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	1ad3      	subs	r3, r2, r3
 8001570:	f241 3288 	movw	r2, #5000	; 0x1388
 8001574:	4293      	cmp	r3, r2
 8001576:	d901      	bls.n	800157c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001578:	2303      	movs	r3, #3
 800157a:	e0b1      	b.n	80016e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800157c:	4b4b      	ldr	r3, [pc, #300]	; (80016ac <HAL_RCC_OscConfig+0x4c4>)
 800157e:	6a1b      	ldr	r3, [r3, #32]
 8001580:	f003 0302 	and.w	r3, r3, #2
 8001584:	2b00      	cmp	r3, #0
 8001586:	d0ee      	beq.n	8001566 <HAL_RCC_OscConfig+0x37e>
 8001588:	e014      	b.n	80015b4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800158a:	f7ff f91b 	bl	80007c4 <HAL_GetTick>
 800158e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001590:	e00a      	b.n	80015a8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001592:	f7ff f917 	bl	80007c4 <HAL_GetTick>
 8001596:	4602      	mov	r2, r0
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	1ad3      	subs	r3, r2, r3
 800159c:	f241 3288 	movw	r2, #5000	; 0x1388
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d901      	bls.n	80015a8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80015a4:	2303      	movs	r3, #3
 80015a6:	e09b      	b.n	80016e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015a8:	4b40      	ldr	r3, [pc, #256]	; (80016ac <HAL_RCC_OscConfig+0x4c4>)
 80015aa:	6a1b      	ldr	r3, [r3, #32]
 80015ac:	f003 0302 	and.w	r3, r3, #2
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d1ee      	bne.n	8001592 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80015b4:	7dfb      	ldrb	r3, [r7, #23]
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d105      	bne.n	80015c6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015ba:	4b3c      	ldr	r3, [pc, #240]	; (80016ac <HAL_RCC_OscConfig+0x4c4>)
 80015bc:	69db      	ldr	r3, [r3, #28]
 80015be:	4a3b      	ldr	r2, [pc, #236]	; (80016ac <HAL_RCC_OscConfig+0x4c4>)
 80015c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015c4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	69db      	ldr	r3, [r3, #28]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	f000 8087 	beq.w	80016de <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015d0:	4b36      	ldr	r3, [pc, #216]	; (80016ac <HAL_RCC_OscConfig+0x4c4>)
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f003 030c 	and.w	r3, r3, #12
 80015d8:	2b08      	cmp	r3, #8
 80015da:	d061      	beq.n	80016a0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	69db      	ldr	r3, [r3, #28]
 80015e0:	2b02      	cmp	r3, #2
 80015e2:	d146      	bne.n	8001672 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015e4:	4b33      	ldr	r3, [pc, #204]	; (80016b4 <HAL_RCC_OscConfig+0x4cc>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ea:	f7ff f8eb 	bl	80007c4 <HAL_GetTick>
 80015ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015f0:	e008      	b.n	8001604 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015f2:	f7ff f8e7 	bl	80007c4 <HAL_GetTick>
 80015f6:	4602      	mov	r2, r0
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	1ad3      	subs	r3, r2, r3
 80015fc:	2b02      	cmp	r3, #2
 80015fe:	d901      	bls.n	8001604 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001600:	2303      	movs	r3, #3
 8001602:	e06d      	b.n	80016e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001604:	4b29      	ldr	r3, [pc, #164]	; (80016ac <HAL_RCC_OscConfig+0x4c4>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800160c:	2b00      	cmp	r3, #0
 800160e:	d1f0      	bne.n	80015f2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6a1b      	ldr	r3, [r3, #32]
 8001614:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001618:	d108      	bne.n	800162c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800161a:	4b24      	ldr	r3, [pc, #144]	; (80016ac <HAL_RCC_OscConfig+0x4c4>)
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	689b      	ldr	r3, [r3, #8]
 8001626:	4921      	ldr	r1, [pc, #132]	; (80016ac <HAL_RCC_OscConfig+0x4c4>)
 8001628:	4313      	orrs	r3, r2
 800162a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800162c:	4b1f      	ldr	r3, [pc, #124]	; (80016ac <HAL_RCC_OscConfig+0x4c4>)
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6a19      	ldr	r1, [r3, #32]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800163c:	430b      	orrs	r3, r1
 800163e:	491b      	ldr	r1, [pc, #108]	; (80016ac <HAL_RCC_OscConfig+0x4c4>)
 8001640:	4313      	orrs	r3, r2
 8001642:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001644:	4b1b      	ldr	r3, [pc, #108]	; (80016b4 <HAL_RCC_OscConfig+0x4cc>)
 8001646:	2201      	movs	r2, #1
 8001648:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800164a:	f7ff f8bb 	bl	80007c4 <HAL_GetTick>
 800164e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001650:	e008      	b.n	8001664 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001652:	f7ff f8b7 	bl	80007c4 <HAL_GetTick>
 8001656:	4602      	mov	r2, r0
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	1ad3      	subs	r3, r2, r3
 800165c:	2b02      	cmp	r3, #2
 800165e:	d901      	bls.n	8001664 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001660:	2303      	movs	r3, #3
 8001662:	e03d      	b.n	80016e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001664:	4b11      	ldr	r3, [pc, #68]	; (80016ac <HAL_RCC_OscConfig+0x4c4>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800166c:	2b00      	cmp	r3, #0
 800166e:	d0f0      	beq.n	8001652 <HAL_RCC_OscConfig+0x46a>
 8001670:	e035      	b.n	80016de <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001672:	4b10      	ldr	r3, [pc, #64]	; (80016b4 <HAL_RCC_OscConfig+0x4cc>)
 8001674:	2200      	movs	r2, #0
 8001676:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001678:	f7ff f8a4 	bl	80007c4 <HAL_GetTick>
 800167c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800167e:	e008      	b.n	8001692 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001680:	f7ff f8a0 	bl	80007c4 <HAL_GetTick>
 8001684:	4602      	mov	r2, r0
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	2b02      	cmp	r3, #2
 800168c:	d901      	bls.n	8001692 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800168e:	2303      	movs	r3, #3
 8001690:	e026      	b.n	80016e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001692:	4b06      	ldr	r3, [pc, #24]	; (80016ac <HAL_RCC_OscConfig+0x4c4>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800169a:	2b00      	cmp	r3, #0
 800169c:	d1f0      	bne.n	8001680 <HAL_RCC_OscConfig+0x498>
 800169e:	e01e      	b.n	80016de <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	69db      	ldr	r3, [r3, #28]
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d107      	bne.n	80016b8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80016a8:	2301      	movs	r3, #1
 80016aa:	e019      	b.n	80016e0 <HAL_RCC_OscConfig+0x4f8>
 80016ac:	40021000 	.word	0x40021000
 80016b0:	40007000 	.word	0x40007000
 80016b4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80016b8:	4b0b      	ldr	r3, [pc, #44]	; (80016e8 <HAL_RCC_OscConfig+0x500>)
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6a1b      	ldr	r3, [r3, #32]
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d106      	bne.n	80016da <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016d6:	429a      	cmp	r2, r3
 80016d8:	d001      	beq.n	80016de <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	e000      	b.n	80016e0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80016de:	2300      	movs	r3, #0
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	3718      	adds	r7, #24
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	40021000 	.word	0x40021000

080016ec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b084      	sub	sp, #16
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d101      	bne.n	8001700 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016fc:	2301      	movs	r3, #1
 80016fe:	e0d0      	b.n	80018a2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001700:	4b6a      	ldr	r3, [pc, #424]	; (80018ac <HAL_RCC_ClockConfig+0x1c0>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f003 0307 	and.w	r3, r3, #7
 8001708:	683a      	ldr	r2, [r7, #0]
 800170a:	429a      	cmp	r2, r3
 800170c:	d910      	bls.n	8001730 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800170e:	4b67      	ldr	r3, [pc, #412]	; (80018ac <HAL_RCC_ClockConfig+0x1c0>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f023 0207 	bic.w	r2, r3, #7
 8001716:	4965      	ldr	r1, [pc, #404]	; (80018ac <HAL_RCC_ClockConfig+0x1c0>)
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	4313      	orrs	r3, r2
 800171c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800171e:	4b63      	ldr	r3, [pc, #396]	; (80018ac <HAL_RCC_ClockConfig+0x1c0>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 0307 	and.w	r3, r3, #7
 8001726:	683a      	ldr	r2, [r7, #0]
 8001728:	429a      	cmp	r2, r3
 800172a:	d001      	beq.n	8001730 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800172c:	2301      	movs	r3, #1
 800172e:	e0b8      	b.n	80018a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f003 0302 	and.w	r3, r3, #2
 8001738:	2b00      	cmp	r3, #0
 800173a:	d020      	beq.n	800177e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f003 0304 	and.w	r3, r3, #4
 8001744:	2b00      	cmp	r3, #0
 8001746:	d005      	beq.n	8001754 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001748:	4b59      	ldr	r3, [pc, #356]	; (80018b0 <HAL_RCC_ClockConfig+0x1c4>)
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	4a58      	ldr	r2, [pc, #352]	; (80018b0 <HAL_RCC_ClockConfig+0x1c4>)
 800174e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001752:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f003 0308 	and.w	r3, r3, #8
 800175c:	2b00      	cmp	r3, #0
 800175e:	d005      	beq.n	800176c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001760:	4b53      	ldr	r3, [pc, #332]	; (80018b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	4a52      	ldr	r2, [pc, #328]	; (80018b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001766:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800176a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800176c:	4b50      	ldr	r3, [pc, #320]	; (80018b0 <HAL_RCC_ClockConfig+0x1c4>)
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	494d      	ldr	r1, [pc, #308]	; (80018b0 <HAL_RCC_ClockConfig+0x1c4>)
 800177a:	4313      	orrs	r3, r2
 800177c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 0301 	and.w	r3, r3, #1
 8001786:	2b00      	cmp	r3, #0
 8001788:	d040      	beq.n	800180c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	2b01      	cmp	r3, #1
 8001790:	d107      	bne.n	80017a2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001792:	4b47      	ldr	r3, [pc, #284]	; (80018b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800179a:	2b00      	cmp	r3, #0
 800179c:	d115      	bne.n	80017ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	e07f      	b.n	80018a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	2b02      	cmp	r3, #2
 80017a8:	d107      	bne.n	80017ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017aa:	4b41      	ldr	r3, [pc, #260]	; (80018b0 <HAL_RCC_ClockConfig+0x1c4>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d109      	bne.n	80017ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	e073      	b.n	80018a2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017ba:	4b3d      	ldr	r3, [pc, #244]	; (80018b0 <HAL_RCC_ClockConfig+0x1c4>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 0302 	and.w	r3, r3, #2
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d101      	bne.n	80017ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	e06b      	b.n	80018a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017ca:	4b39      	ldr	r3, [pc, #228]	; (80018b0 <HAL_RCC_ClockConfig+0x1c4>)
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	f023 0203 	bic.w	r2, r3, #3
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	4936      	ldr	r1, [pc, #216]	; (80018b0 <HAL_RCC_ClockConfig+0x1c4>)
 80017d8:	4313      	orrs	r3, r2
 80017da:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017dc:	f7fe fff2 	bl	80007c4 <HAL_GetTick>
 80017e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017e2:	e00a      	b.n	80017fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017e4:	f7fe ffee 	bl	80007c4 <HAL_GetTick>
 80017e8:	4602      	mov	r2, r0
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d901      	bls.n	80017fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017f6:	2303      	movs	r3, #3
 80017f8:	e053      	b.n	80018a2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017fa:	4b2d      	ldr	r3, [pc, #180]	; (80018b0 <HAL_RCC_ClockConfig+0x1c4>)
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	f003 020c 	and.w	r2, r3, #12
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	009b      	lsls	r3, r3, #2
 8001808:	429a      	cmp	r2, r3
 800180a:	d1eb      	bne.n	80017e4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800180c:	4b27      	ldr	r3, [pc, #156]	; (80018ac <HAL_RCC_ClockConfig+0x1c0>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f003 0307 	and.w	r3, r3, #7
 8001814:	683a      	ldr	r2, [r7, #0]
 8001816:	429a      	cmp	r2, r3
 8001818:	d210      	bcs.n	800183c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800181a:	4b24      	ldr	r3, [pc, #144]	; (80018ac <HAL_RCC_ClockConfig+0x1c0>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f023 0207 	bic.w	r2, r3, #7
 8001822:	4922      	ldr	r1, [pc, #136]	; (80018ac <HAL_RCC_ClockConfig+0x1c0>)
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	4313      	orrs	r3, r2
 8001828:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800182a:	4b20      	ldr	r3, [pc, #128]	; (80018ac <HAL_RCC_ClockConfig+0x1c0>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 0307 	and.w	r3, r3, #7
 8001832:	683a      	ldr	r2, [r7, #0]
 8001834:	429a      	cmp	r2, r3
 8001836:	d001      	beq.n	800183c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	e032      	b.n	80018a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f003 0304 	and.w	r3, r3, #4
 8001844:	2b00      	cmp	r3, #0
 8001846:	d008      	beq.n	800185a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001848:	4b19      	ldr	r3, [pc, #100]	; (80018b0 <HAL_RCC_ClockConfig+0x1c4>)
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	68db      	ldr	r3, [r3, #12]
 8001854:	4916      	ldr	r1, [pc, #88]	; (80018b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001856:	4313      	orrs	r3, r2
 8001858:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 0308 	and.w	r3, r3, #8
 8001862:	2b00      	cmp	r3, #0
 8001864:	d009      	beq.n	800187a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001866:	4b12      	ldr	r3, [pc, #72]	; (80018b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	691b      	ldr	r3, [r3, #16]
 8001872:	00db      	lsls	r3, r3, #3
 8001874:	490e      	ldr	r1, [pc, #56]	; (80018b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001876:	4313      	orrs	r3, r2
 8001878:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800187a:	f000 f821 	bl	80018c0 <HAL_RCC_GetSysClockFreq>
 800187e:	4602      	mov	r2, r0
 8001880:	4b0b      	ldr	r3, [pc, #44]	; (80018b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	091b      	lsrs	r3, r3, #4
 8001886:	f003 030f 	and.w	r3, r3, #15
 800188a:	490a      	ldr	r1, [pc, #40]	; (80018b4 <HAL_RCC_ClockConfig+0x1c8>)
 800188c:	5ccb      	ldrb	r3, [r1, r3]
 800188e:	fa22 f303 	lsr.w	r3, r2, r3
 8001892:	4a09      	ldr	r2, [pc, #36]	; (80018b8 <HAL_RCC_ClockConfig+0x1cc>)
 8001894:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001896:	4b09      	ldr	r3, [pc, #36]	; (80018bc <HAL_RCC_ClockConfig+0x1d0>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4618      	mov	r0, r3
 800189c:	f7fe ff50 	bl	8000740 <HAL_InitTick>

  return HAL_OK;
 80018a0:	2300      	movs	r3, #0
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3710      	adds	r7, #16
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	40022000 	.word	0x40022000
 80018b0:	40021000 	.word	0x40021000
 80018b4:	0800452c 	.word	0x0800452c
 80018b8:	20000000 	.word	0x20000000
 80018bc:	20000004 	.word	0x20000004

080018c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018c0:	b490      	push	{r4, r7}
 80018c2:	b08a      	sub	sp, #40	; 0x28
 80018c4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80018c6:	4b29      	ldr	r3, [pc, #164]	; (800196c <HAL_RCC_GetSysClockFreq+0xac>)
 80018c8:	1d3c      	adds	r4, r7, #4
 80018ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80018d0:	f240 2301 	movw	r3, #513	; 0x201
 80018d4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80018d6:	2300      	movs	r3, #0
 80018d8:	61fb      	str	r3, [r7, #28]
 80018da:	2300      	movs	r3, #0
 80018dc:	61bb      	str	r3, [r7, #24]
 80018de:	2300      	movs	r3, #0
 80018e0:	627b      	str	r3, [r7, #36]	; 0x24
 80018e2:	2300      	movs	r3, #0
 80018e4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80018e6:	2300      	movs	r3, #0
 80018e8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80018ea:	4b21      	ldr	r3, [pc, #132]	; (8001970 <HAL_RCC_GetSysClockFreq+0xb0>)
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80018f0:	69fb      	ldr	r3, [r7, #28]
 80018f2:	f003 030c 	and.w	r3, r3, #12
 80018f6:	2b04      	cmp	r3, #4
 80018f8:	d002      	beq.n	8001900 <HAL_RCC_GetSysClockFreq+0x40>
 80018fa:	2b08      	cmp	r3, #8
 80018fc:	d003      	beq.n	8001906 <HAL_RCC_GetSysClockFreq+0x46>
 80018fe:	e02b      	b.n	8001958 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001900:	4b1c      	ldr	r3, [pc, #112]	; (8001974 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001902:	623b      	str	r3, [r7, #32]
      break;
 8001904:	e02b      	b.n	800195e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	0c9b      	lsrs	r3, r3, #18
 800190a:	f003 030f 	and.w	r3, r3, #15
 800190e:	3328      	adds	r3, #40	; 0x28
 8001910:	443b      	add	r3, r7
 8001912:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001916:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001918:	69fb      	ldr	r3, [r7, #28]
 800191a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800191e:	2b00      	cmp	r3, #0
 8001920:	d012      	beq.n	8001948 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001922:	4b13      	ldr	r3, [pc, #76]	; (8001970 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	0c5b      	lsrs	r3, r3, #17
 8001928:	f003 0301 	and.w	r3, r3, #1
 800192c:	3328      	adds	r3, #40	; 0x28
 800192e:	443b      	add	r3, r7
 8001930:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001934:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	4a0e      	ldr	r2, [pc, #56]	; (8001974 <HAL_RCC_GetSysClockFreq+0xb4>)
 800193a:	fb03 f202 	mul.w	r2, r3, r2
 800193e:	69bb      	ldr	r3, [r7, #24]
 8001940:	fbb2 f3f3 	udiv	r3, r2, r3
 8001944:	627b      	str	r3, [r7, #36]	; 0x24
 8001946:	e004      	b.n	8001952 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	4a0b      	ldr	r2, [pc, #44]	; (8001978 <HAL_RCC_GetSysClockFreq+0xb8>)
 800194c:	fb02 f303 	mul.w	r3, r2, r3
 8001950:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001954:	623b      	str	r3, [r7, #32]
      break;
 8001956:	e002      	b.n	800195e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001958:	4b06      	ldr	r3, [pc, #24]	; (8001974 <HAL_RCC_GetSysClockFreq+0xb4>)
 800195a:	623b      	str	r3, [r7, #32]
      break;
 800195c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800195e:	6a3b      	ldr	r3, [r7, #32]
}
 8001960:	4618      	mov	r0, r3
 8001962:	3728      	adds	r7, #40	; 0x28
 8001964:	46bd      	mov	sp, r7
 8001966:	bc90      	pop	{r4, r7}
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	08003ed8 	.word	0x08003ed8
 8001970:	40021000 	.word	0x40021000
 8001974:	007a1200 	.word	0x007a1200
 8001978:	003d0900 	.word	0x003d0900

0800197c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001980:	4b02      	ldr	r3, [pc, #8]	; (800198c <HAL_RCC_GetHCLKFreq+0x10>)
 8001982:	681b      	ldr	r3, [r3, #0]
}
 8001984:	4618      	mov	r0, r3
 8001986:	46bd      	mov	sp, r7
 8001988:	bc80      	pop	{r7}
 800198a:	4770      	bx	lr
 800198c:	20000000 	.word	0x20000000

08001990 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001994:	f7ff fff2 	bl	800197c <HAL_RCC_GetHCLKFreq>
 8001998:	4602      	mov	r2, r0
 800199a:	4b05      	ldr	r3, [pc, #20]	; (80019b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	0a1b      	lsrs	r3, r3, #8
 80019a0:	f003 0307 	and.w	r3, r3, #7
 80019a4:	4903      	ldr	r1, [pc, #12]	; (80019b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80019a6:	5ccb      	ldrb	r3, [r1, r3]
 80019a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	40021000 	.word	0x40021000
 80019b4:	0800453c 	.word	0x0800453c

080019b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80019bc:	f7ff ffde 	bl	800197c <HAL_RCC_GetHCLKFreq>
 80019c0:	4602      	mov	r2, r0
 80019c2:	4b05      	ldr	r3, [pc, #20]	; (80019d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	0adb      	lsrs	r3, r3, #11
 80019c8:	f003 0307 	and.w	r3, r3, #7
 80019cc:	4903      	ldr	r1, [pc, #12]	; (80019dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80019ce:	5ccb      	ldrb	r3, [r1, r3]
 80019d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	40021000 	.word	0x40021000
 80019dc:	0800453c 	.word	0x0800453c

080019e0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b085      	sub	sp, #20
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80019e8:	4b0a      	ldr	r3, [pc, #40]	; (8001a14 <RCC_Delay+0x34>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a0a      	ldr	r2, [pc, #40]	; (8001a18 <RCC_Delay+0x38>)
 80019ee:	fba2 2303 	umull	r2, r3, r2, r3
 80019f2:	0a5b      	lsrs	r3, r3, #9
 80019f4:	687a      	ldr	r2, [r7, #4]
 80019f6:	fb02 f303 	mul.w	r3, r2, r3
 80019fa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80019fc:	bf00      	nop
  }
  while (Delay --);
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	1e5a      	subs	r2, r3, #1
 8001a02:	60fa      	str	r2, [r7, #12]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d1f9      	bne.n	80019fc <RCC_Delay+0x1c>
}
 8001a08:	bf00      	nop
 8001a0a:	bf00      	nop
 8001a0c:	3714      	adds	r7, #20
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bc80      	pop	{r7}
 8001a12:	4770      	bx	lr
 8001a14:	20000000 	.word	0x20000000
 8001a18:	10624dd3 	.word	0x10624dd3

08001a1c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d101      	bne.n	8001a2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e03f      	b.n	8001aae <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d106      	bne.n	8001a48 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f7fe fce2 	bl	800040c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2224      	movs	r2, #36	; 0x24
 8001a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	68da      	ldr	r2, [r3, #12]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001a5e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	f000 fbf9 	bl	8002258 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	691a      	ldr	r2, [r3, #16]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001a74:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	695a      	ldr	r2, [r3, #20]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001a84:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	68da      	ldr	r2, [r3, #12]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001a94:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2220      	movs	r2, #32
 8001aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2220      	movs	r2, #32
 8001aa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001aac:	2300      	movs	r3, #0
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3708      	adds	r7, #8
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}

08001ab6 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8001ab6:	b580      	push	{r7, lr}
 8001ab8:	b082      	sub	sp, #8
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d101      	bne.n	8001ac8 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e047      	b.n	8001b58 <HAL_HalfDuplex_Init+0xa2>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ace:	b2db      	uxtb	r3, r3
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d106      	bne.n	8001ae2 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001adc:	6878      	ldr	r0, [r7, #4]
 8001ade:	f7fe fc95 	bl	800040c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2224      	movs	r2, #36	; 0x24
 8001ae6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	68da      	ldr	r2, [r3, #12]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001af8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	f000 fbac 	bl	8002258 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	691a      	ldr	r2, [r3, #16]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001b0e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	695a      	ldr	r2, [r3, #20]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8001b1e:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	695a      	ldr	r2, [r3, #20]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f042 0208 	orr.w	r2, r2, #8
 8001b2e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	68da      	ldr	r2, [r3, #12]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001b3e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2200      	movs	r2, #0
 8001b44:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2220      	movs	r2, #32
 8001b4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2220      	movs	r2, #32
 8001b52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001b56:	2300      	movs	r3, #0
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3708      	adds	r7, #8
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}

08001b60 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b08a      	sub	sp, #40	; 0x28
 8001b64:	af02      	add	r7, sp, #8
 8001b66:	60f8      	str	r0, [r7, #12]
 8001b68:	60b9      	str	r1, [r7, #8]
 8001b6a:	603b      	str	r3, [r7, #0]
 8001b6c:	4613      	mov	r3, r2
 8001b6e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001b70:	2300      	movs	r3, #0
 8001b72:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	2b20      	cmp	r3, #32
 8001b7e:	d17c      	bne.n	8001c7a <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d002      	beq.n	8001b8c <HAL_UART_Transmit+0x2c>
 8001b86:	88fb      	ldrh	r3, [r7, #6]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d101      	bne.n	8001b90 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e075      	b.n	8001c7c <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d101      	bne.n	8001b9e <HAL_UART_Transmit+0x3e>
 8001b9a:	2302      	movs	r3, #2
 8001b9c:	e06e      	b.n	8001c7c <HAL_UART_Transmit+0x11c>
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	2221      	movs	r2, #33	; 0x21
 8001bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001bb4:	f7fe fe06 	bl	80007c4 <HAL_GetTick>
 8001bb8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	88fa      	ldrh	r2, [r7, #6]
 8001bbe:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	88fa      	ldrh	r2, [r7, #6]
 8001bc4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001bce:	d108      	bne.n	8001be2 <HAL_UART_Transmit+0x82>
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	691b      	ldr	r3, [r3, #16]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d104      	bne.n	8001be2 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	61bb      	str	r3, [r7, #24]
 8001be0:	e003      	b.n	8001bea <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001be6:	2300      	movs	r3, #0
 8001be8:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	2200      	movs	r2, #0
 8001bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001bf2:	e02a      	b.n	8001c4a <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	9300      	str	r3, [sp, #0]
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	2180      	movs	r1, #128	; 0x80
 8001bfe:	68f8      	ldr	r0, [r7, #12]
 8001c00:	f000 fa3a 	bl	8002078 <UART_WaitOnFlagUntilTimeout>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d001      	beq.n	8001c0e <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e036      	b.n	8001c7c <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d10b      	bne.n	8001c2c <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001c14:	69bb      	ldr	r3, [r7, #24]
 8001c16:	881b      	ldrh	r3, [r3, #0]
 8001c18:	461a      	mov	r2, r3
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001c22:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001c24:	69bb      	ldr	r3, [r7, #24]
 8001c26:	3302      	adds	r3, #2
 8001c28:	61bb      	str	r3, [r7, #24]
 8001c2a:	e007      	b.n	8001c3c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	781a      	ldrb	r2, [r3, #0]
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	3301      	adds	r3, #1
 8001c3a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001c40:	b29b      	uxth	r3, r3
 8001c42:	3b01      	subs	r3, #1
 8001c44:	b29a      	uxth	r2, r3
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001c4e:	b29b      	uxth	r3, r3
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d1cf      	bne.n	8001bf4 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	9300      	str	r3, [sp, #0]
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	2140      	movs	r1, #64	; 0x40
 8001c5e:	68f8      	ldr	r0, [r7, #12]
 8001c60:	f000 fa0a 	bl	8002078 <UART_WaitOnFlagUntilTimeout>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d001      	beq.n	8001c6e <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e006      	b.n	8001c7c <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	2220      	movs	r2, #32
 8001c72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001c76:	2300      	movs	r3, #0
 8001c78:	e000      	b.n	8001c7c <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001c7a:	2302      	movs	r3, #2
  }
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3720      	adds	r7, #32
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}

08001c84 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b08a      	sub	sp, #40	; 0x28
 8001c88:	af02      	add	r7, sp, #8
 8001c8a:	60f8      	str	r0, [r7, #12]
 8001c8c:	60b9      	str	r1, [r7, #8]
 8001c8e:	603b      	str	r3, [r7, #0]
 8001c90:	4613      	mov	r3, r2
 8001c92:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001c94:	2300      	movs	r3, #0
 8001c96:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	2b20      	cmp	r3, #32
 8001ca2:	f040 808c 	bne.w	8001dbe <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d002      	beq.n	8001cb2 <HAL_UART_Receive+0x2e>
 8001cac:	88fb      	ldrh	r3, [r7, #6]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d101      	bne.n	8001cb6 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e084      	b.n	8001dc0 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	d101      	bne.n	8001cc4 <HAL_UART_Receive+0x40>
 8001cc0:	2302      	movs	r3, #2
 8001cc2:	e07d      	b.n	8001dc0 <HAL_UART_Receive+0x13c>
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	2222      	movs	r2, #34	; 0x22
 8001cd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001ce0:	f7fe fd70 	bl	80007c4 <HAL_GetTick>
 8001ce4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	88fa      	ldrh	r2, [r7, #6]
 8001cea:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	88fa      	ldrh	r2, [r7, #6]
 8001cf0:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001cfa:	d108      	bne.n	8001d0e <HAL_UART_Receive+0x8a>
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	691b      	ldr	r3, [r3, #16]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d104      	bne.n	8001d0e <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8001d04:	2300      	movs	r3, #0
 8001d06:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	61bb      	str	r3, [r7, #24]
 8001d0c:	e003      	b.n	8001d16 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001d12:	2300      	movs	r3, #0
 8001d14:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8001d1e:	e043      	b.n	8001da8 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	9300      	str	r3, [sp, #0]
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	2200      	movs	r2, #0
 8001d28:	2120      	movs	r1, #32
 8001d2a:	68f8      	ldr	r0, [r7, #12]
 8001d2c:	f000 f9a4 	bl	8002078 <UART_WaitOnFlagUntilTimeout>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d001      	beq.n	8001d3a <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8001d36:	2303      	movs	r3, #3
 8001d38:	e042      	b.n	8001dc0 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d10c      	bne.n	8001d5a <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	b29b      	uxth	r3, r3
 8001d48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d4c:	b29a      	uxth	r2, r3
 8001d4e:	69bb      	ldr	r3, [r7, #24]
 8001d50:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8001d52:	69bb      	ldr	r3, [r7, #24]
 8001d54:	3302      	adds	r3, #2
 8001d56:	61bb      	str	r3, [r7, #24]
 8001d58:	e01f      	b.n	8001d9a <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d62:	d007      	beq.n	8001d74 <HAL_UART_Receive+0xf0>
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d10a      	bne.n	8001d82 <HAL_UART_Receive+0xfe>
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	691b      	ldr	r3, [r3, #16]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d106      	bne.n	8001d82 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	b2da      	uxtb	r2, r3
 8001d7c:	69fb      	ldr	r3, [r7, #28]
 8001d7e:	701a      	strb	r2, [r3, #0]
 8001d80:	e008      	b.n	8001d94 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d8e:	b2da      	uxtb	r2, r3
 8001d90:	69fb      	ldr	r3, [r7, #28]
 8001d92:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	3301      	adds	r3, #1
 8001d98:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001d9e:	b29b      	uxth	r3, r3
 8001da0:	3b01      	subs	r3, #1
 8001da2:	b29a      	uxth	r2, r3
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001dac:	b29b      	uxth	r3, r3
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d1b6      	bne.n	8001d20 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	2220      	movs	r2, #32
 8001db6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	e000      	b.n	8001dc0 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8001dbe:	2302      	movs	r3, #2
  }
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3720      	adds	r7, #32
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}

08001dc8 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b084      	sub	sp, #16
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	60f8      	str	r0, [r7, #12]
 8001dd0:	60b9      	str	r1, [r7, #8]
 8001dd2:	4613      	mov	r3, r2
 8001dd4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	2b20      	cmp	r3, #32
 8001de0:	d11d      	bne.n	8001e1e <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d002      	beq.n	8001dee <HAL_UART_Receive_DMA+0x26>
 8001de8:	88fb      	ldrh	r3, [r7, #6]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d101      	bne.n	8001df2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e016      	b.n	8001e20 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	d101      	bne.n	8001e00 <HAL_UART_Receive_DMA+0x38>
 8001dfc:	2302      	movs	r3, #2
 8001dfe:	e00f      	b.n	8001e20 <HAL_UART_Receive_DMA+0x58>
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	2201      	movs	r2, #1
 8001e04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8001e0e:	88fb      	ldrh	r3, [r7, #6]
 8001e10:	461a      	mov	r2, r3
 8001e12:	68b9      	ldr	r1, [r7, #8]
 8001e14:	68f8      	ldr	r0, [r7, #12]
 8001e16:	f000 f979 	bl	800210c <UART_Start_Receive_DMA>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	e000      	b.n	8001e20 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8001e1e:	2302      	movs	r3, #2
  }
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	3710      	adds	r7, #16
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}

08001e28 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b084      	sub	sp, #16
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8001e30:	2300      	movs	r3, #0
 8001e32:	60fb      	str	r3, [r7, #12]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	695b      	ldr	r3, [r3, #20]
 8001e3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	bf14      	ite	ne
 8001e42:	2301      	movne	r3, #1
 8001e44:	2300      	moveq	r3, #0
 8001e46:	b2db      	uxtb	r3, r3
 8001e48:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	2b21      	cmp	r3, #33	; 0x21
 8001e54:	d116      	bne.n	8001e84 <HAL_UART_DMAStop+0x5c>
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d013      	beq.n	8001e84 <HAL_UART_DMAStop+0x5c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	695a      	ldr	r2, [r3, #20]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e6a:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d004      	beq.n	8001e7e <HAL_UART_DMAStop+0x56>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f7fe fec2 	bl	8000c02 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f000 f9a8 	bl	80021d4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	695b      	ldr	r3, [r3, #20]
 8001e8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	bf14      	ite	ne
 8001e92:	2301      	movne	r3, #1
 8001e94:	2300      	moveq	r3, #0
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	2b22      	cmp	r3, #34	; 0x22
 8001ea4:	d116      	bne.n	8001ed4 <HAL_UART_DMAStop+0xac>
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d013      	beq.n	8001ed4 <HAL_UART_DMAStop+0xac>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	695a      	ldr	r2, [r3, #20]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001eba:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d004      	beq.n	8001ece <HAL_UART_DMAStop+0xa6>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f7fe fe9a 	bl	8000c02 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f000 f995 	bl	80021fe <UART_EndRxTransfer>
  }

  return HAL_OK;
 8001ed4:	2300      	movs	r3, #0
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3710      	adds	r7, #16
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}

08001ede <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8001ede:	b480      	push	{r7}
 8001ee0:	b083      	sub	sp, #12
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8001ee6:	bf00      	nop
 8001ee8:	370c      	adds	r7, #12
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bc80      	pop	{r7}
 8001eee:	4770      	bx	lr

08001ef0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8001ef8:	bf00      	nop
 8001efa:	370c      	adds	r7, #12
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bc80      	pop	{r7}
 8001f00:	4770      	bx	lr

08001f02 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001f02:	b480      	push	{r7}
 8001f04:	b083      	sub	sp, #12
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	6078      	str	r0, [r7, #4]
 8001f0a:	460b      	mov	r3, r1
 8001f0c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8001f0e:	bf00      	nop
 8001f10:	370c      	adds	r7, #12
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bc80      	pop	{r7}
 8001f16:	4770      	bx	lr

08001f18 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b084      	sub	sp, #16
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f24:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f003 0320 	and.w	r3, r3, #32
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d12a      	bne.n	8001f8a <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	2200      	movs	r2, #0
 8001f38:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	68da      	ldr	r2, [r3, #12]
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f48:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	695a      	ldr	r2, [r3, #20]
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f022 0201 	bic.w	r2, r2, #1
 8001f58:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	695a      	ldr	r2, [r3, #20]
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f68:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	2220      	movs	r2, #32
 8001f6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d107      	bne.n	8001f8a <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	68da      	ldr	r2, [r3, #12]
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f022 0210 	bic.w	r2, r2, #16
 8001f88:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d106      	bne.n	8001fa0 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001f96:	4619      	mov	r1, r3
 8001f98:	68f8      	ldr	r0, [r7, #12]
 8001f9a:	f7ff ffb2 	bl	8001f02 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8001f9e:	e002      	b.n	8001fa6 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8001fa0:	68f8      	ldr	r0, [r7, #12]
 8001fa2:	f000 fe6f 	bl	8002c84 <HAL_UART_RxCpltCallback>
}
 8001fa6:	bf00      	nop
 8001fa8:	3710      	adds	r7, #16
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}

08001fae <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8001fae:	b580      	push	{r7, lr}
 8001fb0:	b084      	sub	sp, #16
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fba:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d108      	bne.n	8001fd6 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001fc8:	085b      	lsrs	r3, r3, #1
 8001fca:	b29b      	uxth	r3, r3
 8001fcc:	4619      	mov	r1, r3
 8001fce:	68f8      	ldr	r0, [r7, #12]
 8001fd0:	f7ff ff97 	bl	8001f02 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8001fd4:	e002      	b.n	8001fdc <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8001fd6:	68f8      	ldr	r0, [r7, #12]
 8001fd8:	f7ff ff81 	bl	8001ede <HAL_UART_RxHalfCpltCallback>
}
 8001fdc:	bf00      	nop
 8001fde:	3710      	adds	r7, #16
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}

08001fe4 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b084      	sub	sp, #16
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8001fec:	2300      	movs	r3, #0
 8001fee:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff4:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	695b      	ldr	r3, [r3, #20]
 8001ffc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002000:	2b00      	cmp	r3, #0
 8002002:	bf14      	ite	ne
 8002004:	2301      	movne	r3, #1
 8002006:	2300      	moveq	r3, #0
 8002008:	b2db      	uxtb	r3, r3
 800200a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002012:	b2db      	uxtb	r3, r3
 8002014:	2b21      	cmp	r3, #33	; 0x21
 8002016:	d108      	bne.n	800202a <UART_DMAError+0x46>
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d005      	beq.n	800202a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	2200      	movs	r2, #0
 8002022:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8002024:	68b8      	ldr	r0, [r7, #8]
 8002026:	f000 f8d5 	bl	80021d4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	695b      	ldr	r3, [r3, #20]
 8002030:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002034:	2b00      	cmp	r3, #0
 8002036:	bf14      	ite	ne
 8002038:	2301      	movne	r3, #1
 800203a:	2300      	moveq	r3, #0
 800203c:	b2db      	uxtb	r3, r3
 800203e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002046:	b2db      	uxtb	r3, r3
 8002048:	2b22      	cmp	r3, #34	; 0x22
 800204a:	d108      	bne.n	800205e <UART_DMAError+0x7a>
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d005      	beq.n	800205e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	2200      	movs	r2, #0
 8002056:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8002058:	68b8      	ldr	r0, [r7, #8]
 800205a:	f000 f8d0 	bl	80021fe <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002062:	f043 0210 	orr.w	r2, r3, #16
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800206a:	68b8      	ldr	r0, [r7, #8]
 800206c:	f7ff ff40 	bl	8001ef0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002070:	bf00      	nop
 8002072:	3710      	adds	r7, #16
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}

08002078 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b084      	sub	sp, #16
 800207c:	af00      	add	r7, sp, #0
 800207e:	60f8      	str	r0, [r7, #12]
 8002080:	60b9      	str	r1, [r7, #8]
 8002082:	603b      	str	r3, [r7, #0]
 8002084:	4613      	mov	r3, r2
 8002086:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002088:	e02c      	b.n	80020e4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800208a:	69bb      	ldr	r3, [r7, #24]
 800208c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002090:	d028      	beq.n	80020e4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002092:	69bb      	ldr	r3, [r7, #24]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d007      	beq.n	80020a8 <UART_WaitOnFlagUntilTimeout+0x30>
 8002098:	f7fe fb94 	bl	80007c4 <HAL_GetTick>
 800209c:	4602      	mov	r2, r0
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	69ba      	ldr	r2, [r7, #24]
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d21d      	bcs.n	80020e4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	68da      	ldr	r2, [r3, #12]
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80020b6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	695a      	ldr	r2, [r3, #20]
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f022 0201 	bic.w	r2, r2, #1
 80020c6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	2220      	movs	r2, #32
 80020cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	2220      	movs	r2, #32
 80020d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	2200      	movs	r2, #0
 80020dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80020e0:	2303      	movs	r3, #3
 80020e2:	e00f      	b.n	8002104 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	4013      	ands	r3, r2
 80020ee:	68ba      	ldr	r2, [r7, #8]
 80020f0:	429a      	cmp	r2, r3
 80020f2:	bf0c      	ite	eq
 80020f4:	2301      	moveq	r3, #1
 80020f6:	2300      	movne	r3, #0
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	461a      	mov	r2, r3
 80020fc:	79fb      	ldrb	r3, [r7, #7]
 80020fe:	429a      	cmp	r2, r3
 8002100:	d0c3      	beq.n	800208a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002102:	2300      	movs	r3, #0
}
 8002104:	4618      	mov	r0, r3
 8002106:	3710      	adds	r7, #16
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}

0800210c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b086      	sub	sp, #24
 8002110:	af00      	add	r7, sp, #0
 8002112:	60f8      	str	r0, [r7, #12]
 8002114:	60b9      	str	r1, [r7, #8]
 8002116:	4613      	mov	r3, r2
 8002118:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800211a:	68ba      	ldr	r2, [r7, #8]
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	88fa      	ldrh	r2, [r7, #6]
 8002124:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	2200      	movs	r2, #0
 800212a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	2222      	movs	r2, #34	; 0x22
 8002130:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002138:	4a23      	ldr	r2, [pc, #140]	; (80021c8 <UART_Start_Receive_DMA+0xbc>)
 800213a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002140:	4a22      	ldr	r2, [pc, #136]	; (80021cc <UART_Start_Receive_DMA+0xc0>)
 8002142:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002148:	4a21      	ldr	r2, [pc, #132]	; (80021d0 <UART_Start_Receive_DMA+0xc4>)
 800214a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002150:	2200      	movs	r2, #0
 8002152:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8002154:	f107 0308 	add.w	r3, r7, #8
 8002158:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	3304      	adds	r3, #4
 8002164:	4619      	mov	r1, r3
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	88fb      	ldrh	r3, [r7, #6]
 800216c:	f7fe fcea 	bl	8000b44 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8002170:	2300      	movs	r3, #0
 8002172:	613b      	str	r3, [r7, #16]
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	613b      	str	r3, [r7, #16]
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	613b      	str	r3, [r7, #16]
 8002184:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	2200      	movs	r2, #0
 800218a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	68da      	ldr	r2, [r3, #12]
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800219c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	695a      	ldr	r2, [r3, #20]
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f042 0201 	orr.w	r2, r2, #1
 80021ac:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	695a      	ldr	r2, [r3, #20]
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80021bc:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 80021be:	2300      	movs	r3, #0
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3718      	adds	r7, #24
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	08001f19 	.word	0x08001f19
 80021cc:	08001faf 	.word	0x08001faf
 80021d0:	08001fe5 	.word	0x08001fe5

080021d4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	68da      	ldr	r2, [r3, #12]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80021ea:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2220      	movs	r2, #32
 80021f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80021f4:	bf00      	nop
 80021f6:	370c      	adds	r7, #12
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bc80      	pop	{r7}
 80021fc:	4770      	bx	lr

080021fe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80021fe:	b480      	push	{r7}
 8002200:	b083      	sub	sp, #12
 8002202:	af00      	add	r7, sp, #0
 8002204:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	68da      	ldr	r2, [r3, #12]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002214:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	695a      	ldr	r2, [r3, #20]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f022 0201 	bic.w	r2, r2, #1
 8002224:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222a:	2b01      	cmp	r3, #1
 800222c:	d107      	bne.n	800223e <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	68da      	ldr	r2, [r3, #12]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f022 0210 	bic.w	r2, r2, #16
 800223c:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2220      	movs	r2, #32
 8002242:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2200      	movs	r2, #0
 800224a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800224c:	bf00      	nop
 800224e:	370c      	adds	r7, #12
 8002250:	46bd      	mov	sp, r7
 8002252:	bc80      	pop	{r7}
 8002254:	4770      	bx	lr
	...

08002258 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b084      	sub	sp, #16
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	691b      	ldr	r3, [r3, #16]
 8002266:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	68da      	ldr	r2, [r3, #12]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	430a      	orrs	r2, r1
 8002274:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	689a      	ldr	r2, [r3, #8]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	691b      	ldr	r3, [r3, #16]
 800227e:	431a      	orrs	r2, r3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	695b      	ldr	r3, [r3, #20]
 8002284:	4313      	orrs	r3, r2
 8002286:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	68db      	ldr	r3, [r3, #12]
 800228e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002292:	f023 030c 	bic.w	r3, r3, #12
 8002296:	687a      	ldr	r2, [r7, #4]
 8002298:	6812      	ldr	r2, [r2, #0]
 800229a:	68b9      	ldr	r1, [r7, #8]
 800229c:	430b      	orrs	r3, r1
 800229e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	695b      	ldr	r3, [r3, #20]
 80022a6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	699a      	ldr	r2, [r3, #24]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	430a      	orrs	r2, r1
 80022b4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a2c      	ldr	r2, [pc, #176]	; (800236c <UART_SetConfig+0x114>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d103      	bne.n	80022c8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80022c0:	f7ff fb7a 	bl	80019b8 <HAL_RCC_GetPCLK2Freq>
 80022c4:	60f8      	str	r0, [r7, #12]
 80022c6:	e002      	b.n	80022ce <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80022c8:	f7ff fb62 	bl	8001990 <HAL_RCC_GetPCLK1Freq>
 80022cc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80022ce:	68fa      	ldr	r2, [r7, #12]
 80022d0:	4613      	mov	r3, r2
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	4413      	add	r3, r2
 80022d6:	009a      	lsls	r2, r3, #2
 80022d8:	441a      	add	r2, r3
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80022e4:	4a22      	ldr	r2, [pc, #136]	; (8002370 <UART_SetConfig+0x118>)
 80022e6:	fba2 2303 	umull	r2, r3, r2, r3
 80022ea:	095b      	lsrs	r3, r3, #5
 80022ec:	0119      	lsls	r1, r3, #4
 80022ee:	68fa      	ldr	r2, [r7, #12]
 80022f0:	4613      	mov	r3, r2
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	4413      	add	r3, r2
 80022f6:	009a      	lsls	r2, r3, #2
 80022f8:	441a      	add	r2, r3
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	fbb2 f2f3 	udiv	r2, r2, r3
 8002304:	4b1a      	ldr	r3, [pc, #104]	; (8002370 <UART_SetConfig+0x118>)
 8002306:	fba3 0302 	umull	r0, r3, r3, r2
 800230a:	095b      	lsrs	r3, r3, #5
 800230c:	2064      	movs	r0, #100	; 0x64
 800230e:	fb00 f303 	mul.w	r3, r0, r3
 8002312:	1ad3      	subs	r3, r2, r3
 8002314:	011b      	lsls	r3, r3, #4
 8002316:	3332      	adds	r3, #50	; 0x32
 8002318:	4a15      	ldr	r2, [pc, #84]	; (8002370 <UART_SetConfig+0x118>)
 800231a:	fba2 2303 	umull	r2, r3, r2, r3
 800231e:	095b      	lsrs	r3, r3, #5
 8002320:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002324:	4419      	add	r1, r3
 8002326:	68fa      	ldr	r2, [r7, #12]
 8002328:	4613      	mov	r3, r2
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	4413      	add	r3, r2
 800232e:	009a      	lsls	r2, r3, #2
 8002330:	441a      	add	r2, r3
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	fbb2 f2f3 	udiv	r2, r2, r3
 800233c:	4b0c      	ldr	r3, [pc, #48]	; (8002370 <UART_SetConfig+0x118>)
 800233e:	fba3 0302 	umull	r0, r3, r3, r2
 8002342:	095b      	lsrs	r3, r3, #5
 8002344:	2064      	movs	r0, #100	; 0x64
 8002346:	fb00 f303 	mul.w	r3, r0, r3
 800234a:	1ad3      	subs	r3, r2, r3
 800234c:	011b      	lsls	r3, r3, #4
 800234e:	3332      	adds	r3, #50	; 0x32
 8002350:	4a07      	ldr	r2, [pc, #28]	; (8002370 <UART_SetConfig+0x118>)
 8002352:	fba2 2303 	umull	r2, r3, r2, r3
 8002356:	095b      	lsrs	r3, r3, #5
 8002358:	f003 020f 	and.w	r2, r3, #15
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	440a      	add	r2, r1
 8002362:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002364:	bf00      	nop
 8002366:	3710      	adds	r7, #16
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}
 800236c:	40013800 	.word	0x40013800
 8002370:	51eb851f 	.word	0x51eb851f

08002374 <receiveThreadDebug>:
static const int TRANSMIT_TRY = 3;
static uint8_t send_data[TRANSMIT_BUFF_SIZE];
static uint8_t send_sync_bytes[1];
static uint8_t send_sync_ack[1];

static void receiveThreadDebug(const char *msg) {
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
//	printf("%s\n", msg);
}
 800237c:	bf00      	nop
 800237e:	370c      	adds	r7, #12
 8002380:	46bd      	mov	sp, r7
 8002382:	bc80      	pop	{r7}
 8002384:	4770      	bx	lr
	...

08002388 <console>:

static void console(ConsoleStatus status, const char *func_name,
		const char *msg, ...) {
 8002388:	b40c      	push	{r2, r3}
 800238a:	b580      	push	{r7, lr}
 800238c:	b084      	sub	sp, #16
 800238e:	af00      	add	r7, sp, #0
 8002390:	4603      	mov	r3, r0
 8002392:	6039      	str	r1, [r7, #0]
 8002394:	71fb      	strb	r3, [r7, #7]
//	printf("heyy\n");
	//	if(state!=CONSOLE_ERROR)
	if (status == CONSOLE_INFO)
 8002396:	79fb      	ldrb	r3, [r7, #7]
 8002398:	2b01      	cmp	r3, #1
 800239a:	d023      	beq.n	80023e4 <console+0x5c>
		return;
	//TODO make naked and show all registers
	if (status == CONSOLE_ERROR) {
 800239c:	79fb      	ldrb	r3, [r7, #7]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d104      	bne.n	80023ac <console+0x24>
		printf("uart.c|%s> ERROR :", func_name);
 80023a2:	6839      	ldr	r1, [r7, #0]
 80023a4:	4813      	ldr	r0, [pc, #76]	; (80023f4 <console+0x6c>)
 80023a6:	f000 fd0f 	bl	8002dc8 <iprintf>
 80023aa:	e013      	b.n	80023d4 <console+0x4c>
	} else if (status == CONSOLE_INFO) {
 80023ac:	79fb      	ldrb	r3, [r7, #7]
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d104      	bne.n	80023bc <console+0x34>
		printf("uart.c|%s> INFO : ", func_name);
 80023b2:	6839      	ldr	r1, [r7, #0]
 80023b4:	4810      	ldr	r0, [pc, #64]	; (80023f8 <console+0x70>)
 80023b6:	f000 fd07 	bl	8002dc8 <iprintf>
 80023ba:	e00b      	b.n	80023d4 <console+0x4c>
	} else if (status == CONSOLE_WARNING) {
 80023bc:	79fb      	ldrb	r3, [r7, #7]
 80023be:	2b02      	cmp	r3, #2
 80023c0:	d104      	bne.n	80023cc <console+0x44>
		printf("uart.c|%s> WARNING : ", func_name);
 80023c2:	6839      	ldr	r1, [r7, #0]
 80023c4:	480d      	ldr	r0, [pc, #52]	; (80023fc <console+0x74>)
 80023c6:	f000 fcff 	bl	8002dc8 <iprintf>
 80023ca:	e003      	b.n	80023d4 <console+0x4c>
	} else {
		printf("uart.c|%s: ", func_name);
 80023cc:	6839      	ldr	r1, [r7, #0]
 80023ce:	480c      	ldr	r0, [pc, #48]	; (8002400 <console+0x78>)
 80023d0:	f000 fcfa 	bl	8002dc8 <iprintf>
	}
	va_list args;
	va_start(args, msg);
 80023d4:	f107 031c 	add.w	r3, r7, #28
 80023d8:	60fb      	str	r3, [r7, #12]
	vprintf(msg, args);
 80023da:	68f9      	ldr	r1, [r7, #12]
 80023dc:	69b8      	ldr	r0, [r7, #24]
 80023de:	f000 fd95 	bl	8002f0c <viprintf>
 80023e2:	e000      	b.n	80023e6 <console+0x5e>
		return;
 80023e4:	bf00      	nop
	va_end(args);
}
 80023e6:	3710      	adds	r7, #16
 80023e8:	46bd      	mov	sp, r7
 80023ea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80023ee:	b002      	add	sp, #8
 80023f0:	4770      	bx	lr
 80023f2:	bf00      	nop
 80023f4:	08003ee8 	.word	0x08003ee8
 80023f8:	08003efc 	.word	0x08003efc
 80023fc:	08003f10 	.word	0x08003f10
 8002400:	08003f28 	.word	0x08003f28

08002404 <sendAndack>:
 * @param num_of_try    : number of try
 * @return              : 1 for success
 *                      : 0 for failed
 */
static uint8_t sendAndack(uint8_t *bytes, uint16_t bytes_len, uint8_t *ack,
		uint16_t ack_len, uint32_t time_out, uint8_t num_of_try) {
 8002404:	b580      	push	{r7, lr}
 8002406:	b088      	sub	sp, #32
 8002408:	af00      	add	r7, sp, #0
 800240a:	60f8      	str	r0, [r7, #12]
 800240c:	607a      	str	r2, [r7, #4]
 800240e:	461a      	mov	r2, r3
 8002410:	460b      	mov	r3, r1
 8002412:	817b      	strh	r3, [r7, #10]
 8002414:	4613      	mov	r3, r2
 8002416:	813b      	strh	r3, [r7, #8]
	uint8_t success_check = 0;
 8002418:	2300      	movs	r3, #0
 800241a:	77fb      	strb	r3, [r7, #31]
	for (int i = 0; i < num_of_try; i++) {
 800241c:	2300      	movs	r3, #0
 800241e:	61bb      	str	r3, [r7, #24]
 8002420:	e03e      	b.n	80024a0 <sendAndack+0x9c>
		if (HAL_UART_Transmit(huart_adapter, bytes, bytes_len, time_out)
 8002422:	4b24      	ldr	r3, [pc, #144]	; (80024b4 <sendAndack+0xb0>)
 8002424:	6818      	ldr	r0, [r3, #0]
 8002426:	897a      	ldrh	r2, [r7, #10]
 8002428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800242a:	68f9      	ldr	r1, [r7, #12]
 800242c:	f7ff fb98 	bl	8001b60 <HAL_UART_Transmit>
 8002430:	4603      	mov	r3, r0
 8002432:	2b00      	cmp	r3, #0
 8002434:	d006      	beq.n	8002444 <sendAndack+0x40>
				!= HAL_OK) {
			console(CONSOLE_ERROR, __func__, "A2P Transmit error, try no %d\n",
 8002436:	69bb      	ldr	r3, [r7, #24]
 8002438:	4a1f      	ldr	r2, [pc, #124]	; (80024b8 <sendAndack+0xb4>)
 800243a:	4920      	ldr	r1, [pc, #128]	; (80024bc <sendAndack+0xb8>)
 800243c:	2000      	movs	r0, #0
 800243e:	f7ff ffa3 	bl	8002388 <console>
					i);
			continue;
 8002442:	e02a      	b.n	800249a <sendAndack+0x96>
		}
		HAL_UART_Receive(huart_adapter, rec_ack, ack_len, time_out);
 8002444:	4b1b      	ldr	r3, [pc, #108]	; (80024b4 <sendAndack+0xb0>)
 8002446:	6818      	ldr	r0, [r3, #0]
 8002448:	893a      	ldrh	r2, [r7, #8]
 800244a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800244c:	491c      	ldr	r1, [pc, #112]	; (80024c0 <sendAndack+0xbc>)
 800244e:	f7ff fc19 	bl	8001c84 <HAL_UART_Receive>
		uint8_t check = 1;
 8002452:	2301      	movs	r3, #1
 8002454:	75fb      	strb	r3, [r7, #23]
		for (int j = 0; j < ack_len; j++) {
 8002456:	2300      	movs	r3, #0
 8002458:	613b      	str	r3, [r7, #16]
 800245a:	e014      	b.n	8002486 <sendAndack+0x82>
			if (rec_ack[j] != ack[j]) {
 800245c:	4a18      	ldr	r2, [pc, #96]	; (80024c0 <sendAndack+0xbc>)
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	4413      	add	r3, r2
 8002462:	781a      	ldrb	r2, [r3, #0]
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	6879      	ldr	r1, [r7, #4]
 8002468:	440b      	add	r3, r1
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	429a      	cmp	r2, r3
 800246e:	d007      	beq.n	8002480 <sendAndack+0x7c>
				check = 0;
 8002470:	2300      	movs	r3, #0
 8002472:	75fb      	strb	r3, [r7, #23]
				console(CONSOLE_ERROR, __func__, "A2P Ack match error :: \n");
 8002474:	4a13      	ldr	r2, [pc, #76]	; (80024c4 <sendAndack+0xc0>)
 8002476:	4911      	ldr	r1, [pc, #68]	; (80024bc <sendAndack+0xb8>)
 8002478:	2000      	movs	r0, #0
 800247a:	f7ff ff85 	bl	8002388 <console>
				break;
 800247e:	e006      	b.n	800248e <sendAndack+0x8a>
		for (int j = 0; j < ack_len; j++) {
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	3301      	adds	r3, #1
 8002484:	613b      	str	r3, [r7, #16]
 8002486:	893b      	ldrh	r3, [r7, #8]
 8002488:	693a      	ldr	r2, [r7, #16]
 800248a:	429a      	cmp	r2, r3
 800248c:	dbe6      	blt.n	800245c <sendAndack+0x58>
			}
		}
		if (check) {
 800248e:	7dfb      	ldrb	r3, [r7, #23]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d002      	beq.n	800249a <sendAndack+0x96>
			success_check = 1;
 8002494:	2301      	movs	r3, #1
 8002496:	77fb      	strb	r3, [r7, #31]
			break;
 8002498:	e007      	b.n	80024aa <sendAndack+0xa6>
	for (int i = 0; i < num_of_try; i++) {
 800249a:	69bb      	ldr	r3, [r7, #24]
 800249c:	3301      	adds	r3, #1
 800249e:	61bb      	str	r3, [r7, #24]
 80024a0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80024a4:	69ba      	ldr	r2, [r7, #24]
 80024a6:	429a      	cmp	r2, r3
 80024a8:	dbbb      	blt.n	8002422 <sendAndack+0x1e>
		}
	}
	return success_check;
 80024aa:	7ffb      	ldrb	r3, [r7, #31]
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	3720      	adds	r7, #32
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	2000017c 	.word	0x2000017c
 80024b8:	08003f34 	.word	0x08003f34
 80024bc:	08004544 	.word	0x08004544
 80024c0:	20000a10 	.word	0x20000a10
 80024c4:	08003f54 	.word	0x08003f54

080024c8 <startReceiving>:

/**
 * It starts the receiving process or make program to wait for data from PC
 */
static void startReceiving() {
 80024c8:	b580      	push	{r7, lr}
 80024ca:	af00      	add	r7, sp, #0
	rec_track = START;
 80024cc:	4b09      	ldr	r3, [pc, #36]	; (80024f4 <startReceiving+0x2c>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	701a      	strb	r2, [r3, #0]
	status = RECEIVING;
 80024d2:	4b09      	ldr	r3, [pc, #36]	; (80024f8 <startReceiving+0x30>)
 80024d4:	2201      	movs	r2, #1
 80024d6:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_DMA(huart_adapter, rec_sync_bytes, 1);
 80024d8:	4b08      	ldr	r3, [pc, #32]	; (80024fc <startReceiving+0x34>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	2201      	movs	r2, #1
 80024de:	4908      	ldr	r1, [pc, #32]	; (8002500 <startReceiving+0x38>)
 80024e0:	4618      	mov	r0, r3
 80024e2:	f7ff fc71 	bl	8001dc8 <HAL_UART_Receive_DMA>
	console(CONSOLE_INFO, __func__,
 80024e6:	4a07      	ldr	r2, [pc, #28]	; (8002504 <startReceiving+0x3c>)
 80024e8:	4907      	ldr	r1, [pc, #28]	; (8002508 <startReceiving+0x40>)
 80024ea:	2001      	movs	r0, #1
 80024ec:	f7ff ff4c 	bl	8002388 <console>
			"Waiting for start byte 'S' to be received\n");
}
 80024f0:	bf00      	nop
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	20000992 	.word	0x20000992
 80024f8:	20000009 	.word	0x20000009
 80024fc:	2000017c 	.word	0x2000017c
 8002500:	20000988 	.word	0x20000988
 8002504:	08003f70 	.word	0x08003f70
 8002508:	08004550 	.word	0x08004550

0800250c <receiveThread>:

/**
 * This is receive thread called each time there is a receive available
 */
static void receiveThread() {
 800250c:	b580      	push	{r7, lr}
 800250e:	b086      	sub	sp, #24
 8002510:	af00      	add	r7, sp, #0
	is_in_receiveThread = 1;
 8002512:	4ba0      	ldr	r3, [pc, #640]	; (8002794 <receiveThread+0x288>)
 8002514:	2201      	movs	r2, #1
 8002516:	701a      	strb	r2, [r3, #0]
	uint8_t is_failed = 0;
 8002518:	2300      	movs	r3, #0
 800251a:	75fb      	strb	r3, [r7, #23]
	if (rec_track == START) {
 800251c:	4b9e      	ldr	r3, [pc, #632]	; (8002798 <receiveThread+0x28c>)
 800251e:	781b      	ldrb	r3, [r3, #0]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d142      	bne.n	80025aa <receiveThread+0x9e>
		if (rec_sync_bytes[0] == 'S') {
 8002524:	4b9d      	ldr	r3, [pc, #628]	; (800279c <receiveThread+0x290>)
 8002526:	781b      	ldrb	r3, [r3, #0]
 8002528:	2b53      	cmp	r3, #83	; 0x53
 800252a:	d13b      	bne.n	80025a4 <receiveThread+0x98>
			rec_sync_bytes[0] = 'O';
 800252c:	4b9b      	ldr	r3, [pc, #620]	; (800279c <receiveThread+0x290>)
 800252e:	224f      	movs	r2, #79	; 0x4f
 8002530:	701a      	strb	r2, [r3, #0]
			rec_track++;
 8002532:	4b99      	ldr	r3, [pc, #612]	; (8002798 <receiveThread+0x28c>)
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	3301      	adds	r3, #1
 8002538:	b2da      	uxtb	r2, r3
 800253a:	4b97      	ldr	r3, [pc, #604]	; (8002798 <receiveThread+0x28c>)
 800253c:	701a      	strb	r2, [r3, #0]
			status = RECEIVING;
 800253e:	4b98      	ldr	r3, [pc, #608]	; (80027a0 <receiveThread+0x294>)
 8002540:	2201      	movs	r2, #1
 8002542:	701a      	strb	r2, [r3, #0]
			console(CONSOLE_INFO, __func__, "Start byte %c received\n",
					(char) rec_sync_bytes[0]);
 8002544:	4b95      	ldr	r3, [pc, #596]	; (800279c <receiveThread+0x290>)
 8002546:	781b      	ldrb	r3, [r3, #0]
			console(CONSOLE_INFO, __func__, "Start byte %c received\n",
 8002548:	4a96      	ldr	r2, [pc, #600]	; (80027a4 <receiveThread+0x298>)
 800254a:	4997      	ldr	r1, [pc, #604]	; (80027a8 <receiveThread+0x29c>)
 800254c:	2001      	movs	r0, #1
 800254e:	f7ff ff1b 	bl	8002388 <console>
			if (HAL_UART_Transmit(huart_adapter, rec_sync_bytes, 1,
 8002552:	4b96      	ldr	r3, [pc, #600]	; (80027ac <receiveThread+0x2a0>)
 8002554:	6818      	ldr	r0, [r3, #0]
 8002556:	f242 7310 	movw	r3, #10000	; 0x2710
 800255a:	2201      	movs	r2, #1
 800255c:	498f      	ldr	r1, [pc, #572]	; (800279c <receiveThread+0x290>)
 800255e:	f7ff faff 	bl	8001b60 <HAL_UART_Transmit>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d009      	beq.n	800257c <receiveThread+0x70>
					RECEIVE_TRANSMIT_TIMEOUT) != HAL_OK) {
				console(CONSOLE_ERROR, __func__, "Start ack %c send failed\n",
						(char) rec_sync_bytes[0]);
 8002568:	4b8c      	ldr	r3, [pc, #560]	; (800279c <receiveThread+0x290>)
 800256a:	781b      	ldrb	r3, [r3, #0]
				console(CONSOLE_ERROR, __func__, "Start ack %c send failed\n",
 800256c:	4a90      	ldr	r2, [pc, #576]	; (80027b0 <receiveThread+0x2a4>)
 800256e:	498e      	ldr	r1, [pc, #568]	; (80027a8 <receiveThread+0x29c>)
 8002570:	2000      	movs	r0, #0
 8002572:	f7ff ff09 	bl	8002388 <console>
				is_failed = 1;
 8002576:	2301      	movs	r3, #1
 8002578:	75fb      	strb	r3, [r7, #23]
 800257a:	e16f      	b.n	800285c <receiveThread+0x350>
			} else {
				console(CONSOLE_INFO, __func__, "Start ack %c sent\n",
						(char) rec_sync_bytes[0]);
 800257c:	4b87      	ldr	r3, [pc, #540]	; (800279c <receiveThread+0x290>)
 800257e:	781b      	ldrb	r3, [r3, #0]
				console(CONSOLE_INFO, __func__, "Start ack %c sent\n",
 8002580:	4a8c      	ldr	r2, [pc, #560]	; (80027b4 <receiveThread+0x2a8>)
 8002582:	4989      	ldr	r1, [pc, #548]	; (80027a8 <receiveThread+0x29c>)
 8002584:	2001      	movs	r0, #1
 8002586:	f7ff feff 	bl	8002388 <console>
				HAL_UART_Receive_DMA(huart_adapter, rec_id_bytes, 4);
 800258a:	4b88      	ldr	r3, [pc, #544]	; (80027ac <receiveThread+0x2a0>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	2204      	movs	r2, #4
 8002590:	4989      	ldr	r1, [pc, #548]	; (80027b8 <receiveThread+0x2ac>)
 8002592:	4618      	mov	r0, r3
 8002594:	f7ff fc18 	bl	8001dc8 <HAL_UART_Receive_DMA>
				console(CONSOLE_INFO, __func__,
 8002598:	4a88      	ldr	r2, [pc, #544]	; (80027bc <receiveThread+0x2b0>)
 800259a:	4983      	ldr	r1, [pc, #524]	; (80027a8 <receiveThread+0x29c>)
 800259c:	2001      	movs	r0, #1
 800259e:	f7ff fef3 	bl	8002388 <console>
 80025a2:	e15b      	b.n	800285c <receiveThread+0x350>
						"Waiting for CAN ID to be received \n");
			}
		} else {
			startReceiving();
 80025a4:	f7ff ff90 	bl	80024c8 <startReceiving>
 80025a8:	e158      	b.n	800285c <receiveThread+0x350>
		}
	} else if (rec_track == ID) {
 80025aa:	4b7b      	ldr	r3, [pc, #492]	; (8002798 <receiveThread+0x28c>)
 80025ac:	781b      	ldrb	r3, [r3, #0]
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d135      	bne.n	800261e <receiveThread+0x112>
		rec_track++;
 80025b2:	4b79      	ldr	r3, [pc, #484]	; (8002798 <receiveThread+0x28c>)
 80025b4:	781b      	ldrb	r3, [r3, #0]
 80025b6:	3301      	adds	r3, #1
 80025b8:	b2da      	uxtb	r2, r3
 80025ba:	4b77      	ldr	r3, [pc, #476]	; (8002798 <receiveThread+0x28c>)
 80025bc:	701a      	strb	r2, [r3, #0]
		console(CONSOLE_INFO, __func__, "CAN ID received :: 0x%x \n",
				*(uint8_t*) rec_id_bytes);
 80025be:	4b7e      	ldr	r3, [pc, #504]	; (80027b8 <receiveThread+0x2ac>)
 80025c0:	781b      	ldrb	r3, [r3, #0]
		console(CONSOLE_INFO, __func__, "CAN ID received :: 0x%x \n",
 80025c2:	4a7f      	ldr	r2, [pc, #508]	; (80027c0 <receiveThread+0x2b4>)
 80025c4:	4978      	ldr	r1, [pc, #480]	; (80027a8 <receiveThread+0x29c>)
 80025c6:	2001      	movs	r0, #1
 80025c8:	f7ff fede 	bl	8002388 <console>
		if (HAL_UART_Transmit(huart_adapter, rec_id_bytes, 4,
 80025cc:	4b77      	ldr	r3, [pc, #476]	; (80027ac <receiveThread+0x2a0>)
 80025ce:	6818      	ldr	r0, [r3, #0]
 80025d0:	f242 7310 	movw	r3, #10000	; 0x2710
 80025d4:	2204      	movs	r2, #4
 80025d6:	4978      	ldr	r1, [pc, #480]	; (80027b8 <receiveThread+0x2ac>)
 80025d8:	f7ff fac2 	bl	8001b60 <HAL_UART_Transmit>
 80025dc:	4603      	mov	r3, r0
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d009      	beq.n	80025f6 <receiveThread+0xea>
				RECEIVE_TRANSMIT_TIMEOUT) != HAL_OK) {
			console(CONSOLE_ERROR, __func__, "CAN ID ack 0x%x sending failed\n",
					*(uint8_t*) rec_id_bytes);
 80025e2:	4b75      	ldr	r3, [pc, #468]	; (80027b8 <receiveThread+0x2ac>)
 80025e4:	781b      	ldrb	r3, [r3, #0]
			console(CONSOLE_ERROR, __func__, "CAN ID ack 0x%x sending failed\n",
 80025e6:	4a77      	ldr	r2, [pc, #476]	; (80027c4 <receiveThread+0x2b8>)
 80025e8:	496f      	ldr	r1, [pc, #444]	; (80027a8 <receiveThread+0x29c>)
 80025ea:	2000      	movs	r0, #0
 80025ec:	f7ff fecc 	bl	8002388 <console>

			is_failed = 1;
 80025f0:	2301      	movs	r3, #1
 80025f2:	75fb      	strb	r3, [r7, #23]
 80025f4:	e132      	b.n	800285c <receiveThread+0x350>
		} else {
			console(CONSOLE_INFO, __func__, "CAN ID ack 0x%x sent\n",
					*(uint8_t*) rec_id_bytes);
 80025f6:	4b70      	ldr	r3, [pc, #448]	; (80027b8 <receiveThread+0x2ac>)
 80025f8:	781b      	ldrb	r3, [r3, #0]
			console(CONSOLE_INFO, __func__, "CAN ID ack 0x%x sent\n",
 80025fa:	4a73      	ldr	r2, [pc, #460]	; (80027c8 <receiveThread+0x2bc>)
 80025fc:	496a      	ldr	r1, [pc, #424]	; (80027a8 <receiveThread+0x29c>)
 80025fe:	2001      	movs	r0, #1
 8002600:	f7ff fec2 	bl	8002388 <console>
			HAL_UART_Receive_DMA(huart_adapter, rec_len_bytes, 2);
 8002604:	4b69      	ldr	r3, [pc, #420]	; (80027ac <receiveThread+0x2a0>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	2202      	movs	r2, #2
 800260a:	4970      	ldr	r1, [pc, #448]	; (80027cc <receiveThread+0x2c0>)
 800260c:	4618      	mov	r0, r3
 800260e:	f7ff fbdb 	bl	8001dc8 <HAL_UART_Receive_DMA>
			console(CONSOLE_INFO, __func__,
 8002612:	4a6f      	ldr	r2, [pc, #444]	; (80027d0 <receiveThread+0x2c4>)
 8002614:	4964      	ldr	r1, [pc, #400]	; (80027a8 <receiveThread+0x29c>)
 8002616:	2001      	movs	r0, #1
 8002618:	f7ff feb6 	bl	8002388 <console>
 800261c:	e11e      	b.n	800285c <receiveThread+0x350>
					"Waiting for length to be received\n");
		}
	} else if (rec_track == LEN) {
 800261e:	4b5e      	ldr	r3, [pc, #376]	; (8002798 <receiveThread+0x28c>)
 8002620:	781b      	ldrb	r3, [r3, #0]
 8002622:	2b02      	cmp	r3, #2
 8002624:	d137      	bne.n	8002696 <receiveThread+0x18a>
		console(CONSOLE_INFO, __func__, "Start byte %c received\n",
				*(uint8_t*) rec_len_bytes);
 8002626:	4b69      	ldr	r3, [pc, #420]	; (80027cc <receiveThread+0x2c0>)
 8002628:	781b      	ldrb	r3, [r3, #0]
		console(CONSOLE_INFO, __func__, "Start byte %c received\n",
 800262a:	4a5e      	ldr	r2, [pc, #376]	; (80027a4 <receiveThread+0x298>)
 800262c:	495e      	ldr	r1, [pc, #376]	; (80027a8 <receiveThread+0x29c>)
 800262e:	2001      	movs	r0, #1
 8002630:	f7ff feaa 	bl	8002388 <console>
		rec_track++;
 8002634:	4b58      	ldr	r3, [pc, #352]	; (8002798 <receiveThread+0x28c>)
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	3301      	adds	r3, #1
 800263a:	b2da      	uxtb	r2, r3
 800263c:	4b56      	ldr	r3, [pc, #344]	; (8002798 <receiveThread+0x28c>)
 800263e:	701a      	strb	r2, [r3, #0]
		if (HAL_UART_Transmit(huart_adapter, rec_len_bytes, 2,
 8002640:	4b5a      	ldr	r3, [pc, #360]	; (80027ac <receiveThread+0x2a0>)
 8002642:	6818      	ldr	r0, [r3, #0]
 8002644:	f242 7310 	movw	r3, #10000	; 0x2710
 8002648:	2202      	movs	r2, #2
 800264a:	4960      	ldr	r1, [pc, #384]	; (80027cc <receiveThread+0x2c0>)
 800264c:	f7ff fa88 	bl	8001b60 <HAL_UART_Transmit>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d007      	beq.n	8002666 <receiveThread+0x15a>
				RECEIVE_TRANSMIT_TIMEOUT) != HAL_OK) {
			console(CONSOLE_INFO, __func__,
 8002656:	4a5f      	ldr	r2, [pc, #380]	; (80027d4 <receiveThread+0x2c8>)
 8002658:	4953      	ldr	r1, [pc, #332]	; (80027a8 <receiveThread+0x29c>)
 800265a:	2001      	movs	r0, #1
 800265c:	f7ff fe94 	bl	8002388 <console>
					"Length ack transmission failed \n");
			is_failed = 1;
 8002660:	2301      	movs	r3, #1
 8002662:	75fb      	strb	r3, [r7, #23]
 8002664:	e0fa      	b.n	800285c <receiveThread+0x350>
		} else {
			console(CONSOLE_INFO, __func__, "Length ack transmitted : %d \n",
					*((uint16_t*) rec_len_bytes));
 8002666:	4b59      	ldr	r3, [pc, #356]	; (80027cc <receiveThread+0x2c0>)
 8002668:	881b      	ldrh	r3, [r3, #0]
			console(CONSOLE_INFO, __func__, "Length ack transmitted : %d \n",
 800266a:	4a5b      	ldr	r2, [pc, #364]	; (80027d8 <receiveThread+0x2cc>)
 800266c:	494e      	ldr	r1, [pc, #312]	; (80027a8 <receiveThread+0x29c>)
 800266e:	2001      	movs	r0, #1
 8002670:	f7ff fe8a 	bl	8002388 <console>
			HAL_UART_Receive_DMA(huart_adapter, rec_data,
 8002674:	4b4d      	ldr	r3, [pc, #308]	; (80027ac <receiveThread+0x2a0>)
 8002676:	681b      	ldr	r3, [r3, #0]
					*((uint16_t*) rec_len_bytes));
 8002678:	4a54      	ldr	r2, [pc, #336]	; (80027cc <receiveThread+0x2c0>)
			HAL_UART_Receive_DMA(huart_adapter, rec_data,
 800267a:	8812      	ldrh	r2, [r2, #0]
 800267c:	4957      	ldr	r1, [pc, #348]	; (80027dc <receiveThread+0x2d0>)
 800267e:	4618      	mov	r0, r3
 8002680:	f7ff fba2 	bl	8001dc8 <HAL_UART_Receive_DMA>
			receiveThreadDebug("LEN");
 8002684:	4856      	ldr	r0, [pc, #344]	; (80027e0 <receiveThread+0x2d4>)
 8002686:	f7ff fe75 	bl	8002374 <receiveThreadDebug>
			console(CONSOLE_INFO, __func__,
 800268a:	4a56      	ldr	r2, [pc, #344]	; (80027e4 <receiveThread+0x2d8>)
 800268c:	4946      	ldr	r1, [pc, #280]	; (80027a8 <receiveThread+0x29c>)
 800268e:	2001      	movs	r0, #1
 8002690:	f7ff fe7a 	bl	8002388 <console>
 8002694:	e0e2      	b.n	800285c <receiveThread+0x350>
					"Waiting for data to be received\n");
		}

	} else if (rec_track == DATA) {
 8002696:	4b40      	ldr	r3, [pc, #256]	; (8002798 <receiveThread+0x28c>)
 8002698:	781b      	ldrb	r3, [r3, #0]
 800269a:	2b03      	cmp	r3, #3
 800269c:	d15a      	bne.n	8002754 <receiveThread+0x248>
		uint32_t len = *((uint16_t*) rec_len_bytes);
 800269e:	4b4b      	ldr	r3, [pc, #300]	; (80027cc <receiveThread+0x2c0>)
 80026a0:	881b      	ldrh	r3, [r3, #0]
 80026a2:	613b      	str	r3, [r7, #16]
		int loop_limit = len % 4;
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	f003 0303 	and.w	r3, r3, #3
 80026aa:	60bb      	str	r3, [r7, #8]
		for (int i = 0; i < (4 - loop_limit) && loop_limit > 0; i++)
 80026ac:	2300      	movs	r3, #0
 80026ae:	60fb      	str	r3, [r7, #12]
 80026b0:	e008      	b.n	80026c4 <receiveThread+0x1b8>
			rec_data[len++] = 0x00;
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	1c5a      	adds	r2, r3, #1
 80026b6:	613a      	str	r2, [r7, #16]
 80026b8:	4a48      	ldr	r2, [pc, #288]	; (80027dc <receiveThread+0x2d0>)
 80026ba:	2100      	movs	r1, #0
 80026bc:	54d1      	strb	r1, [r2, r3]
		for (int i = 0; i < (4 - loop_limit) && loop_limit > 0; i++)
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	3301      	adds	r3, #1
 80026c2:	60fb      	str	r3, [r7, #12]
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	f1c3 0304 	rsb	r3, r3, #4
 80026ca:	68fa      	ldr	r2, [r7, #12]
 80026cc:	429a      	cmp	r2, r3
 80026ce:	da02      	bge.n	80026d6 <receiveThread+0x1ca>
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	dced      	bgt.n	80026b2 <receiveThread+0x1a6>
		uint32_t crc = HAL_CRC_Calculate(hcrc_adapter, (uint32_t*) rec_data,
 80026d6:	4b44      	ldr	r3, [pc, #272]	; (80027e8 <receiveThread+0x2dc>)
 80026d8:	6818      	ldr	r0, [r3, #0]
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	089b      	lsrs	r3, r3, #2
 80026de:	461a      	mov	r2, r3
 80026e0:	493e      	ldr	r1, [pc, #248]	; (80027dc <receiveThread+0x2d0>)
 80026e2:	f7fe f9a2 	bl	8000a2a <HAL_CRC_Calculate>
 80026e6:	4603      	mov	r3, r0
 80026e8:	607b      	str	r3, [r7, #4]
				len / 4);
		rec_track++;
 80026ea:	4b2b      	ldr	r3, [pc, #172]	; (8002798 <receiveThread+0x28c>)
 80026ec:	781b      	ldrb	r3, [r3, #0]
 80026ee:	3301      	adds	r3, #1
 80026f0:	b2da      	uxtb	r2, r3
 80026f2:	4b29      	ldr	r3, [pc, #164]	; (8002798 <receiveThread+0x28c>)
 80026f4:	701a      	strb	r2, [r3, #0]
		console(CONSOLE_INFO, __func__, "Data received\n");
 80026f6:	4a3d      	ldr	r2, [pc, #244]	; (80027ec <receiveThread+0x2e0>)
 80026f8:	492b      	ldr	r1, [pc, #172]	; (80027a8 <receiveThread+0x29c>)
 80026fa:	2001      	movs	r0, #1
 80026fc:	f7ff fe44 	bl	8002388 <console>
		if (HAL_UART_Transmit(huart_adapter, (uint8_t*) &crc, 4,
 8002700:	4b2a      	ldr	r3, [pc, #168]	; (80027ac <receiveThread+0x2a0>)
 8002702:	6818      	ldr	r0, [r3, #0]
 8002704:	f242 7310 	movw	r3, #10000	; 0x2710
 8002708:	1d39      	adds	r1, r7, #4
 800270a:	2204      	movs	r2, #4
 800270c:	f7ff fa28 	bl	8001b60 <HAL_UART_Transmit>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d008      	beq.n	8002728 <receiveThread+0x21c>
				RECEIVE_TRANSMIT_TIMEOUT) != HAL_OK) {
			console(CONSOLE_ERROR, __func__,
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4a35      	ldr	r2, [pc, #212]	; (80027f0 <receiveThread+0x2e4>)
 800271a:	4923      	ldr	r1, [pc, #140]	; (80027a8 <receiveThread+0x29c>)
 800271c:	2000      	movs	r0, #0
 800271e:	f7ff fe33 	bl	8002388 <console>
					"Data ack CRC %0x0x transmission failed \n", crc);
			is_failed = 1;
 8002722:	2301      	movs	r3, #1
 8002724:	75fb      	strb	r3, [r7, #23]
 8002726:	e099      	b.n	800285c <receiveThread+0x350>
		} else {
			console(CONSOLE_INFO, __func__, "Data ack CRC transmitted :  %d \n",
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	4a32      	ldr	r2, [pc, #200]	; (80027f4 <receiveThread+0x2e8>)
 800272c:	491e      	ldr	r1, [pc, #120]	; (80027a8 <receiveThread+0x29c>)
 800272e:	2001      	movs	r0, #1
 8002730:	f7ff fe2a 	bl	8002388 <console>
					crc);
			HAL_UART_Receive_DMA(huart_adapter, rec_sync_bytes, 1);
 8002734:	4b1d      	ldr	r3, [pc, #116]	; (80027ac <receiveThread+0x2a0>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	2201      	movs	r2, #1
 800273a:	4918      	ldr	r1, [pc, #96]	; (800279c <receiveThread+0x290>)
 800273c:	4618      	mov	r0, r3
 800273e:	f7ff fb43 	bl	8001dc8 <HAL_UART_Receive_DMA>
			console(CONSOLE_INFO, __func__, "Waiting for end byte received \n");
 8002742:	4a2d      	ldr	r2, [pc, #180]	; (80027f8 <receiveThread+0x2ec>)
 8002744:	4918      	ldr	r1, [pc, #96]	; (80027a8 <receiveThread+0x29c>)
 8002746:	2001      	movs	r0, #1
 8002748:	f7ff fe1e 	bl	8002388 <console>
			receiveThreadDebug("DATA");
 800274c:	482b      	ldr	r0, [pc, #172]	; (80027fc <receiveThread+0x2f0>)
 800274e:	f7ff fe11 	bl	8002374 <receiveThreadDebug>
 8002752:	e083      	b.n	800285c <receiveThread+0x350>
		}
	} else if (rec_track == END) {
 8002754:	4b10      	ldr	r3, [pc, #64]	; (8002798 <receiveThread+0x28c>)
 8002756:	781b      	ldrb	r3, [r3, #0]
 8002758:	2b04      	cmp	r3, #4
 800275a:	d17f      	bne.n	800285c <receiveThread+0x350>
		console(CONSOLE_INFO, __func__, "End byte received : %c \n",
				(char) rec_sync_bytes[0]);
 800275c:	4b0f      	ldr	r3, [pc, #60]	; (800279c <receiveThread+0x290>)
 800275e:	781b      	ldrb	r3, [r3, #0]
		console(CONSOLE_INFO, __func__, "End byte received : %c \n",
 8002760:	4a27      	ldr	r2, [pc, #156]	; (8002800 <receiveThread+0x2f4>)
 8002762:	4911      	ldr	r1, [pc, #68]	; (80027a8 <receiveThread+0x29c>)
 8002764:	2001      	movs	r0, #1
 8002766:	f7ff fe0f 	bl	8002388 <console>
		received_id = *((uint32_t*) rec_id_bytes);
 800276a:	4b13      	ldr	r3, [pc, #76]	; (80027b8 <receiveThread+0x2ac>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a25      	ldr	r2, [pc, #148]	; (8002804 <receiveThread+0x2f8>)
 8002770:	6013      	str	r3, [r2, #0]
		received_len = *((uint16_t*) rec_len_bytes);
 8002772:	4b16      	ldr	r3, [pc, #88]	; (80027cc <receiveThread+0x2c0>)
 8002774:	881a      	ldrh	r2, [r3, #0]
 8002776:	4b24      	ldr	r3, [pc, #144]	; (8002808 <receiveThread+0x2fc>)
 8002778:	801a      	strh	r2, [r3, #0]
		if (rec_sync_bytes[0] == '\0') {
 800277a:	4b08      	ldr	r3, [pc, #32]	; (800279c <receiveThread+0x290>)
 800277c:	781b      	ldrb	r3, [r3, #0]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d148      	bne.n	8002814 <receiveThread+0x308>
			received = 1;
 8002782:	4b22      	ldr	r3, [pc, #136]	; (800280c <receiveThread+0x300>)
 8002784:	2201      	movs	r2, #1
 8002786:	701a      	strb	r2, [r3, #0]
			console(CONSOLE_INFO, __func__,
 8002788:	4a21      	ldr	r2, [pc, #132]	; (8002810 <receiveThread+0x304>)
 800278a:	4907      	ldr	r1, [pc, #28]	; (80027a8 <receiveThread+0x29c>)
 800278c:	2001      	movs	r0, #1
 800278e:	f7ff fdfb 	bl	8002388 <console>
 8002792:	e044      	b.n	800281e <receiveThread+0x312>
 8002794:	200009a2 	.word	0x200009a2
 8002798:	20000992 	.word	0x20000992
 800279c:	20000988 	.word	0x20000988
 80027a0:	20000009 	.word	0x20000009
 80027a4:	08003f9c 	.word	0x08003f9c
 80027a8:	08004560 	.word	0x08004560
 80027ac:	2000017c 	.word	0x2000017c
 80027b0:	08003fb4 	.word	0x08003fb4
 80027b4:	08003fd0 	.word	0x08003fd0
 80027b8:	2000098c 	.word	0x2000098c
 80027bc:	08003fe4 	.word	0x08003fe4
 80027c0:	08004008 	.word	0x08004008
 80027c4:	08004024 	.word	0x08004024
 80027c8:	08004044 	.word	0x08004044
 80027cc:	20000990 	.word	0x20000990
 80027d0:	0800405c 	.word	0x0800405c
 80027d4:	08004080 	.word	0x08004080
 80027d8:	080040a4 	.word	0x080040a4
 80027dc:	20000188 	.word	0x20000188
 80027e0:	080040c4 	.word	0x080040c4
 80027e4:	080040c8 	.word	0x080040c8
 80027e8:	20000180 	.word	0x20000180
 80027ec:	080040ec 	.word	0x080040ec
 80027f0:	080040fc 	.word	0x080040fc
 80027f4:	08004128 	.word	0x08004128
 80027f8:	0800414c 	.word	0x0800414c
 80027fc:	0800416c 	.word	0x0800416c
 8002800:	08004174 	.word	0x08004174
 8002804:	2000099c 	.word	0x2000099c
 8002808:	200009a0 	.word	0x200009a0
 800280c:	20000998 	.word	0x20000998
 8002810:	08004190 	.word	0x08004190
					"Data received successfully(CRC matched)\n");
		} else {
			console(CONSOLE_ERROR, __func__,
 8002814:	4a1c      	ldr	r2, [pc, #112]	; (8002888 <receiveThread+0x37c>)
 8002816:	491d      	ldr	r1, [pc, #116]	; (800288c <receiveThread+0x380>)
 8002818:	2000      	movs	r0, #0
 800281a:	f7ff fdb5 	bl	8002388 <console>
					"Data end ack receive failed(CRC didn't match)\n");
		}
		rec_sync_bytes[0] = 'O';
 800281e:	4b1c      	ldr	r3, [pc, #112]	; (8002890 <receiveThread+0x384>)
 8002820:	224f      	movs	r2, #79	; 0x4f
 8002822:	701a      	strb	r2, [r3, #0]
		if (HAL_UART_Transmit(huart_adapter, rec_sync_bytes, 1,
 8002824:	4b1b      	ldr	r3, [pc, #108]	; (8002894 <receiveThread+0x388>)
 8002826:	6818      	ldr	r0, [r3, #0]
 8002828:	f242 7310 	movw	r3, #10000	; 0x2710
 800282c:	2201      	movs	r2, #1
 800282e:	4918      	ldr	r1, [pc, #96]	; (8002890 <receiveThread+0x384>)
 8002830:	f7ff f996 	bl	8001b60 <HAL_UART_Transmit>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d007      	beq.n	800284a <receiveThread+0x33e>
				RECEIVE_TRANSMIT_TIMEOUT) != HAL_OK) {

			console(CONSOLE_INFO, __func__, "End ack transmission failed\n");
 800283a:	4a17      	ldr	r2, [pc, #92]	; (8002898 <receiveThread+0x38c>)
 800283c:	4913      	ldr	r1, [pc, #76]	; (800288c <receiveThread+0x380>)
 800283e:	2001      	movs	r0, #1
 8002840:	f7ff fda2 	bl	8002388 <console>
			is_failed = 1;
 8002844:	2301      	movs	r3, #1
 8002846:	75fb      	strb	r3, [r7, #23]
 8002848:	e008      	b.n	800285c <receiveThread+0x350>
		} else {
			console(CONSOLE_INFO, __func__, "End ack transmitted : %c\n",
					(char) rec_sync_bytes[0]);
 800284a:	4b11      	ldr	r3, [pc, #68]	; (8002890 <receiveThread+0x384>)
 800284c:	781b      	ldrb	r3, [r3, #0]
			console(CONSOLE_INFO, __func__, "End ack transmitted : %c\n",
 800284e:	4a13      	ldr	r2, [pc, #76]	; (800289c <receiveThread+0x390>)
 8002850:	490e      	ldr	r1, [pc, #56]	; (800288c <receiveThread+0x380>)
 8002852:	2001      	movs	r0, #1
 8002854:	f7ff fd98 	bl	8002388 <console>
			startReceiving();
 8002858:	f7ff fe36 	bl	80024c8 <startReceiving>
		}
	}

	if (is_failed) {
 800285c:	7dfb      	ldrb	r3, [r7, #23]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d006      	beq.n	8002870 <receiveThread+0x364>
		console(CONSOLE_ERROR, __func__,
 8002862:	4a0f      	ldr	r2, [pc, #60]	; (80028a0 <receiveThread+0x394>)
 8002864:	4909      	ldr	r1, [pc, #36]	; (800288c <receiveThread+0x380>)
 8002866:	2000      	movs	r0, #0
 8002868:	f7ff fd8e 	bl	8002388 <console>
				"receiveThread process failed and process is restarted\n");
		startReceiving();
 800286c:	f7ff fe2c 	bl	80024c8 <startReceiving>
	}
	time_elapse = HAL_GetTick();
 8002870:	f7fd ffa8 	bl	80007c4 <HAL_GetTick>
 8002874:	4603      	mov	r3, r0
 8002876:	4a0b      	ldr	r2, [pc, #44]	; (80028a4 <receiveThread+0x398>)
 8002878:	6013      	str	r3, [r2, #0]
	is_in_receiveThread = 0;
 800287a:	4b0b      	ldr	r3, [pc, #44]	; (80028a8 <receiveThread+0x39c>)
 800287c:	2200      	movs	r2, #0
 800287e:	701a      	strb	r2, [r3, #0]
}
 8002880:	bf00      	nop
 8002882:	3718      	adds	r7, #24
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}
 8002888:	080041bc 	.word	0x080041bc
 800288c:	08004560 	.word	0x08004560
 8002890:	20000988 	.word	0x20000988
 8002894:	2000017c 	.word	0x2000017c
 8002898:	080041ec 	.word	0x080041ec
 800289c:	0800420c 	.word	0x0800420c
 80028a0:	08004228 	.word	0x08004228
 80028a4:	20000994 	.word	0x20000994
 80028a8:	200009a2 	.word	0x200009a2

080028ac <startSending>:

/**
 * It start the sending process or stop receiving process
 */
static void startSending() {
 80028ac:	b580      	push	{r7, lr}
 80028ae:	af00      	add	r7, sp, #0
	status = SENDING;
 80028b0:	4b04      	ldr	r3, [pc, #16]	; (80028c4 <startSending+0x18>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	701a      	strb	r2, [r3, #0]
	HAL_UART_DMAStop(huart_adapter);
 80028b6:	4b04      	ldr	r3, [pc, #16]	; (80028c8 <startSending+0x1c>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4618      	mov	r0, r3
 80028bc:	f7ff fab4 	bl	8001e28 <HAL_UART_DMAStop>
}
 80028c0:	bf00      	nop
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	20000009 	.word	0x20000009
 80028c8:	2000017c 	.word	0x2000017c

080028cc <sendThread>:
 *@param bytes	: Bytes to be sent
 *@param len 	: length of bytes
 *@return       : 1 for successs
 *				: 0 for failed
 */
static uint8_t sendThread(uint32_t id, uint16_t len) {
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b08c      	sub	sp, #48	; 0x30
 80028d0:	af02      	add	r7, sp, #8
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	460b      	mov	r3, r1
 80028d6:	807b      	strh	r3, [r7, #2]
	startSending();
 80028d8:	f7ff ffe8 	bl	80028ac <startSending>
	uint32_t timeout = TRANSMIT_TIMEOUT;
 80028dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028e0:	61fb      	str	r3, [r7, #28]
	uint8_t num_try = 5;
 80028e2:	2305      	movs	r3, #5
 80028e4:	76fb      	strb	r3, [r7, #27]

	send_sync_bytes[0] = 'S';
 80028e6:	4b76      	ldr	r3, [pc, #472]	; (8002ac0 <sendThread+0x1f4>)
 80028e8:	2253      	movs	r2, #83	; 0x53
 80028ea:	701a      	strb	r2, [r3, #0]
	send_sync_ack[0] = 'O';
 80028ec:	4b75      	ldr	r3, [pc, #468]	; (8002ac4 <sendThread+0x1f8>)
 80028ee:	224f      	movs	r2, #79	; 0x4f
 80028f0:	701a      	strb	r2, [r3, #0]

	if (!sendAndack(send_sync_bytes, 1, send_sync_ack, 1, timeout, num_try)) {
 80028f2:	7efb      	ldrb	r3, [r7, #27]
 80028f4:	9301      	str	r3, [sp, #4]
 80028f6:	69fb      	ldr	r3, [r7, #28]
 80028f8:	9300      	str	r3, [sp, #0]
 80028fa:	2301      	movs	r3, #1
 80028fc:	4a71      	ldr	r2, [pc, #452]	; (8002ac4 <sendThread+0x1f8>)
 80028fe:	2101      	movs	r1, #1
 8002900:	486f      	ldr	r0, [pc, #444]	; (8002ac0 <sendThread+0x1f4>)
 8002902:	f7ff fd7f 	bl	8002404 <sendAndack>
 8002906:	4603      	mov	r3, r0
 8002908:	2b00      	cmp	r3, #0
 800290a:	d10d      	bne.n	8002928 <sendThread+0x5c>
		console(CONSOLE_ERROR, __func__,
				"A2P Start ack %c sending and %c ack receive error\n",
				(char) send_sync_bytes[0], (char) send_sync_ack[0]);
 800290c:	4b6c      	ldr	r3, [pc, #432]	; (8002ac0 <sendThread+0x1f4>)
 800290e:	781b      	ldrb	r3, [r3, #0]
		console(CONSOLE_ERROR, __func__,
 8002910:	461a      	mov	r2, r3
				(char) send_sync_bytes[0], (char) send_sync_ack[0]);
 8002912:	4b6c      	ldr	r3, [pc, #432]	; (8002ac4 <sendThread+0x1f8>)
 8002914:	781b      	ldrb	r3, [r3, #0]
		console(CONSOLE_ERROR, __func__,
 8002916:	9300      	str	r3, [sp, #0]
 8002918:	4613      	mov	r3, r2
 800291a:	4a6b      	ldr	r2, [pc, #428]	; (8002ac8 <sendThread+0x1fc>)
 800291c:	496b      	ldr	r1, [pc, #428]	; (8002acc <sendThread+0x200>)
 800291e:	2000      	movs	r0, #0
 8002920:	f7ff fd32 	bl	8002388 <console>
		return 0;
 8002924:	2300      	movs	r3, #0
 8002926:	e0c6      	b.n	8002ab6 <sendThread+0x1ea>
	}
	console(CONSOLE_INFO, __func__, "A2P Start send and receive ack %c & %c\n",
			(char) send_sync_bytes[0], (char) send_sync_ack[0]);
 8002928:	4b65      	ldr	r3, [pc, #404]	; (8002ac0 <sendThread+0x1f4>)
 800292a:	781b      	ldrb	r3, [r3, #0]
	console(CONSOLE_INFO, __func__, "A2P Start send and receive ack %c & %c\n",
 800292c:	461a      	mov	r2, r3
			(char) send_sync_bytes[0], (char) send_sync_ack[0]);
 800292e:	4b65      	ldr	r3, [pc, #404]	; (8002ac4 <sendThread+0x1f8>)
 8002930:	781b      	ldrb	r3, [r3, #0]
	console(CONSOLE_INFO, __func__, "A2P Start send and receive ack %c & %c\n",
 8002932:	9300      	str	r3, [sp, #0]
 8002934:	4613      	mov	r3, r2
 8002936:	4a66      	ldr	r2, [pc, #408]	; (8002ad0 <sendThread+0x204>)
 8002938:	4964      	ldr	r1, [pc, #400]	; (8002acc <sendThread+0x200>)
 800293a:	2001      	movs	r0, #1
 800293c:	f7ff fd24 	bl	8002388 <console>

	if (!sendAndack((uint8_t*) (&id), 4, (uint8_t*) (&id), 4, timeout,
 8002940:	1d3a      	adds	r2, r7, #4
 8002942:	1d38      	adds	r0, r7, #4
 8002944:	7efb      	ldrb	r3, [r7, #27]
 8002946:	9301      	str	r3, [sp, #4]
 8002948:	69fb      	ldr	r3, [r7, #28]
 800294a:	9300      	str	r3, [sp, #0]
 800294c:	2304      	movs	r3, #4
 800294e:	2104      	movs	r1, #4
 8002950:	f7ff fd58 	bl	8002404 <sendAndack>
 8002954:	4603      	mov	r3, r0
 8002956:	2b00      	cmp	r3, #0
 8002958:	d107      	bne.n	800296a <sendThread+0x9e>
			num_try)) {
		console(CONSOLE_ERROR, __func__,
 800295a:	7efb      	ldrb	r3, [r7, #27]
 800295c:	4a5d      	ldr	r2, [pc, #372]	; (8002ad4 <sendThread+0x208>)
 800295e:	495b      	ldr	r1, [pc, #364]	; (8002acc <sendThread+0x200>)
 8002960:	2000      	movs	r0, #0
 8002962:	f7ff fd11 	bl	8002388 <console>
				"A2P Can ID send and ack error for %d number of try\n",
				num_try);
		return 0;
 8002966:	2300      	movs	r3, #0
 8002968:	e0a5      	b.n	8002ab6 <sendThread+0x1ea>
	}
	console(CONSOLE_INFO, __func__,
 800296a:	4a5b      	ldr	r2, [pc, #364]	; (8002ad8 <sendThread+0x20c>)
 800296c:	4957      	ldr	r1, [pc, #348]	; (8002acc <sendThread+0x200>)
 800296e:	2001      	movs	r0, #1
 8002970:	f7ff fd0a 	bl	8002388 <console>
			"A2P CAN id send and id ack receive successful\n");

	if (!sendAndack((uint8_t*) (&len), 2, (uint8_t*) (&len), 2, timeout,
 8002974:	1cba      	adds	r2, r7, #2
 8002976:	1cb8      	adds	r0, r7, #2
 8002978:	7efb      	ldrb	r3, [r7, #27]
 800297a:	9301      	str	r3, [sp, #4]
 800297c:	69fb      	ldr	r3, [r7, #28]
 800297e:	9300      	str	r3, [sp, #0]
 8002980:	2302      	movs	r3, #2
 8002982:	2102      	movs	r1, #2
 8002984:	f7ff fd3e 	bl	8002404 <sendAndack>
 8002988:	4603      	mov	r3, r0
 800298a:	2b00      	cmp	r3, #0
 800298c:	d10b      	bne.n	80029a6 <sendThread+0xda>
			num_try)) {
		console(CONSOLE_ERROR, __func__,
 800298e:	887b      	ldrh	r3, [r7, #2]
 8002990:	461a      	mov	r2, r3
 8002992:	887b      	ldrh	r3, [r7, #2]
 8002994:	9300      	str	r3, [sp, #0]
 8002996:	4613      	mov	r3, r2
 8002998:	4a50      	ldr	r2, [pc, #320]	; (8002adc <sendThread+0x210>)
 800299a:	494c      	ldr	r1, [pc, #304]	; (8002acc <sendThread+0x200>)
 800299c:	2000      	movs	r0, #0
 800299e:	f7ff fcf3 	bl	8002388 <console>
				"A2P Length of data %d send and ack %d receive error\n", len,
				len);
		return 0;
 80029a2:	2300      	movs	r3, #0
 80029a4:	e087      	b.n	8002ab6 <sendThread+0x1ea>
	}
	console(CONSOLE_INFO, __func__,
 80029a6:	887b      	ldrh	r3, [r7, #2]
 80029a8:	461a      	mov	r2, r3
			"A2P Length of data %d send and ack %c receive success\n", len,
			(char) send_sync_ack[0]);
 80029aa:	4b46      	ldr	r3, [pc, #280]	; (8002ac4 <sendThread+0x1f8>)
 80029ac:	781b      	ldrb	r3, [r3, #0]
	console(CONSOLE_INFO, __func__,
 80029ae:	9300      	str	r3, [sp, #0]
 80029b0:	4613      	mov	r3, r2
 80029b2:	4a4b      	ldr	r2, [pc, #300]	; (8002ae0 <sendThread+0x214>)
 80029b4:	4945      	ldr	r1, [pc, #276]	; (8002acc <sendThread+0x200>)
 80029b6:	2001      	movs	r0, #1
 80029b8:	f7ff fce6 	bl	8002388 <console>

	uint32_t new_len = len;
 80029bc:	887b      	ldrh	r3, [r7, #2]
 80029be:	627b      	str	r3, [r7, #36]	; 0x24
	int loop_limit = new_len % 4;
 80029c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c2:	f003 0303 	and.w	r3, r3, #3
 80029c6:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < (4 - loop_limit) && loop_limit > 0; i++)
 80029c8:	2300      	movs	r3, #0
 80029ca:	623b      	str	r3, [r7, #32]
 80029cc:	e008      	b.n	80029e0 <sendThread+0x114>
		send_data[new_len++] = 0x00;
 80029ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d0:	1c5a      	adds	r2, r3, #1
 80029d2:	627a      	str	r2, [r7, #36]	; 0x24
 80029d4:	4a43      	ldr	r2, [pc, #268]	; (8002ae4 <sendThread+0x218>)
 80029d6:	2100      	movs	r1, #0
 80029d8:	54d1      	strb	r1, [r2, r3]
	for (int i = 0; i < (4 - loop_limit) && loop_limit > 0; i++)
 80029da:	6a3b      	ldr	r3, [r7, #32]
 80029dc:	3301      	adds	r3, #1
 80029de:	623b      	str	r3, [r7, #32]
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	f1c3 0304 	rsb	r3, r3, #4
 80029e6:	6a3a      	ldr	r2, [r7, #32]
 80029e8:	429a      	cmp	r2, r3
 80029ea:	da02      	bge.n	80029f2 <sendThread+0x126>
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	dced      	bgt.n	80029ce <sendThread+0x102>
	uint32_t crc = HAL_CRC_Calculate(hcrc_adapter, (uint32_t*) send_data,
 80029f2:	4b3d      	ldr	r3, [pc, #244]	; (8002ae8 <sendThread+0x21c>)
 80029f4:	6818      	ldr	r0, [r3, #0]
 80029f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f8:	089b      	lsrs	r3, r3, #2
 80029fa:	461a      	mov	r2, r3
 80029fc:	4939      	ldr	r1, [pc, #228]	; (8002ae4 <sendThread+0x218>)
 80029fe:	f7fe f814 	bl	8000a2a <HAL_CRC_Calculate>
 8002a02:	4603      	mov	r3, r0
 8002a04:	60fb      	str	r3, [r7, #12]
			new_len / 4);
	uint8_t check = sendAndack(send_data, len, (uint8_t*) (&crc), 4, timeout,
 8002a06:	8879      	ldrh	r1, [r7, #2]
 8002a08:	f107 020c 	add.w	r2, r7, #12
 8002a0c:	7efb      	ldrb	r3, [r7, #27]
 8002a0e:	9301      	str	r3, [sp, #4]
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	9300      	str	r3, [sp, #0]
 8002a14:	2304      	movs	r3, #4
 8002a16:	4833      	ldr	r0, [pc, #204]	; (8002ae4 <sendThread+0x218>)
 8002a18:	f7ff fcf4 	bl	8002404 <sendAndack>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	74fb      	strb	r3, [r7, #19]
			num_try);

	send_sync_bytes[0] = check ? '\0' : -1;
 8002a20:	7cfb      	ldrb	r3, [r7, #19]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d001      	beq.n	8002a2a <sendThread+0x15e>
 8002a26:	2200      	movs	r2, #0
 8002a28:	e000      	b.n	8002a2c <sendThread+0x160>
 8002a2a:	22ff      	movs	r2, #255	; 0xff
 8002a2c:	4b24      	ldr	r3, [pc, #144]	; (8002ac0 <sendThread+0x1f4>)
 8002a2e:	701a      	strb	r2, [r3, #0]
	if (send_sync_bytes[0] == '\0') {
 8002a30:	4b23      	ldr	r3, [pc, #140]	; (8002ac0 <sendThread+0x1f4>)
 8002a32:	781b      	ldrb	r3, [r3, #0]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d10a      	bne.n	8002a4e <sendThread+0x182>
		console(CONSOLE_INFO, __func__,
 8002a38:	887b      	ldrh	r3, [r7, #2]
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	9300      	str	r3, [sp, #0]
 8002a40:	4613      	mov	r3, r2
 8002a42:	4a2a      	ldr	r2, [pc, #168]	; (8002aec <sendThread+0x220>)
 8002a44:	4921      	ldr	r1, [pc, #132]	; (8002acc <sendThread+0x200>)
 8002a46:	2001      	movs	r0, #1
 8002a48:	f7ff fc9e 	bl	8002388 <console>
 8002a4c:	e009      	b.n	8002a62 <sendThread+0x196>
				"A2P Length of data %d send and ack 0x%0x receive success\n",
				len, crc);
	} else {
		console(CONSOLE_ERROR, __func__,
 8002a4e:	887b      	ldrh	r3, [r7, #2]
 8002a50:	461a      	mov	r2, r3
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	9300      	str	r3, [sp, #0]
 8002a56:	4613      	mov	r3, r2
 8002a58:	4a25      	ldr	r2, [pc, #148]	; (8002af0 <sendThread+0x224>)
 8002a5a:	491c      	ldr	r1, [pc, #112]	; (8002acc <sendThread+0x200>)
 8002a5c:	2000      	movs	r0, #0
 8002a5e:	f7ff fc93 	bl	8002388 <console>
				"A2P Length of data %d send and ack 0x%0x receive error\n", len,
				crc);
	}

	if (!sendAndack(send_sync_bytes, 1, send_sync_ack, 1, timeout, num_try)) {
 8002a62:	7efb      	ldrb	r3, [r7, #27]
 8002a64:	9301      	str	r3, [sp, #4]
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	9300      	str	r3, [sp, #0]
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	4a15      	ldr	r2, [pc, #84]	; (8002ac4 <sendThread+0x1f8>)
 8002a6e:	2101      	movs	r1, #1
 8002a70:	4813      	ldr	r0, [pc, #76]	; (8002ac0 <sendThread+0x1f4>)
 8002a72:	f7ff fcc7 	bl	8002404 <sendAndack>
 8002a76:	4603      	mov	r3, r0
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d10d      	bne.n	8002a98 <sendThread+0x1cc>
		console(CONSOLE_ERROR, __func__,
				"A2P Data end byte %c sending and ack %c receiving error\n",
				(char) send_sync_bytes[0], (char) send_sync_ack[0]);
 8002a7c:	4b10      	ldr	r3, [pc, #64]	; (8002ac0 <sendThread+0x1f4>)
 8002a7e:	781b      	ldrb	r3, [r3, #0]
		console(CONSOLE_ERROR, __func__,
 8002a80:	461a      	mov	r2, r3
				(char) send_sync_bytes[0], (char) send_sync_ack[0]);
 8002a82:	4b10      	ldr	r3, [pc, #64]	; (8002ac4 <sendThread+0x1f8>)
 8002a84:	781b      	ldrb	r3, [r3, #0]
		console(CONSOLE_ERROR, __func__,
 8002a86:	9300      	str	r3, [sp, #0]
 8002a88:	4613      	mov	r3, r2
 8002a8a:	4a1a      	ldr	r2, [pc, #104]	; (8002af4 <sendThread+0x228>)
 8002a8c:	490f      	ldr	r1, [pc, #60]	; (8002acc <sendThread+0x200>)
 8002a8e:	2000      	movs	r0, #0
 8002a90:	f7ff fc7a 	bl	8002388 <console>
		return 0;
 8002a94:	2300      	movs	r3, #0
 8002a96:	e00e      	b.n	8002ab6 <sendThread+0x1ea>
	}
	console(CONSOLE_INFO, __func__,
			"A2P Data end byte %c sent and ack %c received \n",
			(char) send_sync_bytes[0], (char) send_sync_ack[0]);
 8002a98:	4b09      	ldr	r3, [pc, #36]	; (8002ac0 <sendThread+0x1f4>)
 8002a9a:	781b      	ldrb	r3, [r3, #0]
	console(CONSOLE_INFO, __func__,
 8002a9c:	461a      	mov	r2, r3
			(char) send_sync_bytes[0], (char) send_sync_ack[0]);
 8002a9e:	4b09      	ldr	r3, [pc, #36]	; (8002ac4 <sendThread+0x1f8>)
 8002aa0:	781b      	ldrb	r3, [r3, #0]
	console(CONSOLE_INFO, __func__,
 8002aa2:	9300      	str	r3, [sp, #0]
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	4a14      	ldr	r2, [pc, #80]	; (8002af8 <sendThread+0x22c>)
 8002aa8:	4908      	ldr	r1, [pc, #32]	; (8002acc <sendThread+0x200>)
 8002aaa:	2001      	movs	r0, #1
 8002aac:	f7ff fc6c 	bl	8002388 <console>


	startReceiving();
 8002ab0:	f7ff fd0a 	bl	80024c8 <startReceiving>
	return check;
 8002ab4:	7cfb      	ldrb	r3, [r7, #19]
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3728      	adds	r7, #40	; 0x28
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	20000a08 	.word	0x20000a08
 8002ac4:	20000a0c 	.word	0x20000a0c
 8002ac8:	08004260 	.word	0x08004260
 8002acc:	08004570 	.word	0x08004570
 8002ad0:	08004294 	.word	0x08004294
 8002ad4:	080042bc 	.word	0x080042bc
 8002ad8:	080042f0 	.word	0x080042f0
 8002adc:	08004320 	.word	0x08004320
 8002ae0:	08004358 	.word	0x08004358
 8002ae4:	200009a4 	.word	0x200009a4
 8002ae8:	20000180 	.word	0x20000180
 8002aec:	08004390 	.word	0x08004390
 8002af0:	080043cc 	.word	0x080043cc
 8002af4:	08004404 	.word	0x08004404
 8002af8:	08004440 	.word	0x08004440

08002afc <init>:
 * @param huart	: UART handler
 * @param hcrc	: CRC handler
 * @param huart	: receive callback function
 */
static void init(UART_HandleTypeDef *huart, CRC_HandleTypeDef *hcrc,
		void (*receiveCallbackFunc)(uint32_t, uint8_t*, uint16_t)) {
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b084      	sub	sp, #16
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	60f8      	str	r0, [r7, #12]
 8002b04:	60b9      	str	r1, [r7, #8]
 8002b06:	607a      	str	r2, [r7, #4]
	huart_adapter = huart;
 8002b08:	4a07      	ldr	r2, [pc, #28]	; (8002b28 <init+0x2c>)
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	6013      	str	r3, [r2, #0]
	hcrc_adapter = hcrc;
 8002b0e:	4a07      	ldr	r2, [pc, #28]	; (8002b2c <init+0x30>)
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	6013      	str	r3, [r2, #0]
	receiveCallback = receiveCallbackFunc;
 8002b14:	4a06      	ldr	r2, [pc, #24]	; (8002b30 <init+0x34>)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6013      	str	r3, [r2, #0]

	startReceiving();
 8002b1a:	f7ff fcd5 	bl	80024c8 <startReceiving>
//	startSending();
}
 8002b1e:	bf00      	nop
 8002b20:	3710      	adds	r7, #16
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	2000017c 	.word	0x2000017c
 8002b2c:	20000180 	.word	0x20000180
 8002b30:	20000184 	.word	0x20000184

08002b34 <transmit>:
 * This transmits data to PC
 * @param id	: CAN ID
 * @param bytes	: bytes to be send
 * @param len	: Length of data to be sent
 */
static int transmit(uint32_t id, uint8_t *bytes, uint16_t len) {
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b086      	sub	sp, #24
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	60f8      	str	r0, [r7, #12]
 8002b3c:	60b9      	str	r1, [r7, #8]
 8002b3e:	4613      	mov	r3, r2
 8002b40:	80fb      	strh	r3, [r7, #6]
	for (int i = 0; i < len; i++)
 8002b42:	2300      	movs	r3, #0
 8002b44:	617b      	str	r3, [r7, #20]
 8002b46:	e00b      	b.n	8002b60 <transmit+0x2c>
		send_data[i] = bytes[i];
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	68ba      	ldr	r2, [r7, #8]
 8002b4c:	4413      	add	r3, r2
 8002b4e:	7819      	ldrb	r1, [r3, #0]
 8002b50:	4a19      	ldr	r2, [pc, #100]	; (8002bb8 <transmit+0x84>)
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	4413      	add	r3, r2
 8002b56:	460a      	mov	r2, r1
 8002b58:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < len; i++)
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	3301      	adds	r3, #1
 8002b5e:	617b      	str	r3, [r7, #20]
 8002b60:	88fb      	ldrh	r3, [r7, #6]
 8002b62:	697a      	ldr	r2, [r7, #20]
 8002b64:	429a      	cmp	r2, r3
 8002b66:	dbef      	blt.n	8002b48 <transmit+0x14>


	for(int i=0;i<TRANSMIT_TRY;i++){
 8002b68:	2300      	movs	r3, #0
 8002b6a:	613b      	str	r3, [r7, #16]
 8002b6c:	e016      	b.n	8002b9c <transmit+0x68>
		if(sendThread(id, len)){
 8002b6e:	88fb      	ldrh	r3, [r7, #6]
 8002b70:	4619      	mov	r1, r3
 8002b72:	68f8      	ldr	r0, [r7, #12]
 8002b74:	f7ff feaa 	bl	80028cc <sendThread>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d006      	beq.n	8002b8c <transmit+0x58>
			console(CONSOLE_INFO, __func__, "DATA transmit success\n");
 8002b7e:	4a0f      	ldr	r2, [pc, #60]	; (8002bbc <transmit+0x88>)
 8002b80:	490f      	ldr	r1, [pc, #60]	; (8002bc0 <transmit+0x8c>)
 8002b82:	2001      	movs	r0, #1
 8002b84:	f7ff fc00 	bl	8002388 <console>
			return 1;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e011      	b.n	8002bb0 <transmit+0x7c>
		}
		console(CONSOLE_WARNING, __func__, "DATA transmit failed and retrying...\n");
 8002b8c:	4a0d      	ldr	r2, [pc, #52]	; (8002bc4 <transmit+0x90>)
 8002b8e:	490c      	ldr	r1, [pc, #48]	; (8002bc0 <transmit+0x8c>)
 8002b90:	2002      	movs	r0, #2
 8002b92:	f7ff fbf9 	bl	8002388 <console>
	for(int i=0;i<TRANSMIT_TRY;i++){
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	3301      	adds	r3, #1
 8002b9a:	613b      	str	r3, [r7, #16]
 8002b9c:	2203      	movs	r2, #3
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	dbe4      	blt.n	8002b6e <transmit+0x3a>
	}
	console(CONSOLE_ERROR, __func__, "DATA transmit failed\n");
 8002ba4:	4a08      	ldr	r2, [pc, #32]	; (8002bc8 <transmit+0x94>)
 8002ba6:	4906      	ldr	r1, [pc, #24]	; (8002bc0 <transmit+0x8c>)
 8002ba8:	2000      	movs	r0, #0
 8002baa:	f7ff fbed 	bl	8002388 <console>
	return 0;
 8002bae:	2300      	movs	r3, #0
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	3718      	adds	r7, #24
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}
 8002bb8:	200009a4 	.word	0x200009a4
 8002bbc:	08004470 	.word	0x08004470
 8002bc0:	0800457c 	.word	0x0800457c
 8002bc4:	08004488 	.word	0x08004488
 8002bc8:	080044b0 	.word	0x080044b0

08002bcc <receiveRxCpltCallback>:

/**
 * This method should be called in DMA callback
 */
static void receiveRxCpltCallback() {
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	af00      	add	r7, sp, #0
	if (status == RECEIVING)
 8002bd0:	4b05      	ldr	r3, [pc, #20]	; (8002be8 <receiveRxCpltCallback+0x1c>)
 8002bd2:	781b      	ldrb	r3, [r3, #0]
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d102      	bne.n	8002bde <receiveRxCpltCallback+0x12>
		receiveThread();
 8002bd8:	f7ff fc98 	bl	800250c <receiveThread>
	else
		startReceiving();
}
 8002bdc:	e001      	b.n	8002be2 <receiveRxCpltCallback+0x16>
		startReceiving();
 8002bde:	f7ff fc73 	bl	80024c8 <startReceiving>
}
 8002be2:	bf00      	nop
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	20000009 	.word	0x20000009

08002bec <loop>:

/**
 * This is uart loop
 *
 */
static void loop() {
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b082      	sub	sp, #8
 8002bf0:	af00      	add	r7, sp, #0
	uint8_t is_timeout = (HAL_GetTick() - time_elapse) > RECEIVE_TIMEOUT;
 8002bf2:	f7fd fde7 	bl	80007c4 <HAL_GetTick>
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	4b18      	ldr	r3, [pc, #96]	; (8002c5c <loop+0x70>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002c02:	4293      	cmp	r3, r2
 8002c04:	bf8c      	ite	hi
 8002c06:	2301      	movhi	r3, #1
 8002c08:	2300      	movls	r3, #0
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	71fb      	strb	r3, [r7, #7]
	if (is_timeout && !is_in_receiveThread && rec_track != START) {
 8002c0e:	79fb      	ldrb	r3, [r7, #7]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d010      	beq.n	8002c36 <loop+0x4a>
 8002c14:	4b12      	ldr	r3, [pc, #72]	; (8002c60 <loop+0x74>)
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d10c      	bne.n	8002c36 <loop+0x4a>
 8002c1c:	4b11      	ldr	r3, [pc, #68]	; (8002c64 <loop+0x78>)
 8002c1e:	781b      	ldrb	r3, [r3, #0]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d008      	beq.n	8002c36 <loop+0x4a>
		console(CONSOLE_ERROR, __func__, "receiveThread timeout %d ms\n",
 8002c24:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c28:	4a0f      	ldr	r2, [pc, #60]	; (8002c68 <loop+0x7c>)
 8002c2a:	4910      	ldr	r1, [pc, #64]	; (8002c6c <loop+0x80>)
 8002c2c:	2000      	movs	r0, #0
 8002c2e:	f7ff fbab 	bl	8002388 <console>
				RECEIVE_TIMEOUT);
		startReceiving();
 8002c32:	f7ff fc49 	bl	80024c8 <startReceiving>
	}

	if (received) {
 8002c36:	4b0e      	ldr	r3, [pc, #56]	; (8002c70 <loop+0x84>)
 8002c38:	781b      	ldrb	r3, [r3, #0]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d00a      	beq.n	8002c54 <loop+0x68>
		receiveCallback(received_id, rec_data, received_len);
 8002c3e:	4b0d      	ldr	r3, [pc, #52]	; (8002c74 <loop+0x88>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a0d      	ldr	r2, [pc, #52]	; (8002c78 <loop+0x8c>)
 8002c44:	6810      	ldr	r0, [r2, #0]
 8002c46:	4a0d      	ldr	r2, [pc, #52]	; (8002c7c <loop+0x90>)
 8002c48:	8812      	ldrh	r2, [r2, #0]
 8002c4a:	490d      	ldr	r1, [pc, #52]	; (8002c80 <loop+0x94>)
 8002c4c:	4798      	blx	r3
		received = 0;
 8002c4e:	4b08      	ldr	r3, [pc, #32]	; (8002c70 <loop+0x84>)
 8002c50:	2200      	movs	r2, #0
 8002c52:	701a      	strb	r2, [r3, #0]
	}
}
 8002c54:	bf00      	nop
 8002c56:	3708      	adds	r7, #8
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}
 8002c5c:	20000994 	.word	0x20000994
 8002c60:	200009a2 	.word	0x200009a2
 8002c64:	20000992 	.word	0x20000992
 8002c68:	080044c8 	.word	0x080044c8
 8002c6c:	08004588 	.word	0x08004588
 8002c70:	20000998 	.word	0x20000998
 8002c74:	20000184 	.word	0x20000184
 8002c78:	2000099c 	.word	0x2000099c
 8002c7c:	200009a0 	.word	0x200009a0
 8002c80:	20000188 	.word	0x20000188

08002c84 <HAL_UART_RxCpltCallback>:
#include "main.h"

extern UART_HandleTypeDef huart1;
extern CRC_HandleTypeDef hcrc;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b082      	sub	sp, #8
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
	StaticSerialProtocol.receiveRxCpltCallback();
 8002c8c:	4b03      	ldr	r3, [pc, #12]	; (8002c9c <HAL_UART_RxCpltCallback+0x18>)
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	4798      	blx	r3
}
 8002c92:	bf00      	nop
 8002c94:	3708      	adds	r7, #8
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	2000000c 	.word	0x2000000c

08002ca0 <receiveCallback>:

static volatile uint8_t data_received = 0;
static void receiveCallback(uint32_t id, uint8_t *data, uint16_t size) {
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b086      	sub	sp, #24
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	60f8      	str	r0, [r7, #12]
 8002ca8:	60b9      	str	r1, [r7, #8]
 8002caa:	4613      	mov	r3, r2
 8002cac:	80fb      	strh	r3, [r7, #6]
	printf("0x%0x : ", id);
 8002cae:	68f9      	ldr	r1, [r7, #12]
 8002cb0:	480e      	ldr	r0, [pc, #56]	; (8002cec <receiveCallback+0x4c>)
 8002cb2:	f000 f889 	bl	8002dc8 <iprintf>
	for (int i = 0; i < size; i++)
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	617b      	str	r3, [r7, #20]
 8002cba:	e009      	b.n	8002cd0 <receiveCallback+0x30>
		printf("%c", (char) data[i]);
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	68ba      	ldr	r2, [r7, #8]
 8002cc0:	4413      	add	r3, r2
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f000 f897 	bl	8002df8 <putchar>
	for (int i = 0; i < size; i++)
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	3301      	adds	r3, #1
 8002cce:	617b      	str	r3, [r7, #20]
 8002cd0:	88fb      	ldrh	r3, [r7, #6]
 8002cd2:	697a      	ldr	r2, [r7, #20]
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	dbf1      	blt.n	8002cbc <receiveCallback+0x1c>
	printf("\n");
 8002cd8:	200a      	movs	r0, #10
 8002cda:	f000 f88d 	bl	8002df8 <putchar>
	data_received = 1;
 8002cde:	4b04      	ldr	r3, [pc, #16]	; (8002cf0 <receiveCallback+0x50>)
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	701a      	strb	r2, [r3, #0]
}
 8002ce4:	bf00      	nop
 8002ce6:	3718      	adds	r7, #24
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	080044e8 	.word	0x080044e8
 8002cf0:	20000a18 	.word	0x20000a18

08002cf4 <run>:

static void run() {
 8002cf4:	b5b0      	push	{r4, r5, r7, lr}
 8002cf6:	b08a      	sub	sp, #40	; 0x28
 8002cf8:	af00      	add	r7, sp, #0
	StaticSerialProtocol.init(&huart1, &hcrc, receiveCallback);
 8002cfa:	4b13      	ldr	r3, [pc, #76]	; (8002d48 <run+0x54>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a13      	ldr	r2, [pc, #76]	; (8002d4c <run+0x58>)
 8002d00:	4913      	ldr	r1, [pc, #76]	; (8002d50 <run+0x5c>)
 8002d02:	4814      	ldr	r0, [pc, #80]	; (8002d54 <run+0x60>)
 8002d04:	4798      	blx	r3

	printf("This is INIT\n");
 8002d06:	4814      	ldr	r0, [pc, #80]	; (8002d58 <run+0x64>)
 8002d08:	f000 f8f8 	bl	8002efc <puts>
	char bytes[] = "Hello this is Niruja Speaking, Peter!!!";
 8002d0c:	4b13      	ldr	r3, [pc, #76]	; (8002d5c <run+0x68>)
 8002d0e:	463c      	mov	r4, r7
 8002d10:	461d      	mov	r5, r3
 8002d12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d16:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d1a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002d1e:	e884 0003 	stmia.w	r4, {r0, r1}
	while (1) {
		if (data_received) {
 8002d22:	4b0f      	ldr	r3, [pc, #60]	; (8002d60 <run+0x6c>)
 8002d24:	781b      	ldrb	r3, [r3, #0]
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d008      	beq.n	8002d3e <run+0x4a>
			data_received = 0;
 8002d2c:	4b0c      	ldr	r3, [pc, #48]	; (8002d60 <run+0x6c>)
 8002d2e:	2200      	movs	r2, #0
 8002d30:	701a      	strb	r2, [r3, #0]
			StaticSerialProtocol.transmit(0x11, (uint8_t*) bytes,
 8002d32:	4b05      	ldr	r3, [pc, #20]	; (8002d48 <run+0x54>)
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	4639      	mov	r1, r7
 8002d38:	2228      	movs	r2, #40	; 0x28
 8002d3a:	2011      	movs	r0, #17
 8002d3c:	4798      	blx	r3
					sizeof(bytes));
		}

		StaticSerialProtocol.loop();
 8002d3e:	4b02      	ldr	r3, [pc, #8]	; (8002d48 <run+0x54>)
 8002d40:	68db      	ldr	r3, [r3, #12]
 8002d42:	4798      	blx	r3
		if (data_received) {
 8002d44:	e7ed      	b.n	8002d22 <run+0x2e>
 8002d46:	bf00      	nop
 8002d48:	2000000c 	.word	0x2000000c
 8002d4c:	08002ca1 	.word	0x08002ca1
 8002d50:	200000a0 	.word	0x200000a0
 8002d54:	200000a8 	.word	0x200000a8
 8002d58:	080044f4 	.word	0x080044f4
 8002d5c:	08004504 	.word	0x08004504
 8002d60:	20000a18 	.word	0x20000a18

08002d64 <__errno>:
 8002d64:	4b01      	ldr	r3, [pc, #4]	; (8002d6c <__errno+0x8>)
 8002d66:	6818      	ldr	r0, [r3, #0]
 8002d68:	4770      	bx	lr
 8002d6a:	bf00      	nop
 8002d6c:	20000020 	.word	0x20000020

08002d70 <__libc_init_array>:
 8002d70:	b570      	push	{r4, r5, r6, lr}
 8002d72:	2600      	movs	r6, #0
 8002d74:	4d0c      	ldr	r5, [pc, #48]	; (8002da8 <__libc_init_array+0x38>)
 8002d76:	4c0d      	ldr	r4, [pc, #52]	; (8002dac <__libc_init_array+0x3c>)
 8002d78:	1b64      	subs	r4, r4, r5
 8002d7a:	10a4      	asrs	r4, r4, #2
 8002d7c:	42a6      	cmp	r6, r4
 8002d7e:	d109      	bne.n	8002d94 <__libc_init_array+0x24>
 8002d80:	f001 f89e 	bl	8003ec0 <_init>
 8002d84:	2600      	movs	r6, #0
 8002d86:	4d0a      	ldr	r5, [pc, #40]	; (8002db0 <__libc_init_array+0x40>)
 8002d88:	4c0a      	ldr	r4, [pc, #40]	; (8002db4 <__libc_init_array+0x44>)
 8002d8a:	1b64      	subs	r4, r4, r5
 8002d8c:	10a4      	asrs	r4, r4, #2
 8002d8e:	42a6      	cmp	r6, r4
 8002d90:	d105      	bne.n	8002d9e <__libc_init_array+0x2e>
 8002d92:	bd70      	pop	{r4, r5, r6, pc}
 8002d94:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d98:	4798      	blx	r3
 8002d9a:	3601      	adds	r6, #1
 8002d9c:	e7ee      	b.n	8002d7c <__libc_init_array+0xc>
 8002d9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002da2:	4798      	blx	r3
 8002da4:	3601      	adds	r6, #1
 8002da6:	e7f2      	b.n	8002d8e <__libc_init_array+0x1e>
 8002da8:	08004628 	.word	0x08004628
 8002dac:	08004628 	.word	0x08004628
 8002db0:	08004628 	.word	0x08004628
 8002db4:	0800462c 	.word	0x0800462c

08002db8 <memset>:
 8002db8:	4603      	mov	r3, r0
 8002dba:	4402      	add	r2, r0
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d100      	bne.n	8002dc2 <memset+0xa>
 8002dc0:	4770      	bx	lr
 8002dc2:	f803 1b01 	strb.w	r1, [r3], #1
 8002dc6:	e7f9      	b.n	8002dbc <memset+0x4>

08002dc8 <iprintf>:
 8002dc8:	b40f      	push	{r0, r1, r2, r3}
 8002dca:	4b0a      	ldr	r3, [pc, #40]	; (8002df4 <iprintf+0x2c>)
 8002dcc:	b513      	push	{r0, r1, r4, lr}
 8002dce:	681c      	ldr	r4, [r3, #0]
 8002dd0:	b124      	cbz	r4, 8002ddc <iprintf+0x14>
 8002dd2:	69a3      	ldr	r3, [r4, #24]
 8002dd4:	b913      	cbnz	r3, 8002ddc <iprintf+0x14>
 8002dd6:	4620      	mov	r0, r4
 8002dd8:	f000 fa84 	bl	80032e4 <__sinit>
 8002ddc:	ab05      	add	r3, sp, #20
 8002dde:	4620      	mov	r0, r4
 8002de0:	9a04      	ldr	r2, [sp, #16]
 8002de2:	68a1      	ldr	r1, [r4, #8]
 8002de4:	9301      	str	r3, [sp, #4]
 8002de6:	f000 fc87 	bl	80036f8 <_vfiprintf_r>
 8002dea:	b002      	add	sp, #8
 8002dec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002df0:	b004      	add	sp, #16
 8002df2:	4770      	bx	lr
 8002df4:	20000020 	.word	0x20000020

08002df8 <putchar>:
 8002df8:	b538      	push	{r3, r4, r5, lr}
 8002dfa:	4b08      	ldr	r3, [pc, #32]	; (8002e1c <putchar+0x24>)
 8002dfc:	4605      	mov	r5, r0
 8002dfe:	681c      	ldr	r4, [r3, #0]
 8002e00:	b124      	cbz	r4, 8002e0c <putchar+0x14>
 8002e02:	69a3      	ldr	r3, [r4, #24]
 8002e04:	b913      	cbnz	r3, 8002e0c <putchar+0x14>
 8002e06:	4620      	mov	r0, r4
 8002e08:	f000 fa6c 	bl	80032e4 <__sinit>
 8002e0c:	4629      	mov	r1, r5
 8002e0e:	4620      	mov	r0, r4
 8002e10:	68a2      	ldr	r2, [r4, #8]
 8002e12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002e16:	f000 bf35 	b.w	8003c84 <_putc_r>
 8002e1a:	bf00      	nop
 8002e1c:	20000020 	.word	0x20000020

08002e20 <_puts_r>:
 8002e20:	b570      	push	{r4, r5, r6, lr}
 8002e22:	460e      	mov	r6, r1
 8002e24:	4605      	mov	r5, r0
 8002e26:	b118      	cbz	r0, 8002e30 <_puts_r+0x10>
 8002e28:	6983      	ldr	r3, [r0, #24]
 8002e2a:	b90b      	cbnz	r3, 8002e30 <_puts_r+0x10>
 8002e2c:	f000 fa5a 	bl	80032e4 <__sinit>
 8002e30:	69ab      	ldr	r3, [r5, #24]
 8002e32:	68ac      	ldr	r4, [r5, #8]
 8002e34:	b913      	cbnz	r3, 8002e3c <_puts_r+0x1c>
 8002e36:	4628      	mov	r0, r5
 8002e38:	f000 fa54 	bl	80032e4 <__sinit>
 8002e3c:	4b2c      	ldr	r3, [pc, #176]	; (8002ef0 <_puts_r+0xd0>)
 8002e3e:	429c      	cmp	r4, r3
 8002e40:	d120      	bne.n	8002e84 <_puts_r+0x64>
 8002e42:	686c      	ldr	r4, [r5, #4]
 8002e44:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002e46:	07db      	lsls	r3, r3, #31
 8002e48:	d405      	bmi.n	8002e56 <_puts_r+0x36>
 8002e4a:	89a3      	ldrh	r3, [r4, #12]
 8002e4c:	0598      	lsls	r0, r3, #22
 8002e4e:	d402      	bmi.n	8002e56 <_puts_r+0x36>
 8002e50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002e52:	f000 fae5 	bl	8003420 <__retarget_lock_acquire_recursive>
 8002e56:	89a3      	ldrh	r3, [r4, #12]
 8002e58:	0719      	lsls	r1, r3, #28
 8002e5a:	d51d      	bpl.n	8002e98 <_puts_r+0x78>
 8002e5c:	6923      	ldr	r3, [r4, #16]
 8002e5e:	b1db      	cbz	r3, 8002e98 <_puts_r+0x78>
 8002e60:	3e01      	subs	r6, #1
 8002e62:	68a3      	ldr	r3, [r4, #8]
 8002e64:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002e68:	3b01      	subs	r3, #1
 8002e6a:	60a3      	str	r3, [r4, #8]
 8002e6c:	bb39      	cbnz	r1, 8002ebe <_puts_r+0x9e>
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	da38      	bge.n	8002ee4 <_puts_r+0xc4>
 8002e72:	4622      	mov	r2, r4
 8002e74:	210a      	movs	r1, #10
 8002e76:	4628      	mov	r0, r5
 8002e78:	f000 f85e 	bl	8002f38 <__swbuf_r>
 8002e7c:	3001      	adds	r0, #1
 8002e7e:	d011      	beq.n	8002ea4 <_puts_r+0x84>
 8002e80:	250a      	movs	r5, #10
 8002e82:	e011      	b.n	8002ea8 <_puts_r+0x88>
 8002e84:	4b1b      	ldr	r3, [pc, #108]	; (8002ef4 <_puts_r+0xd4>)
 8002e86:	429c      	cmp	r4, r3
 8002e88:	d101      	bne.n	8002e8e <_puts_r+0x6e>
 8002e8a:	68ac      	ldr	r4, [r5, #8]
 8002e8c:	e7da      	b.n	8002e44 <_puts_r+0x24>
 8002e8e:	4b1a      	ldr	r3, [pc, #104]	; (8002ef8 <_puts_r+0xd8>)
 8002e90:	429c      	cmp	r4, r3
 8002e92:	bf08      	it	eq
 8002e94:	68ec      	ldreq	r4, [r5, #12]
 8002e96:	e7d5      	b.n	8002e44 <_puts_r+0x24>
 8002e98:	4621      	mov	r1, r4
 8002e9a:	4628      	mov	r0, r5
 8002e9c:	f000 f89e 	bl	8002fdc <__swsetup_r>
 8002ea0:	2800      	cmp	r0, #0
 8002ea2:	d0dd      	beq.n	8002e60 <_puts_r+0x40>
 8002ea4:	f04f 35ff 	mov.w	r5, #4294967295
 8002ea8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002eaa:	07da      	lsls	r2, r3, #31
 8002eac:	d405      	bmi.n	8002eba <_puts_r+0x9a>
 8002eae:	89a3      	ldrh	r3, [r4, #12]
 8002eb0:	059b      	lsls	r3, r3, #22
 8002eb2:	d402      	bmi.n	8002eba <_puts_r+0x9a>
 8002eb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002eb6:	f000 fab4 	bl	8003422 <__retarget_lock_release_recursive>
 8002eba:	4628      	mov	r0, r5
 8002ebc:	bd70      	pop	{r4, r5, r6, pc}
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	da04      	bge.n	8002ecc <_puts_r+0xac>
 8002ec2:	69a2      	ldr	r2, [r4, #24]
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	dc06      	bgt.n	8002ed6 <_puts_r+0xb6>
 8002ec8:	290a      	cmp	r1, #10
 8002eca:	d004      	beq.n	8002ed6 <_puts_r+0xb6>
 8002ecc:	6823      	ldr	r3, [r4, #0]
 8002ece:	1c5a      	adds	r2, r3, #1
 8002ed0:	6022      	str	r2, [r4, #0]
 8002ed2:	7019      	strb	r1, [r3, #0]
 8002ed4:	e7c5      	b.n	8002e62 <_puts_r+0x42>
 8002ed6:	4622      	mov	r2, r4
 8002ed8:	4628      	mov	r0, r5
 8002eda:	f000 f82d 	bl	8002f38 <__swbuf_r>
 8002ede:	3001      	adds	r0, #1
 8002ee0:	d1bf      	bne.n	8002e62 <_puts_r+0x42>
 8002ee2:	e7df      	b.n	8002ea4 <_puts_r+0x84>
 8002ee4:	250a      	movs	r5, #10
 8002ee6:	6823      	ldr	r3, [r4, #0]
 8002ee8:	1c5a      	adds	r2, r3, #1
 8002eea:	6022      	str	r2, [r4, #0]
 8002eec:	701d      	strb	r5, [r3, #0]
 8002eee:	e7db      	b.n	8002ea8 <_puts_r+0x88>
 8002ef0:	080045b4 	.word	0x080045b4
 8002ef4:	080045d4 	.word	0x080045d4
 8002ef8:	08004594 	.word	0x08004594

08002efc <puts>:
 8002efc:	4b02      	ldr	r3, [pc, #8]	; (8002f08 <puts+0xc>)
 8002efe:	4601      	mov	r1, r0
 8002f00:	6818      	ldr	r0, [r3, #0]
 8002f02:	f7ff bf8d 	b.w	8002e20 <_puts_r>
 8002f06:	bf00      	nop
 8002f08:	20000020 	.word	0x20000020

08002f0c <viprintf>:
 8002f0c:	4b09      	ldr	r3, [pc, #36]	; (8002f34 <viprintf+0x28>)
 8002f0e:	b570      	push	{r4, r5, r6, lr}
 8002f10:	681c      	ldr	r4, [r3, #0]
 8002f12:	4605      	mov	r5, r0
 8002f14:	460e      	mov	r6, r1
 8002f16:	b124      	cbz	r4, 8002f22 <viprintf+0x16>
 8002f18:	69a3      	ldr	r3, [r4, #24]
 8002f1a:	b913      	cbnz	r3, 8002f22 <viprintf+0x16>
 8002f1c:	4620      	mov	r0, r4
 8002f1e:	f000 f9e1 	bl	80032e4 <__sinit>
 8002f22:	4633      	mov	r3, r6
 8002f24:	462a      	mov	r2, r5
 8002f26:	4620      	mov	r0, r4
 8002f28:	68a1      	ldr	r1, [r4, #8]
 8002f2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8002f2e:	f000 bbe3 	b.w	80036f8 <_vfiprintf_r>
 8002f32:	bf00      	nop
 8002f34:	20000020 	.word	0x20000020

08002f38 <__swbuf_r>:
 8002f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f3a:	460e      	mov	r6, r1
 8002f3c:	4614      	mov	r4, r2
 8002f3e:	4605      	mov	r5, r0
 8002f40:	b118      	cbz	r0, 8002f4a <__swbuf_r+0x12>
 8002f42:	6983      	ldr	r3, [r0, #24]
 8002f44:	b90b      	cbnz	r3, 8002f4a <__swbuf_r+0x12>
 8002f46:	f000 f9cd 	bl	80032e4 <__sinit>
 8002f4a:	4b21      	ldr	r3, [pc, #132]	; (8002fd0 <__swbuf_r+0x98>)
 8002f4c:	429c      	cmp	r4, r3
 8002f4e:	d12b      	bne.n	8002fa8 <__swbuf_r+0x70>
 8002f50:	686c      	ldr	r4, [r5, #4]
 8002f52:	69a3      	ldr	r3, [r4, #24]
 8002f54:	60a3      	str	r3, [r4, #8]
 8002f56:	89a3      	ldrh	r3, [r4, #12]
 8002f58:	071a      	lsls	r2, r3, #28
 8002f5a:	d52f      	bpl.n	8002fbc <__swbuf_r+0x84>
 8002f5c:	6923      	ldr	r3, [r4, #16]
 8002f5e:	b36b      	cbz	r3, 8002fbc <__swbuf_r+0x84>
 8002f60:	6923      	ldr	r3, [r4, #16]
 8002f62:	6820      	ldr	r0, [r4, #0]
 8002f64:	b2f6      	uxtb	r6, r6
 8002f66:	1ac0      	subs	r0, r0, r3
 8002f68:	6963      	ldr	r3, [r4, #20]
 8002f6a:	4637      	mov	r7, r6
 8002f6c:	4283      	cmp	r3, r0
 8002f6e:	dc04      	bgt.n	8002f7a <__swbuf_r+0x42>
 8002f70:	4621      	mov	r1, r4
 8002f72:	4628      	mov	r0, r5
 8002f74:	f000 f922 	bl	80031bc <_fflush_r>
 8002f78:	bb30      	cbnz	r0, 8002fc8 <__swbuf_r+0x90>
 8002f7a:	68a3      	ldr	r3, [r4, #8]
 8002f7c:	3001      	adds	r0, #1
 8002f7e:	3b01      	subs	r3, #1
 8002f80:	60a3      	str	r3, [r4, #8]
 8002f82:	6823      	ldr	r3, [r4, #0]
 8002f84:	1c5a      	adds	r2, r3, #1
 8002f86:	6022      	str	r2, [r4, #0]
 8002f88:	701e      	strb	r6, [r3, #0]
 8002f8a:	6963      	ldr	r3, [r4, #20]
 8002f8c:	4283      	cmp	r3, r0
 8002f8e:	d004      	beq.n	8002f9a <__swbuf_r+0x62>
 8002f90:	89a3      	ldrh	r3, [r4, #12]
 8002f92:	07db      	lsls	r3, r3, #31
 8002f94:	d506      	bpl.n	8002fa4 <__swbuf_r+0x6c>
 8002f96:	2e0a      	cmp	r6, #10
 8002f98:	d104      	bne.n	8002fa4 <__swbuf_r+0x6c>
 8002f9a:	4621      	mov	r1, r4
 8002f9c:	4628      	mov	r0, r5
 8002f9e:	f000 f90d 	bl	80031bc <_fflush_r>
 8002fa2:	b988      	cbnz	r0, 8002fc8 <__swbuf_r+0x90>
 8002fa4:	4638      	mov	r0, r7
 8002fa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002fa8:	4b0a      	ldr	r3, [pc, #40]	; (8002fd4 <__swbuf_r+0x9c>)
 8002faa:	429c      	cmp	r4, r3
 8002fac:	d101      	bne.n	8002fb2 <__swbuf_r+0x7a>
 8002fae:	68ac      	ldr	r4, [r5, #8]
 8002fb0:	e7cf      	b.n	8002f52 <__swbuf_r+0x1a>
 8002fb2:	4b09      	ldr	r3, [pc, #36]	; (8002fd8 <__swbuf_r+0xa0>)
 8002fb4:	429c      	cmp	r4, r3
 8002fb6:	bf08      	it	eq
 8002fb8:	68ec      	ldreq	r4, [r5, #12]
 8002fba:	e7ca      	b.n	8002f52 <__swbuf_r+0x1a>
 8002fbc:	4621      	mov	r1, r4
 8002fbe:	4628      	mov	r0, r5
 8002fc0:	f000 f80c 	bl	8002fdc <__swsetup_r>
 8002fc4:	2800      	cmp	r0, #0
 8002fc6:	d0cb      	beq.n	8002f60 <__swbuf_r+0x28>
 8002fc8:	f04f 37ff 	mov.w	r7, #4294967295
 8002fcc:	e7ea      	b.n	8002fa4 <__swbuf_r+0x6c>
 8002fce:	bf00      	nop
 8002fd0:	080045b4 	.word	0x080045b4
 8002fd4:	080045d4 	.word	0x080045d4
 8002fd8:	08004594 	.word	0x08004594

08002fdc <__swsetup_r>:
 8002fdc:	4b32      	ldr	r3, [pc, #200]	; (80030a8 <__swsetup_r+0xcc>)
 8002fde:	b570      	push	{r4, r5, r6, lr}
 8002fe0:	681d      	ldr	r5, [r3, #0]
 8002fe2:	4606      	mov	r6, r0
 8002fe4:	460c      	mov	r4, r1
 8002fe6:	b125      	cbz	r5, 8002ff2 <__swsetup_r+0x16>
 8002fe8:	69ab      	ldr	r3, [r5, #24]
 8002fea:	b913      	cbnz	r3, 8002ff2 <__swsetup_r+0x16>
 8002fec:	4628      	mov	r0, r5
 8002fee:	f000 f979 	bl	80032e4 <__sinit>
 8002ff2:	4b2e      	ldr	r3, [pc, #184]	; (80030ac <__swsetup_r+0xd0>)
 8002ff4:	429c      	cmp	r4, r3
 8002ff6:	d10f      	bne.n	8003018 <__swsetup_r+0x3c>
 8002ff8:	686c      	ldr	r4, [r5, #4]
 8002ffa:	89a3      	ldrh	r3, [r4, #12]
 8002ffc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003000:	0719      	lsls	r1, r3, #28
 8003002:	d42c      	bmi.n	800305e <__swsetup_r+0x82>
 8003004:	06dd      	lsls	r5, r3, #27
 8003006:	d411      	bmi.n	800302c <__swsetup_r+0x50>
 8003008:	2309      	movs	r3, #9
 800300a:	6033      	str	r3, [r6, #0]
 800300c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003010:	f04f 30ff 	mov.w	r0, #4294967295
 8003014:	81a3      	strh	r3, [r4, #12]
 8003016:	e03e      	b.n	8003096 <__swsetup_r+0xba>
 8003018:	4b25      	ldr	r3, [pc, #148]	; (80030b0 <__swsetup_r+0xd4>)
 800301a:	429c      	cmp	r4, r3
 800301c:	d101      	bne.n	8003022 <__swsetup_r+0x46>
 800301e:	68ac      	ldr	r4, [r5, #8]
 8003020:	e7eb      	b.n	8002ffa <__swsetup_r+0x1e>
 8003022:	4b24      	ldr	r3, [pc, #144]	; (80030b4 <__swsetup_r+0xd8>)
 8003024:	429c      	cmp	r4, r3
 8003026:	bf08      	it	eq
 8003028:	68ec      	ldreq	r4, [r5, #12]
 800302a:	e7e6      	b.n	8002ffa <__swsetup_r+0x1e>
 800302c:	0758      	lsls	r0, r3, #29
 800302e:	d512      	bpl.n	8003056 <__swsetup_r+0x7a>
 8003030:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003032:	b141      	cbz	r1, 8003046 <__swsetup_r+0x6a>
 8003034:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003038:	4299      	cmp	r1, r3
 800303a:	d002      	beq.n	8003042 <__swsetup_r+0x66>
 800303c:	4630      	mov	r0, r6
 800303e:	f000 fa57 	bl	80034f0 <_free_r>
 8003042:	2300      	movs	r3, #0
 8003044:	6363      	str	r3, [r4, #52]	; 0x34
 8003046:	89a3      	ldrh	r3, [r4, #12]
 8003048:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800304c:	81a3      	strh	r3, [r4, #12]
 800304e:	2300      	movs	r3, #0
 8003050:	6063      	str	r3, [r4, #4]
 8003052:	6923      	ldr	r3, [r4, #16]
 8003054:	6023      	str	r3, [r4, #0]
 8003056:	89a3      	ldrh	r3, [r4, #12]
 8003058:	f043 0308 	orr.w	r3, r3, #8
 800305c:	81a3      	strh	r3, [r4, #12]
 800305e:	6923      	ldr	r3, [r4, #16]
 8003060:	b94b      	cbnz	r3, 8003076 <__swsetup_r+0x9a>
 8003062:	89a3      	ldrh	r3, [r4, #12]
 8003064:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003068:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800306c:	d003      	beq.n	8003076 <__swsetup_r+0x9a>
 800306e:	4621      	mov	r1, r4
 8003070:	4630      	mov	r0, r6
 8003072:	f000 f9fd 	bl	8003470 <__smakebuf_r>
 8003076:	89a0      	ldrh	r0, [r4, #12]
 8003078:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800307c:	f010 0301 	ands.w	r3, r0, #1
 8003080:	d00a      	beq.n	8003098 <__swsetup_r+0xbc>
 8003082:	2300      	movs	r3, #0
 8003084:	60a3      	str	r3, [r4, #8]
 8003086:	6963      	ldr	r3, [r4, #20]
 8003088:	425b      	negs	r3, r3
 800308a:	61a3      	str	r3, [r4, #24]
 800308c:	6923      	ldr	r3, [r4, #16]
 800308e:	b943      	cbnz	r3, 80030a2 <__swsetup_r+0xc6>
 8003090:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003094:	d1ba      	bne.n	800300c <__swsetup_r+0x30>
 8003096:	bd70      	pop	{r4, r5, r6, pc}
 8003098:	0781      	lsls	r1, r0, #30
 800309a:	bf58      	it	pl
 800309c:	6963      	ldrpl	r3, [r4, #20]
 800309e:	60a3      	str	r3, [r4, #8]
 80030a0:	e7f4      	b.n	800308c <__swsetup_r+0xb0>
 80030a2:	2000      	movs	r0, #0
 80030a4:	e7f7      	b.n	8003096 <__swsetup_r+0xba>
 80030a6:	bf00      	nop
 80030a8:	20000020 	.word	0x20000020
 80030ac:	080045b4 	.word	0x080045b4
 80030b0:	080045d4 	.word	0x080045d4
 80030b4:	08004594 	.word	0x08004594

080030b8 <__sflush_r>:
 80030b8:	898a      	ldrh	r2, [r1, #12]
 80030ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030bc:	4605      	mov	r5, r0
 80030be:	0710      	lsls	r0, r2, #28
 80030c0:	460c      	mov	r4, r1
 80030c2:	d457      	bmi.n	8003174 <__sflush_r+0xbc>
 80030c4:	684b      	ldr	r3, [r1, #4]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	dc04      	bgt.n	80030d4 <__sflush_r+0x1c>
 80030ca:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	dc01      	bgt.n	80030d4 <__sflush_r+0x1c>
 80030d0:	2000      	movs	r0, #0
 80030d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80030d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80030d6:	2e00      	cmp	r6, #0
 80030d8:	d0fa      	beq.n	80030d0 <__sflush_r+0x18>
 80030da:	2300      	movs	r3, #0
 80030dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80030e0:	682f      	ldr	r7, [r5, #0]
 80030e2:	602b      	str	r3, [r5, #0]
 80030e4:	d032      	beq.n	800314c <__sflush_r+0x94>
 80030e6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80030e8:	89a3      	ldrh	r3, [r4, #12]
 80030ea:	075a      	lsls	r2, r3, #29
 80030ec:	d505      	bpl.n	80030fa <__sflush_r+0x42>
 80030ee:	6863      	ldr	r3, [r4, #4]
 80030f0:	1ac0      	subs	r0, r0, r3
 80030f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80030f4:	b10b      	cbz	r3, 80030fa <__sflush_r+0x42>
 80030f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80030f8:	1ac0      	subs	r0, r0, r3
 80030fa:	2300      	movs	r3, #0
 80030fc:	4602      	mov	r2, r0
 80030fe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003100:	4628      	mov	r0, r5
 8003102:	6a21      	ldr	r1, [r4, #32]
 8003104:	47b0      	blx	r6
 8003106:	1c43      	adds	r3, r0, #1
 8003108:	89a3      	ldrh	r3, [r4, #12]
 800310a:	d106      	bne.n	800311a <__sflush_r+0x62>
 800310c:	6829      	ldr	r1, [r5, #0]
 800310e:	291d      	cmp	r1, #29
 8003110:	d82c      	bhi.n	800316c <__sflush_r+0xb4>
 8003112:	4a29      	ldr	r2, [pc, #164]	; (80031b8 <__sflush_r+0x100>)
 8003114:	40ca      	lsrs	r2, r1
 8003116:	07d6      	lsls	r6, r2, #31
 8003118:	d528      	bpl.n	800316c <__sflush_r+0xb4>
 800311a:	2200      	movs	r2, #0
 800311c:	6062      	str	r2, [r4, #4]
 800311e:	6922      	ldr	r2, [r4, #16]
 8003120:	04d9      	lsls	r1, r3, #19
 8003122:	6022      	str	r2, [r4, #0]
 8003124:	d504      	bpl.n	8003130 <__sflush_r+0x78>
 8003126:	1c42      	adds	r2, r0, #1
 8003128:	d101      	bne.n	800312e <__sflush_r+0x76>
 800312a:	682b      	ldr	r3, [r5, #0]
 800312c:	b903      	cbnz	r3, 8003130 <__sflush_r+0x78>
 800312e:	6560      	str	r0, [r4, #84]	; 0x54
 8003130:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003132:	602f      	str	r7, [r5, #0]
 8003134:	2900      	cmp	r1, #0
 8003136:	d0cb      	beq.n	80030d0 <__sflush_r+0x18>
 8003138:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800313c:	4299      	cmp	r1, r3
 800313e:	d002      	beq.n	8003146 <__sflush_r+0x8e>
 8003140:	4628      	mov	r0, r5
 8003142:	f000 f9d5 	bl	80034f0 <_free_r>
 8003146:	2000      	movs	r0, #0
 8003148:	6360      	str	r0, [r4, #52]	; 0x34
 800314a:	e7c2      	b.n	80030d2 <__sflush_r+0x1a>
 800314c:	6a21      	ldr	r1, [r4, #32]
 800314e:	2301      	movs	r3, #1
 8003150:	4628      	mov	r0, r5
 8003152:	47b0      	blx	r6
 8003154:	1c41      	adds	r1, r0, #1
 8003156:	d1c7      	bne.n	80030e8 <__sflush_r+0x30>
 8003158:	682b      	ldr	r3, [r5, #0]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d0c4      	beq.n	80030e8 <__sflush_r+0x30>
 800315e:	2b1d      	cmp	r3, #29
 8003160:	d001      	beq.n	8003166 <__sflush_r+0xae>
 8003162:	2b16      	cmp	r3, #22
 8003164:	d101      	bne.n	800316a <__sflush_r+0xb2>
 8003166:	602f      	str	r7, [r5, #0]
 8003168:	e7b2      	b.n	80030d0 <__sflush_r+0x18>
 800316a:	89a3      	ldrh	r3, [r4, #12]
 800316c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003170:	81a3      	strh	r3, [r4, #12]
 8003172:	e7ae      	b.n	80030d2 <__sflush_r+0x1a>
 8003174:	690f      	ldr	r7, [r1, #16]
 8003176:	2f00      	cmp	r7, #0
 8003178:	d0aa      	beq.n	80030d0 <__sflush_r+0x18>
 800317a:	0793      	lsls	r3, r2, #30
 800317c:	bf18      	it	ne
 800317e:	2300      	movne	r3, #0
 8003180:	680e      	ldr	r6, [r1, #0]
 8003182:	bf08      	it	eq
 8003184:	694b      	ldreq	r3, [r1, #20]
 8003186:	1bf6      	subs	r6, r6, r7
 8003188:	600f      	str	r7, [r1, #0]
 800318a:	608b      	str	r3, [r1, #8]
 800318c:	2e00      	cmp	r6, #0
 800318e:	dd9f      	ble.n	80030d0 <__sflush_r+0x18>
 8003190:	4633      	mov	r3, r6
 8003192:	463a      	mov	r2, r7
 8003194:	4628      	mov	r0, r5
 8003196:	6a21      	ldr	r1, [r4, #32]
 8003198:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800319c:	47e0      	blx	ip
 800319e:	2800      	cmp	r0, #0
 80031a0:	dc06      	bgt.n	80031b0 <__sflush_r+0xf8>
 80031a2:	89a3      	ldrh	r3, [r4, #12]
 80031a4:	f04f 30ff 	mov.w	r0, #4294967295
 80031a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80031ac:	81a3      	strh	r3, [r4, #12]
 80031ae:	e790      	b.n	80030d2 <__sflush_r+0x1a>
 80031b0:	4407      	add	r7, r0
 80031b2:	1a36      	subs	r6, r6, r0
 80031b4:	e7ea      	b.n	800318c <__sflush_r+0xd4>
 80031b6:	bf00      	nop
 80031b8:	20400001 	.word	0x20400001

080031bc <_fflush_r>:
 80031bc:	b538      	push	{r3, r4, r5, lr}
 80031be:	690b      	ldr	r3, [r1, #16]
 80031c0:	4605      	mov	r5, r0
 80031c2:	460c      	mov	r4, r1
 80031c4:	b913      	cbnz	r3, 80031cc <_fflush_r+0x10>
 80031c6:	2500      	movs	r5, #0
 80031c8:	4628      	mov	r0, r5
 80031ca:	bd38      	pop	{r3, r4, r5, pc}
 80031cc:	b118      	cbz	r0, 80031d6 <_fflush_r+0x1a>
 80031ce:	6983      	ldr	r3, [r0, #24]
 80031d0:	b90b      	cbnz	r3, 80031d6 <_fflush_r+0x1a>
 80031d2:	f000 f887 	bl	80032e4 <__sinit>
 80031d6:	4b14      	ldr	r3, [pc, #80]	; (8003228 <_fflush_r+0x6c>)
 80031d8:	429c      	cmp	r4, r3
 80031da:	d11b      	bne.n	8003214 <_fflush_r+0x58>
 80031dc:	686c      	ldr	r4, [r5, #4]
 80031de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d0ef      	beq.n	80031c6 <_fflush_r+0xa>
 80031e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80031e8:	07d0      	lsls	r0, r2, #31
 80031ea:	d404      	bmi.n	80031f6 <_fflush_r+0x3a>
 80031ec:	0599      	lsls	r1, r3, #22
 80031ee:	d402      	bmi.n	80031f6 <_fflush_r+0x3a>
 80031f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80031f2:	f000 f915 	bl	8003420 <__retarget_lock_acquire_recursive>
 80031f6:	4628      	mov	r0, r5
 80031f8:	4621      	mov	r1, r4
 80031fa:	f7ff ff5d 	bl	80030b8 <__sflush_r>
 80031fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003200:	4605      	mov	r5, r0
 8003202:	07da      	lsls	r2, r3, #31
 8003204:	d4e0      	bmi.n	80031c8 <_fflush_r+0xc>
 8003206:	89a3      	ldrh	r3, [r4, #12]
 8003208:	059b      	lsls	r3, r3, #22
 800320a:	d4dd      	bmi.n	80031c8 <_fflush_r+0xc>
 800320c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800320e:	f000 f908 	bl	8003422 <__retarget_lock_release_recursive>
 8003212:	e7d9      	b.n	80031c8 <_fflush_r+0xc>
 8003214:	4b05      	ldr	r3, [pc, #20]	; (800322c <_fflush_r+0x70>)
 8003216:	429c      	cmp	r4, r3
 8003218:	d101      	bne.n	800321e <_fflush_r+0x62>
 800321a:	68ac      	ldr	r4, [r5, #8]
 800321c:	e7df      	b.n	80031de <_fflush_r+0x22>
 800321e:	4b04      	ldr	r3, [pc, #16]	; (8003230 <_fflush_r+0x74>)
 8003220:	429c      	cmp	r4, r3
 8003222:	bf08      	it	eq
 8003224:	68ec      	ldreq	r4, [r5, #12]
 8003226:	e7da      	b.n	80031de <_fflush_r+0x22>
 8003228:	080045b4 	.word	0x080045b4
 800322c:	080045d4 	.word	0x080045d4
 8003230:	08004594 	.word	0x08004594

08003234 <std>:
 8003234:	2300      	movs	r3, #0
 8003236:	b510      	push	{r4, lr}
 8003238:	4604      	mov	r4, r0
 800323a:	e9c0 3300 	strd	r3, r3, [r0]
 800323e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003242:	6083      	str	r3, [r0, #8]
 8003244:	8181      	strh	r1, [r0, #12]
 8003246:	6643      	str	r3, [r0, #100]	; 0x64
 8003248:	81c2      	strh	r2, [r0, #14]
 800324a:	6183      	str	r3, [r0, #24]
 800324c:	4619      	mov	r1, r3
 800324e:	2208      	movs	r2, #8
 8003250:	305c      	adds	r0, #92	; 0x5c
 8003252:	f7ff fdb1 	bl	8002db8 <memset>
 8003256:	4b05      	ldr	r3, [pc, #20]	; (800326c <std+0x38>)
 8003258:	6224      	str	r4, [r4, #32]
 800325a:	6263      	str	r3, [r4, #36]	; 0x24
 800325c:	4b04      	ldr	r3, [pc, #16]	; (8003270 <std+0x3c>)
 800325e:	62a3      	str	r3, [r4, #40]	; 0x28
 8003260:	4b04      	ldr	r3, [pc, #16]	; (8003274 <std+0x40>)
 8003262:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003264:	4b04      	ldr	r3, [pc, #16]	; (8003278 <std+0x44>)
 8003266:	6323      	str	r3, [r4, #48]	; 0x30
 8003268:	bd10      	pop	{r4, pc}
 800326a:	bf00      	nop
 800326c:	08003d35 	.word	0x08003d35
 8003270:	08003d57 	.word	0x08003d57
 8003274:	08003d8f 	.word	0x08003d8f
 8003278:	08003db3 	.word	0x08003db3

0800327c <_cleanup_r>:
 800327c:	4901      	ldr	r1, [pc, #4]	; (8003284 <_cleanup_r+0x8>)
 800327e:	f000 b8af 	b.w	80033e0 <_fwalk_reent>
 8003282:	bf00      	nop
 8003284:	080031bd 	.word	0x080031bd

08003288 <__sfmoreglue>:
 8003288:	2268      	movs	r2, #104	; 0x68
 800328a:	b570      	push	{r4, r5, r6, lr}
 800328c:	1e4d      	subs	r5, r1, #1
 800328e:	4355      	muls	r5, r2
 8003290:	460e      	mov	r6, r1
 8003292:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003296:	f000 f993 	bl	80035c0 <_malloc_r>
 800329a:	4604      	mov	r4, r0
 800329c:	b140      	cbz	r0, 80032b0 <__sfmoreglue+0x28>
 800329e:	2100      	movs	r1, #0
 80032a0:	e9c0 1600 	strd	r1, r6, [r0]
 80032a4:	300c      	adds	r0, #12
 80032a6:	60a0      	str	r0, [r4, #8]
 80032a8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80032ac:	f7ff fd84 	bl	8002db8 <memset>
 80032b0:	4620      	mov	r0, r4
 80032b2:	bd70      	pop	{r4, r5, r6, pc}

080032b4 <__sfp_lock_acquire>:
 80032b4:	4801      	ldr	r0, [pc, #4]	; (80032bc <__sfp_lock_acquire+0x8>)
 80032b6:	f000 b8b3 	b.w	8003420 <__retarget_lock_acquire_recursive>
 80032ba:	bf00      	nop
 80032bc:	20000a1a 	.word	0x20000a1a

080032c0 <__sfp_lock_release>:
 80032c0:	4801      	ldr	r0, [pc, #4]	; (80032c8 <__sfp_lock_release+0x8>)
 80032c2:	f000 b8ae 	b.w	8003422 <__retarget_lock_release_recursive>
 80032c6:	bf00      	nop
 80032c8:	20000a1a 	.word	0x20000a1a

080032cc <__sinit_lock_acquire>:
 80032cc:	4801      	ldr	r0, [pc, #4]	; (80032d4 <__sinit_lock_acquire+0x8>)
 80032ce:	f000 b8a7 	b.w	8003420 <__retarget_lock_acquire_recursive>
 80032d2:	bf00      	nop
 80032d4:	20000a1b 	.word	0x20000a1b

080032d8 <__sinit_lock_release>:
 80032d8:	4801      	ldr	r0, [pc, #4]	; (80032e0 <__sinit_lock_release+0x8>)
 80032da:	f000 b8a2 	b.w	8003422 <__retarget_lock_release_recursive>
 80032de:	bf00      	nop
 80032e0:	20000a1b 	.word	0x20000a1b

080032e4 <__sinit>:
 80032e4:	b510      	push	{r4, lr}
 80032e6:	4604      	mov	r4, r0
 80032e8:	f7ff fff0 	bl	80032cc <__sinit_lock_acquire>
 80032ec:	69a3      	ldr	r3, [r4, #24]
 80032ee:	b11b      	cbz	r3, 80032f8 <__sinit+0x14>
 80032f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80032f4:	f7ff bff0 	b.w	80032d8 <__sinit_lock_release>
 80032f8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80032fc:	6523      	str	r3, [r4, #80]	; 0x50
 80032fe:	4b13      	ldr	r3, [pc, #76]	; (800334c <__sinit+0x68>)
 8003300:	4a13      	ldr	r2, [pc, #76]	; (8003350 <__sinit+0x6c>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	62a2      	str	r2, [r4, #40]	; 0x28
 8003306:	42a3      	cmp	r3, r4
 8003308:	bf08      	it	eq
 800330a:	2301      	moveq	r3, #1
 800330c:	4620      	mov	r0, r4
 800330e:	bf08      	it	eq
 8003310:	61a3      	streq	r3, [r4, #24]
 8003312:	f000 f81f 	bl	8003354 <__sfp>
 8003316:	6060      	str	r0, [r4, #4]
 8003318:	4620      	mov	r0, r4
 800331a:	f000 f81b 	bl	8003354 <__sfp>
 800331e:	60a0      	str	r0, [r4, #8]
 8003320:	4620      	mov	r0, r4
 8003322:	f000 f817 	bl	8003354 <__sfp>
 8003326:	2200      	movs	r2, #0
 8003328:	2104      	movs	r1, #4
 800332a:	60e0      	str	r0, [r4, #12]
 800332c:	6860      	ldr	r0, [r4, #4]
 800332e:	f7ff ff81 	bl	8003234 <std>
 8003332:	2201      	movs	r2, #1
 8003334:	2109      	movs	r1, #9
 8003336:	68a0      	ldr	r0, [r4, #8]
 8003338:	f7ff ff7c 	bl	8003234 <std>
 800333c:	2202      	movs	r2, #2
 800333e:	2112      	movs	r1, #18
 8003340:	68e0      	ldr	r0, [r4, #12]
 8003342:	f7ff ff77 	bl	8003234 <std>
 8003346:	2301      	movs	r3, #1
 8003348:	61a3      	str	r3, [r4, #24]
 800334a:	e7d1      	b.n	80032f0 <__sinit+0xc>
 800334c:	08004590 	.word	0x08004590
 8003350:	0800327d 	.word	0x0800327d

08003354 <__sfp>:
 8003354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003356:	4607      	mov	r7, r0
 8003358:	f7ff ffac 	bl	80032b4 <__sfp_lock_acquire>
 800335c:	4b1e      	ldr	r3, [pc, #120]	; (80033d8 <__sfp+0x84>)
 800335e:	681e      	ldr	r6, [r3, #0]
 8003360:	69b3      	ldr	r3, [r6, #24]
 8003362:	b913      	cbnz	r3, 800336a <__sfp+0x16>
 8003364:	4630      	mov	r0, r6
 8003366:	f7ff ffbd 	bl	80032e4 <__sinit>
 800336a:	3648      	adds	r6, #72	; 0x48
 800336c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003370:	3b01      	subs	r3, #1
 8003372:	d503      	bpl.n	800337c <__sfp+0x28>
 8003374:	6833      	ldr	r3, [r6, #0]
 8003376:	b30b      	cbz	r3, 80033bc <__sfp+0x68>
 8003378:	6836      	ldr	r6, [r6, #0]
 800337a:	e7f7      	b.n	800336c <__sfp+0x18>
 800337c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003380:	b9d5      	cbnz	r5, 80033b8 <__sfp+0x64>
 8003382:	4b16      	ldr	r3, [pc, #88]	; (80033dc <__sfp+0x88>)
 8003384:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003388:	60e3      	str	r3, [r4, #12]
 800338a:	6665      	str	r5, [r4, #100]	; 0x64
 800338c:	f000 f847 	bl	800341e <__retarget_lock_init_recursive>
 8003390:	f7ff ff96 	bl	80032c0 <__sfp_lock_release>
 8003394:	2208      	movs	r2, #8
 8003396:	4629      	mov	r1, r5
 8003398:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800339c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80033a0:	6025      	str	r5, [r4, #0]
 80033a2:	61a5      	str	r5, [r4, #24]
 80033a4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80033a8:	f7ff fd06 	bl	8002db8 <memset>
 80033ac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80033b0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80033b4:	4620      	mov	r0, r4
 80033b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80033b8:	3468      	adds	r4, #104	; 0x68
 80033ba:	e7d9      	b.n	8003370 <__sfp+0x1c>
 80033bc:	2104      	movs	r1, #4
 80033be:	4638      	mov	r0, r7
 80033c0:	f7ff ff62 	bl	8003288 <__sfmoreglue>
 80033c4:	4604      	mov	r4, r0
 80033c6:	6030      	str	r0, [r6, #0]
 80033c8:	2800      	cmp	r0, #0
 80033ca:	d1d5      	bne.n	8003378 <__sfp+0x24>
 80033cc:	f7ff ff78 	bl	80032c0 <__sfp_lock_release>
 80033d0:	230c      	movs	r3, #12
 80033d2:	603b      	str	r3, [r7, #0]
 80033d4:	e7ee      	b.n	80033b4 <__sfp+0x60>
 80033d6:	bf00      	nop
 80033d8:	08004590 	.word	0x08004590
 80033dc:	ffff0001 	.word	0xffff0001

080033e0 <_fwalk_reent>:
 80033e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80033e4:	4606      	mov	r6, r0
 80033e6:	4688      	mov	r8, r1
 80033e8:	2700      	movs	r7, #0
 80033ea:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80033ee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80033f2:	f1b9 0901 	subs.w	r9, r9, #1
 80033f6:	d505      	bpl.n	8003404 <_fwalk_reent+0x24>
 80033f8:	6824      	ldr	r4, [r4, #0]
 80033fa:	2c00      	cmp	r4, #0
 80033fc:	d1f7      	bne.n	80033ee <_fwalk_reent+0xe>
 80033fe:	4638      	mov	r0, r7
 8003400:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003404:	89ab      	ldrh	r3, [r5, #12]
 8003406:	2b01      	cmp	r3, #1
 8003408:	d907      	bls.n	800341a <_fwalk_reent+0x3a>
 800340a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800340e:	3301      	adds	r3, #1
 8003410:	d003      	beq.n	800341a <_fwalk_reent+0x3a>
 8003412:	4629      	mov	r1, r5
 8003414:	4630      	mov	r0, r6
 8003416:	47c0      	blx	r8
 8003418:	4307      	orrs	r7, r0
 800341a:	3568      	adds	r5, #104	; 0x68
 800341c:	e7e9      	b.n	80033f2 <_fwalk_reent+0x12>

0800341e <__retarget_lock_init_recursive>:
 800341e:	4770      	bx	lr

08003420 <__retarget_lock_acquire_recursive>:
 8003420:	4770      	bx	lr

08003422 <__retarget_lock_release_recursive>:
 8003422:	4770      	bx	lr

08003424 <__swhatbuf_r>:
 8003424:	b570      	push	{r4, r5, r6, lr}
 8003426:	460e      	mov	r6, r1
 8003428:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800342c:	4614      	mov	r4, r2
 800342e:	2900      	cmp	r1, #0
 8003430:	461d      	mov	r5, r3
 8003432:	b096      	sub	sp, #88	; 0x58
 8003434:	da08      	bge.n	8003448 <__swhatbuf_r+0x24>
 8003436:	2200      	movs	r2, #0
 8003438:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800343c:	602a      	str	r2, [r5, #0]
 800343e:	061a      	lsls	r2, r3, #24
 8003440:	d410      	bmi.n	8003464 <__swhatbuf_r+0x40>
 8003442:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003446:	e00e      	b.n	8003466 <__swhatbuf_r+0x42>
 8003448:	466a      	mov	r2, sp
 800344a:	f000 fcd9 	bl	8003e00 <_fstat_r>
 800344e:	2800      	cmp	r0, #0
 8003450:	dbf1      	blt.n	8003436 <__swhatbuf_r+0x12>
 8003452:	9a01      	ldr	r2, [sp, #4]
 8003454:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003458:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800345c:	425a      	negs	r2, r3
 800345e:	415a      	adcs	r2, r3
 8003460:	602a      	str	r2, [r5, #0]
 8003462:	e7ee      	b.n	8003442 <__swhatbuf_r+0x1e>
 8003464:	2340      	movs	r3, #64	; 0x40
 8003466:	2000      	movs	r0, #0
 8003468:	6023      	str	r3, [r4, #0]
 800346a:	b016      	add	sp, #88	; 0x58
 800346c:	bd70      	pop	{r4, r5, r6, pc}
	...

08003470 <__smakebuf_r>:
 8003470:	898b      	ldrh	r3, [r1, #12]
 8003472:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003474:	079d      	lsls	r5, r3, #30
 8003476:	4606      	mov	r6, r0
 8003478:	460c      	mov	r4, r1
 800347a:	d507      	bpl.n	800348c <__smakebuf_r+0x1c>
 800347c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003480:	6023      	str	r3, [r4, #0]
 8003482:	6123      	str	r3, [r4, #16]
 8003484:	2301      	movs	r3, #1
 8003486:	6163      	str	r3, [r4, #20]
 8003488:	b002      	add	sp, #8
 800348a:	bd70      	pop	{r4, r5, r6, pc}
 800348c:	466a      	mov	r2, sp
 800348e:	ab01      	add	r3, sp, #4
 8003490:	f7ff ffc8 	bl	8003424 <__swhatbuf_r>
 8003494:	9900      	ldr	r1, [sp, #0]
 8003496:	4605      	mov	r5, r0
 8003498:	4630      	mov	r0, r6
 800349a:	f000 f891 	bl	80035c0 <_malloc_r>
 800349e:	b948      	cbnz	r0, 80034b4 <__smakebuf_r+0x44>
 80034a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80034a4:	059a      	lsls	r2, r3, #22
 80034a6:	d4ef      	bmi.n	8003488 <__smakebuf_r+0x18>
 80034a8:	f023 0303 	bic.w	r3, r3, #3
 80034ac:	f043 0302 	orr.w	r3, r3, #2
 80034b0:	81a3      	strh	r3, [r4, #12]
 80034b2:	e7e3      	b.n	800347c <__smakebuf_r+0xc>
 80034b4:	4b0d      	ldr	r3, [pc, #52]	; (80034ec <__smakebuf_r+0x7c>)
 80034b6:	62b3      	str	r3, [r6, #40]	; 0x28
 80034b8:	89a3      	ldrh	r3, [r4, #12]
 80034ba:	6020      	str	r0, [r4, #0]
 80034bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034c0:	81a3      	strh	r3, [r4, #12]
 80034c2:	9b00      	ldr	r3, [sp, #0]
 80034c4:	6120      	str	r0, [r4, #16]
 80034c6:	6163      	str	r3, [r4, #20]
 80034c8:	9b01      	ldr	r3, [sp, #4]
 80034ca:	b15b      	cbz	r3, 80034e4 <__smakebuf_r+0x74>
 80034cc:	4630      	mov	r0, r6
 80034ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80034d2:	f000 fca7 	bl	8003e24 <_isatty_r>
 80034d6:	b128      	cbz	r0, 80034e4 <__smakebuf_r+0x74>
 80034d8:	89a3      	ldrh	r3, [r4, #12]
 80034da:	f023 0303 	bic.w	r3, r3, #3
 80034de:	f043 0301 	orr.w	r3, r3, #1
 80034e2:	81a3      	strh	r3, [r4, #12]
 80034e4:	89a0      	ldrh	r0, [r4, #12]
 80034e6:	4305      	orrs	r5, r0
 80034e8:	81a5      	strh	r5, [r4, #12]
 80034ea:	e7cd      	b.n	8003488 <__smakebuf_r+0x18>
 80034ec:	0800327d 	.word	0x0800327d

080034f0 <_free_r>:
 80034f0:	b538      	push	{r3, r4, r5, lr}
 80034f2:	4605      	mov	r5, r0
 80034f4:	2900      	cmp	r1, #0
 80034f6:	d040      	beq.n	800357a <_free_r+0x8a>
 80034f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80034fc:	1f0c      	subs	r4, r1, #4
 80034fe:	2b00      	cmp	r3, #0
 8003500:	bfb8      	it	lt
 8003502:	18e4      	addlt	r4, r4, r3
 8003504:	f000 fcbe 	bl	8003e84 <__malloc_lock>
 8003508:	4a1c      	ldr	r2, [pc, #112]	; (800357c <_free_r+0x8c>)
 800350a:	6813      	ldr	r3, [r2, #0]
 800350c:	b933      	cbnz	r3, 800351c <_free_r+0x2c>
 800350e:	6063      	str	r3, [r4, #4]
 8003510:	6014      	str	r4, [r2, #0]
 8003512:	4628      	mov	r0, r5
 8003514:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003518:	f000 bcba 	b.w	8003e90 <__malloc_unlock>
 800351c:	42a3      	cmp	r3, r4
 800351e:	d908      	bls.n	8003532 <_free_r+0x42>
 8003520:	6820      	ldr	r0, [r4, #0]
 8003522:	1821      	adds	r1, r4, r0
 8003524:	428b      	cmp	r3, r1
 8003526:	bf01      	itttt	eq
 8003528:	6819      	ldreq	r1, [r3, #0]
 800352a:	685b      	ldreq	r3, [r3, #4]
 800352c:	1809      	addeq	r1, r1, r0
 800352e:	6021      	streq	r1, [r4, #0]
 8003530:	e7ed      	b.n	800350e <_free_r+0x1e>
 8003532:	461a      	mov	r2, r3
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	b10b      	cbz	r3, 800353c <_free_r+0x4c>
 8003538:	42a3      	cmp	r3, r4
 800353a:	d9fa      	bls.n	8003532 <_free_r+0x42>
 800353c:	6811      	ldr	r1, [r2, #0]
 800353e:	1850      	adds	r0, r2, r1
 8003540:	42a0      	cmp	r0, r4
 8003542:	d10b      	bne.n	800355c <_free_r+0x6c>
 8003544:	6820      	ldr	r0, [r4, #0]
 8003546:	4401      	add	r1, r0
 8003548:	1850      	adds	r0, r2, r1
 800354a:	4283      	cmp	r3, r0
 800354c:	6011      	str	r1, [r2, #0]
 800354e:	d1e0      	bne.n	8003512 <_free_r+0x22>
 8003550:	6818      	ldr	r0, [r3, #0]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	4401      	add	r1, r0
 8003556:	6011      	str	r1, [r2, #0]
 8003558:	6053      	str	r3, [r2, #4]
 800355a:	e7da      	b.n	8003512 <_free_r+0x22>
 800355c:	d902      	bls.n	8003564 <_free_r+0x74>
 800355e:	230c      	movs	r3, #12
 8003560:	602b      	str	r3, [r5, #0]
 8003562:	e7d6      	b.n	8003512 <_free_r+0x22>
 8003564:	6820      	ldr	r0, [r4, #0]
 8003566:	1821      	adds	r1, r4, r0
 8003568:	428b      	cmp	r3, r1
 800356a:	bf01      	itttt	eq
 800356c:	6819      	ldreq	r1, [r3, #0]
 800356e:	685b      	ldreq	r3, [r3, #4]
 8003570:	1809      	addeq	r1, r1, r0
 8003572:	6021      	streq	r1, [r4, #0]
 8003574:	6063      	str	r3, [r4, #4]
 8003576:	6054      	str	r4, [r2, #4]
 8003578:	e7cb      	b.n	8003512 <_free_r+0x22>
 800357a:	bd38      	pop	{r3, r4, r5, pc}
 800357c:	20000a1c 	.word	0x20000a1c

08003580 <sbrk_aligned>:
 8003580:	b570      	push	{r4, r5, r6, lr}
 8003582:	4e0e      	ldr	r6, [pc, #56]	; (80035bc <sbrk_aligned+0x3c>)
 8003584:	460c      	mov	r4, r1
 8003586:	6831      	ldr	r1, [r6, #0]
 8003588:	4605      	mov	r5, r0
 800358a:	b911      	cbnz	r1, 8003592 <sbrk_aligned+0x12>
 800358c:	f000 fbc2 	bl	8003d14 <_sbrk_r>
 8003590:	6030      	str	r0, [r6, #0]
 8003592:	4621      	mov	r1, r4
 8003594:	4628      	mov	r0, r5
 8003596:	f000 fbbd 	bl	8003d14 <_sbrk_r>
 800359a:	1c43      	adds	r3, r0, #1
 800359c:	d00a      	beq.n	80035b4 <sbrk_aligned+0x34>
 800359e:	1cc4      	adds	r4, r0, #3
 80035a0:	f024 0403 	bic.w	r4, r4, #3
 80035a4:	42a0      	cmp	r0, r4
 80035a6:	d007      	beq.n	80035b8 <sbrk_aligned+0x38>
 80035a8:	1a21      	subs	r1, r4, r0
 80035aa:	4628      	mov	r0, r5
 80035ac:	f000 fbb2 	bl	8003d14 <_sbrk_r>
 80035b0:	3001      	adds	r0, #1
 80035b2:	d101      	bne.n	80035b8 <sbrk_aligned+0x38>
 80035b4:	f04f 34ff 	mov.w	r4, #4294967295
 80035b8:	4620      	mov	r0, r4
 80035ba:	bd70      	pop	{r4, r5, r6, pc}
 80035bc:	20000a20 	.word	0x20000a20

080035c0 <_malloc_r>:
 80035c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80035c4:	1ccd      	adds	r5, r1, #3
 80035c6:	f025 0503 	bic.w	r5, r5, #3
 80035ca:	3508      	adds	r5, #8
 80035cc:	2d0c      	cmp	r5, #12
 80035ce:	bf38      	it	cc
 80035d0:	250c      	movcc	r5, #12
 80035d2:	2d00      	cmp	r5, #0
 80035d4:	4607      	mov	r7, r0
 80035d6:	db01      	blt.n	80035dc <_malloc_r+0x1c>
 80035d8:	42a9      	cmp	r1, r5
 80035da:	d905      	bls.n	80035e8 <_malloc_r+0x28>
 80035dc:	230c      	movs	r3, #12
 80035de:	2600      	movs	r6, #0
 80035e0:	603b      	str	r3, [r7, #0]
 80035e2:	4630      	mov	r0, r6
 80035e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80035e8:	4e2e      	ldr	r6, [pc, #184]	; (80036a4 <_malloc_r+0xe4>)
 80035ea:	f000 fc4b 	bl	8003e84 <__malloc_lock>
 80035ee:	6833      	ldr	r3, [r6, #0]
 80035f0:	461c      	mov	r4, r3
 80035f2:	bb34      	cbnz	r4, 8003642 <_malloc_r+0x82>
 80035f4:	4629      	mov	r1, r5
 80035f6:	4638      	mov	r0, r7
 80035f8:	f7ff ffc2 	bl	8003580 <sbrk_aligned>
 80035fc:	1c43      	adds	r3, r0, #1
 80035fe:	4604      	mov	r4, r0
 8003600:	d14d      	bne.n	800369e <_malloc_r+0xde>
 8003602:	6834      	ldr	r4, [r6, #0]
 8003604:	4626      	mov	r6, r4
 8003606:	2e00      	cmp	r6, #0
 8003608:	d140      	bne.n	800368c <_malloc_r+0xcc>
 800360a:	6823      	ldr	r3, [r4, #0]
 800360c:	4631      	mov	r1, r6
 800360e:	4638      	mov	r0, r7
 8003610:	eb04 0803 	add.w	r8, r4, r3
 8003614:	f000 fb7e 	bl	8003d14 <_sbrk_r>
 8003618:	4580      	cmp	r8, r0
 800361a:	d13a      	bne.n	8003692 <_malloc_r+0xd2>
 800361c:	6821      	ldr	r1, [r4, #0]
 800361e:	3503      	adds	r5, #3
 8003620:	1a6d      	subs	r5, r5, r1
 8003622:	f025 0503 	bic.w	r5, r5, #3
 8003626:	3508      	adds	r5, #8
 8003628:	2d0c      	cmp	r5, #12
 800362a:	bf38      	it	cc
 800362c:	250c      	movcc	r5, #12
 800362e:	4638      	mov	r0, r7
 8003630:	4629      	mov	r1, r5
 8003632:	f7ff ffa5 	bl	8003580 <sbrk_aligned>
 8003636:	3001      	adds	r0, #1
 8003638:	d02b      	beq.n	8003692 <_malloc_r+0xd2>
 800363a:	6823      	ldr	r3, [r4, #0]
 800363c:	442b      	add	r3, r5
 800363e:	6023      	str	r3, [r4, #0]
 8003640:	e00e      	b.n	8003660 <_malloc_r+0xa0>
 8003642:	6822      	ldr	r2, [r4, #0]
 8003644:	1b52      	subs	r2, r2, r5
 8003646:	d41e      	bmi.n	8003686 <_malloc_r+0xc6>
 8003648:	2a0b      	cmp	r2, #11
 800364a:	d916      	bls.n	800367a <_malloc_r+0xba>
 800364c:	1961      	adds	r1, r4, r5
 800364e:	42a3      	cmp	r3, r4
 8003650:	6025      	str	r5, [r4, #0]
 8003652:	bf18      	it	ne
 8003654:	6059      	strne	r1, [r3, #4]
 8003656:	6863      	ldr	r3, [r4, #4]
 8003658:	bf08      	it	eq
 800365a:	6031      	streq	r1, [r6, #0]
 800365c:	5162      	str	r2, [r4, r5]
 800365e:	604b      	str	r3, [r1, #4]
 8003660:	4638      	mov	r0, r7
 8003662:	f104 060b 	add.w	r6, r4, #11
 8003666:	f000 fc13 	bl	8003e90 <__malloc_unlock>
 800366a:	f026 0607 	bic.w	r6, r6, #7
 800366e:	1d23      	adds	r3, r4, #4
 8003670:	1af2      	subs	r2, r6, r3
 8003672:	d0b6      	beq.n	80035e2 <_malloc_r+0x22>
 8003674:	1b9b      	subs	r3, r3, r6
 8003676:	50a3      	str	r3, [r4, r2]
 8003678:	e7b3      	b.n	80035e2 <_malloc_r+0x22>
 800367a:	6862      	ldr	r2, [r4, #4]
 800367c:	42a3      	cmp	r3, r4
 800367e:	bf0c      	ite	eq
 8003680:	6032      	streq	r2, [r6, #0]
 8003682:	605a      	strne	r2, [r3, #4]
 8003684:	e7ec      	b.n	8003660 <_malloc_r+0xa0>
 8003686:	4623      	mov	r3, r4
 8003688:	6864      	ldr	r4, [r4, #4]
 800368a:	e7b2      	b.n	80035f2 <_malloc_r+0x32>
 800368c:	4634      	mov	r4, r6
 800368e:	6876      	ldr	r6, [r6, #4]
 8003690:	e7b9      	b.n	8003606 <_malloc_r+0x46>
 8003692:	230c      	movs	r3, #12
 8003694:	4638      	mov	r0, r7
 8003696:	603b      	str	r3, [r7, #0]
 8003698:	f000 fbfa 	bl	8003e90 <__malloc_unlock>
 800369c:	e7a1      	b.n	80035e2 <_malloc_r+0x22>
 800369e:	6025      	str	r5, [r4, #0]
 80036a0:	e7de      	b.n	8003660 <_malloc_r+0xa0>
 80036a2:	bf00      	nop
 80036a4:	20000a1c 	.word	0x20000a1c

080036a8 <__sfputc_r>:
 80036a8:	6893      	ldr	r3, [r2, #8]
 80036aa:	b410      	push	{r4}
 80036ac:	3b01      	subs	r3, #1
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	6093      	str	r3, [r2, #8]
 80036b2:	da07      	bge.n	80036c4 <__sfputc_r+0x1c>
 80036b4:	6994      	ldr	r4, [r2, #24]
 80036b6:	42a3      	cmp	r3, r4
 80036b8:	db01      	blt.n	80036be <__sfputc_r+0x16>
 80036ba:	290a      	cmp	r1, #10
 80036bc:	d102      	bne.n	80036c4 <__sfputc_r+0x1c>
 80036be:	bc10      	pop	{r4}
 80036c0:	f7ff bc3a 	b.w	8002f38 <__swbuf_r>
 80036c4:	6813      	ldr	r3, [r2, #0]
 80036c6:	1c58      	adds	r0, r3, #1
 80036c8:	6010      	str	r0, [r2, #0]
 80036ca:	7019      	strb	r1, [r3, #0]
 80036cc:	4608      	mov	r0, r1
 80036ce:	bc10      	pop	{r4}
 80036d0:	4770      	bx	lr

080036d2 <__sfputs_r>:
 80036d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036d4:	4606      	mov	r6, r0
 80036d6:	460f      	mov	r7, r1
 80036d8:	4614      	mov	r4, r2
 80036da:	18d5      	adds	r5, r2, r3
 80036dc:	42ac      	cmp	r4, r5
 80036de:	d101      	bne.n	80036e4 <__sfputs_r+0x12>
 80036e0:	2000      	movs	r0, #0
 80036e2:	e007      	b.n	80036f4 <__sfputs_r+0x22>
 80036e4:	463a      	mov	r2, r7
 80036e6:	4630      	mov	r0, r6
 80036e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80036ec:	f7ff ffdc 	bl	80036a8 <__sfputc_r>
 80036f0:	1c43      	adds	r3, r0, #1
 80036f2:	d1f3      	bne.n	80036dc <__sfputs_r+0xa>
 80036f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080036f8 <_vfiprintf_r>:
 80036f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036fc:	460d      	mov	r5, r1
 80036fe:	4614      	mov	r4, r2
 8003700:	4698      	mov	r8, r3
 8003702:	4606      	mov	r6, r0
 8003704:	b09d      	sub	sp, #116	; 0x74
 8003706:	b118      	cbz	r0, 8003710 <_vfiprintf_r+0x18>
 8003708:	6983      	ldr	r3, [r0, #24]
 800370a:	b90b      	cbnz	r3, 8003710 <_vfiprintf_r+0x18>
 800370c:	f7ff fdea 	bl	80032e4 <__sinit>
 8003710:	4b89      	ldr	r3, [pc, #548]	; (8003938 <_vfiprintf_r+0x240>)
 8003712:	429d      	cmp	r5, r3
 8003714:	d11b      	bne.n	800374e <_vfiprintf_r+0x56>
 8003716:	6875      	ldr	r5, [r6, #4]
 8003718:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800371a:	07d9      	lsls	r1, r3, #31
 800371c:	d405      	bmi.n	800372a <_vfiprintf_r+0x32>
 800371e:	89ab      	ldrh	r3, [r5, #12]
 8003720:	059a      	lsls	r2, r3, #22
 8003722:	d402      	bmi.n	800372a <_vfiprintf_r+0x32>
 8003724:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003726:	f7ff fe7b 	bl	8003420 <__retarget_lock_acquire_recursive>
 800372a:	89ab      	ldrh	r3, [r5, #12]
 800372c:	071b      	lsls	r3, r3, #28
 800372e:	d501      	bpl.n	8003734 <_vfiprintf_r+0x3c>
 8003730:	692b      	ldr	r3, [r5, #16]
 8003732:	b9eb      	cbnz	r3, 8003770 <_vfiprintf_r+0x78>
 8003734:	4629      	mov	r1, r5
 8003736:	4630      	mov	r0, r6
 8003738:	f7ff fc50 	bl	8002fdc <__swsetup_r>
 800373c:	b1c0      	cbz	r0, 8003770 <_vfiprintf_r+0x78>
 800373e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003740:	07dc      	lsls	r4, r3, #31
 8003742:	d50e      	bpl.n	8003762 <_vfiprintf_r+0x6a>
 8003744:	f04f 30ff 	mov.w	r0, #4294967295
 8003748:	b01d      	add	sp, #116	; 0x74
 800374a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800374e:	4b7b      	ldr	r3, [pc, #492]	; (800393c <_vfiprintf_r+0x244>)
 8003750:	429d      	cmp	r5, r3
 8003752:	d101      	bne.n	8003758 <_vfiprintf_r+0x60>
 8003754:	68b5      	ldr	r5, [r6, #8]
 8003756:	e7df      	b.n	8003718 <_vfiprintf_r+0x20>
 8003758:	4b79      	ldr	r3, [pc, #484]	; (8003940 <_vfiprintf_r+0x248>)
 800375a:	429d      	cmp	r5, r3
 800375c:	bf08      	it	eq
 800375e:	68f5      	ldreq	r5, [r6, #12]
 8003760:	e7da      	b.n	8003718 <_vfiprintf_r+0x20>
 8003762:	89ab      	ldrh	r3, [r5, #12]
 8003764:	0598      	lsls	r0, r3, #22
 8003766:	d4ed      	bmi.n	8003744 <_vfiprintf_r+0x4c>
 8003768:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800376a:	f7ff fe5a 	bl	8003422 <__retarget_lock_release_recursive>
 800376e:	e7e9      	b.n	8003744 <_vfiprintf_r+0x4c>
 8003770:	2300      	movs	r3, #0
 8003772:	9309      	str	r3, [sp, #36]	; 0x24
 8003774:	2320      	movs	r3, #32
 8003776:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800377a:	2330      	movs	r3, #48	; 0x30
 800377c:	f04f 0901 	mov.w	r9, #1
 8003780:	f8cd 800c 	str.w	r8, [sp, #12]
 8003784:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8003944 <_vfiprintf_r+0x24c>
 8003788:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800378c:	4623      	mov	r3, r4
 800378e:	469a      	mov	sl, r3
 8003790:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003794:	b10a      	cbz	r2, 800379a <_vfiprintf_r+0xa2>
 8003796:	2a25      	cmp	r2, #37	; 0x25
 8003798:	d1f9      	bne.n	800378e <_vfiprintf_r+0x96>
 800379a:	ebba 0b04 	subs.w	fp, sl, r4
 800379e:	d00b      	beq.n	80037b8 <_vfiprintf_r+0xc0>
 80037a0:	465b      	mov	r3, fp
 80037a2:	4622      	mov	r2, r4
 80037a4:	4629      	mov	r1, r5
 80037a6:	4630      	mov	r0, r6
 80037a8:	f7ff ff93 	bl	80036d2 <__sfputs_r>
 80037ac:	3001      	adds	r0, #1
 80037ae:	f000 80aa 	beq.w	8003906 <_vfiprintf_r+0x20e>
 80037b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80037b4:	445a      	add	r2, fp
 80037b6:	9209      	str	r2, [sp, #36]	; 0x24
 80037b8:	f89a 3000 	ldrb.w	r3, [sl]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	f000 80a2 	beq.w	8003906 <_vfiprintf_r+0x20e>
 80037c2:	2300      	movs	r3, #0
 80037c4:	f04f 32ff 	mov.w	r2, #4294967295
 80037c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80037cc:	f10a 0a01 	add.w	sl, sl, #1
 80037d0:	9304      	str	r3, [sp, #16]
 80037d2:	9307      	str	r3, [sp, #28]
 80037d4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80037d8:	931a      	str	r3, [sp, #104]	; 0x68
 80037da:	4654      	mov	r4, sl
 80037dc:	2205      	movs	r2, #5
 80037de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80037e2:	4858      	ldr	r0, [pc, #352]	; (8003944 <_vfiprintf_r+0x24c>)
 80037e4:	f000 fb40 	bl	8003e68 <memchr>
 80037e8:	9a04      	ldr	r2, [sp, #16]
 80037ea:	b9d8      	cbnz	r0, 8003824 <_vfiprintf_r+0x12c>
 80037ec:	06d1      	lsls	r1, r2, #27
 80037ee:	bf44      	itt	mi
 80037f0:	2320      	movmi	r3, #32
 80037f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80037f6:	0713      	lsls	r3, r2, #28
 80037f8:	bf44      	itt	mi
 80037fa:	232b      	movmi	r3, #43	; 0x2b
 80037fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003800:	f89a 3000 	ldrb.w	r3, [sl]
 8003804:	2b2a      	cmp	r3, #42	; 0x2a
 8003806:	d015      	beq.n	8003834 <_vfiprintf_r+0x13c>
 8003808:	4654      	mov	r4, sl
 800380a:	2000      	movs	r0, #0
 800380c:	f04f 0c0a 	mov.w	ip, #10
 8003810:	9a07      	ldr	r2, [sp, #28]
 8003812:	4621      	mov	r1, r4
 8003814:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003818:	3b30      	subs	r3, #48	; 0x30
 800381a:	2b09      	cmp	r3, #9
 800381c:	d94e      	bls.n	80038bc <_vfiprintf_r+0x1c4>
 800381e:	b1b0      	cbz	r0, 800384e <_vfiprintf_r+0x156>
 8003820:	9207      	str	r2, [sp, #28]
 8003822:	e014      	b.n	800384e <_vfiprintf_r+0x156>
 8003824:	eba0 0308 	sub.w	r3, r0, r8
 8003828:	fa09 f303 	lsl.w	r3, r9, r3
 800382c:	4313      	orrs	r3, r2
 800382e:	46a2      	mov	sl, r4
 8003830:	9304      	str	r3, [sp, #16]
 8003832:	e7d2      	b.n	80037da <_vfiprintf_r+0xe2>
 8003834:	9b03      	ldr	r3, [sp, #12]
 8003836:	1d19      	adds	r1, r3, #4
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	9103      	str	r1, [sp, #12]
 800383c:	2b00      	cmp	r3, #0
 800383e:	bfbb      	ittet	lt
 8003840:	425b      	neglt	r3, r3
 8003842:	f042 0202 	orrlt.w	r2, r2, #2
 8003846:	9307      	strge	r3, [sp, #28]
 8003848:	9307      	strlt	r3, [sp, #28]
 800384a:	bfb8      	it	lt
 800384c:	9204      	strlt	r2, [sp, #16]
 800384e:	7823      	ldrb	r3, [r4, #0]
 8003850:	2b2e      	cmp	r3, #46	; 0x2e
 8003852:	d10c      	bne.n	800386e <_vfiprintf_r+0x176>
 8003854:	7863      	ldrb	r3, [r4, #1]
 8003856:	2b2a      	cmp	r3, #42	; 0x2a
 8003858:	d135      	bne.n	80038c6 <_vfiprintf_r+0x1ce>
 800385a:	9b03      	ldr	r3, [sp, #12]
 800385c:	3402      	adds	r4, #2
 800385e:	1d1a      	adds	r2, r3, #4
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	9203      	str	r2, [sp, #12]
 8003864:	2b00      	cmp	r3, #0
 8003866:	bfb8      	it	lt
 8003868:	f04f 33ff 	movlt.w	r3, #4294967295
 800386c:	9305      	str	r3, [sp, #20]
 800386e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8003948 <_vfiprintf_r+0x250>
 8003872:	2203      	movs	r2, #3
 8003874:	4650      	mov	r0, sl
 8003876:	7821      	ldrb	r1, [r4, #0]
 8003878:	f000 faf6 	bl	8003e68 <memchr>
 800387c:	b140      	cbz	r0, 8003890 <_vfiprintf_r+0x198>
 800387e:	2340      	movs	r3, #64	; 0x40
 8003880:	eba0 000a 	sub.w	r0, r0, sl
 8003884:	fa03 f000 	lsl.w	r0, r3, r0
 8003888:	9b04      	ldr	r3, [sp, #16]
 800388a:	3401      	adds	r4, #1
 800388c:	4303      	orrs	r3, r0
 800388e:	9304      	str	r3, [sp, #16]
 8003890:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003894:	2206      	movs	r2, #6
 8003896:	482d      	ldr	r0, [pc, #180]	; (800394c <_vfiprintf_r+0x254>)
 8003898:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800389c:	f000 fae4 	bl	8003e68 <memchr>
 80038a0:	2800      	cmp	r0, #0
 80038a2:	d03f      	beq.n	8003924 <_vfiprintf_r+0x22c>
 80038a4:	4b2a      	ldr	r3, [pc, #168]	; (8003950 <_vfiprintf_r+0x258>)
 80038a6:	bb1b      	cbnz	r3, 80038f0 <_vfiprintf_r+0x1f8>
 80038a8:	9b03      	ldr	r3, [sp, #12]
 80038aa:	3307      	adds	r3, #7
 80038ac:	f023 0307 	bic.w	r3, r3, #7
 80038b0:	3308      	adds	r3, #8
 80038b2:	9303      	str	r3, [sp, #12]
 80038b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80038b6:	443b      	add	r3, r7
 80038b8:	9309      	str	r3, [sp, #36]	; 0x24
 80038ba:	e767      	b.n	800378c <_vfiprintf_r+0x94>
 80038bc:	460c      	mov	r4, r1
 80038be:	2001      	movs	r0, #1
 80038c0:	fb0c 3202 	mla	r2, ip, r2, r3
 80038c4:	e7a5      	b.n	8003812 <_vfiprintf_r+0x11a>
 80038c6:	2300      	movs	r3, #0
 80038c8:	f04f 0c0a 	mov.w	ip, #10
 80038cc:	4619      	mov	r1, r3
 80038ce:	3401      	adds	r4, #1
 80038d0:	9305      	str	r3, [sp, #20]
 80038d2:	4620      	mov	r0, r4
 80038d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80038d8:	3a30      	subs	r2, #48	; 0x30
 80038da:	2a09      	cmp	r2, #9
 80038dc:	d903      	bls.n	80038e6 <_vfiprintf_r+0x1ee>
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d0c5      	beq.n	800386e <_vfiprintf_r+0x176>
 80038e2:	9105      	str	r1, [sp, #20]
 80038e4:	e7c3      	b.n	800386e <_vfiprintf_r+0x176>
 80038e6:	4604      	mov	r4, r0
 80038e8:	2301      	movs	r3, #1
 80038ea:	fb0c 2101 	mla	r1, ip, r1, r2
 80038ee:	e7f0      	b.n	80038d2 <_vfiprintf_r+0x1da>
 80038f0:	ab03      	add	r3, sp, #12
 80038f2:	9300      	str	r3, [sp, #0]
 80038f4:	462a      	mov	r2, r5
 80038f6:	4630      	mov	r0, r6
 80038f8:	4b16      	ldr	r3, [pc, #88]	; (8003954 <_vfiprintf_r+0x25c>)
 80038fa:	a904      	add	r1, sp, #16
 80038fc:	f3af 8000 	nop.w
 8003900:	4607      	mov	r7, r0
 8003902:	1c78      	adds	r0, r7, #1
 8003904:	d1d6      	bne.n	80038b4 <_vfiprintf_r+0x1bc>
 8003906:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003908:	07d9      	lsls	r1, r3, #31
 800390a:	d405      	bmi.n	8003918 <_vfiprintf_r+0x220>
 800390c:	89ab      	ldrh	r3, [r5, #12]
 800390e:	059a      	lsls	r2, r3, #22
 8003910:	d402      	bmi.n	8003918 <_vfiprintf_r+0x220>
 8003912:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003914:	f7ff fd85 	bl	8003422 <__retarget_lock_release_recursive>
 8003918:	89ab      	ldrh	r3, [r5, #12]
 800391a:	065b      	lsls	r3, r3, #25
 800391c:	f53f af12 	bmi.w	8003744 <_vfiprintf_r+0x4c>
 8003920:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003922:	e711      	b.n	8003748 <_vfiprintf_r+0x50>
 8003924:	ab03      	add	r3, sp, #12
 8003926:	9300      	str	r3, [sp, #0]
 8003928:	462a      	mov	r2, r5
 800392a:	4630      	mov	r0, r6
 800392c:	4b09      	ldr	r3, [pc, #36]	; (8003954 <_vfiprintf_r+0x25c>)
 800392e:	a904      	add	r1, sp, #16
 8003930:	f000 f882 	bl	8003a38 <_printf_i>
 8003934:	e7e4      	b.n	8003900 <_vfiprintf_r+0x208>
 8003936:	bf00      	nop
 8003938:	080045b4 	.word	0x080045b4
 800393c:	080045d4 	.word	0x080045d4
 8003940:	08004594 	.word	0x08004594
 8003944:	080045f4 	.word	0x080045f4
 8003948:	080045fa 	.word	0x080045fa
 800394c:	080045fe 	.word	0x080045fe
 8003950:	00000000 	.word	0x00000000
 8003954:	080036d3 	.word	0x080036d3

08003958 <_printf_common>:
 8003958:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800395c:	4616      	mov	r6, r2
 800395e:	4699      	mov	r9, r3
 8003960:	688a      	ldr	r2, [r1, #8]
 8003962:	690b      	ldr	r3, [r1, #16]
 8003964:	4607      	mov	r7, r0
 8003966:	4293      	cmp	r3, r2
 8003968:	bfb8      	it	lt
 800396a:	4613      	movlt	r3, r2
 800396c:	6033      	str	r3, [r6, #0]
 800396e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003972:	460c      	mov	r4, r1
 8003974:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003978:	b10a      	cbz	r2, 800397e <_printf_common+0x26>
 800397a:	3301      	adds	r3, #1
 800397c:	6033      	str	r3, [r6, #0]
 800397e:	6823      	ldr	r3, [r4, #0]
 8003980:	0699      	lsls	r1, r3, #26
 8003982:	bf42      	ittt	mi
 8003984:	6833      	ldrmi	r3, [r6, #0]
 8003986:	3302      	addmi	r3, #2
 8003988:	6033      	strmi	r3, [r6, #0]
 800398a:	6825      	ldr	r5, [r4, #0]
 800398c:	f015 0506 	ands.w	r5, r5, #6
 8003990:	d106      	bne.n	80039a0 <_printf_common+0x48>
 8003992:	f104 0a19 	add.w	sl, r4, #25
 8003996:	68e3      	ldr	r3, [r4, #12]
 8003998:	6832      	ldr	r2, [r6, #0]
 800399a:	1a9b      	subs	r3, r3, r2
 800399c:	42ab      	cmp	r3, r5
 800399e:	dc28      	bgt.n	80039f2 <_printf_common+0x9a>
 80039a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80039a4:	1e13      	subs	r3, r2, #0
 80039a6:	6822      	ldr	r2, [r4, #0]
 80039a8:	bf18      	it	ne
 80039aa:	2301      	movne	r3, #1
 80039ac:	0692      	lsls	r2, r2, #26
 80039ae:	d42d      	bmi.n	8003a0c <_printf_common+0xb4>
 80039b0:	4649      	mov	r1, r9
 80039b2:	4638      	mov	r0, r7
 80039b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80039b8:	47c0      	blx	r8
 80039ba:	3001      	adds	r0, #1
 80039bc:	d020      	beq.n	8003a00 <_printf_common+0xa8>
 80039be:	6823      	ldr	r3, [r4, #0]
 80039c0:	68e5      	ldr	r5, [r4, #12]
 80039c2:	f003 0306 	and.w	r3, r3, #6
 80039c6:	2b04      	cmp	r3, #4
 80039c8:	bf18      	it	ne
 80039ca:	2500      	movne	r5, #0
 80039cc:	6832      	ldr	r2, [r6, #0]
 80039ce:	f04f 0600 	mov.w	r6, #0
 80039d2:	68a3      	ldr	r3, [r4, #8]
 80039d4:	bf08      	it	eq
 80039d6:	1aad      	subeq	r5, r5, r2
 80039d8:	6922      	ldr	r2, [r4, #16]
 80039da:	bf08      	it	eq
 80039dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80039e0:	4293      	cmp	r3, r2
 80039e2:	bfc4      	itt	gt
 80039e4:	1a9b      	subgt	r3, r3, r2
 80039e6:	18ed      	addgt	r5, r5, r3
 80039e8:	341a      	adds	r4, #26
 80039ea:	42b5      	cmp	r5, r6
 80039ec:	d11a      	bne.n	8003a24 <_printf_common+0xcc>
 80039ee:	2000      	movs	r0, #0
 80039f0:	e008      	b.n	8003a04 <_printf_common+0xac>
 80039f2:	2301      	movs	r3, #1
 80039f4:	4652      	mov	r2, sl
 80039f6:	4649      	mov	r1, r9
 80039f8:	4638      	mov	r0, r7
 80039fa:	47c0      	blx	r8
 80039fc:	3001      	adds	r0, #1
 80039fe:	d103      	bne.n	8003a08 <_printf_common+0xb0>
 8003a00:	f04f 30ff 	mov.w	r0, #4294967295
 8003a04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a08:	3501      	adds	r5, #1
 8003a0a:	e7c4      	b.n	8003996 <_printf_common+0x3e>
 8003a0c:	2030      	movs	r0, #48	; 0x30
 8003a0e:	18e1      	adds	r1, r4, r3
 8003a10:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003a14:	1c5a      	adds	r2, r3, #1
 8003a16:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003a1a:	4422      	add	r2, r4
 8003a1c:	3302      	adds	r3, #2
 8003a1e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003a22:	e7c5      	b.n	80039b0 <_printf_common+0x58>
 8003a24:	2301      	movs	r3, #1
 8003a26:	4622      	mov	r2, r4
 8003a28:	4649      	mov	r1, r9
 8003a2a:	4638      	mov	r0, r7
 8003a2c:	47c0      	blx	r8
 8003a2e:	3001      	adds	r0, #1
 8003a30:	d0e6      	beq.n	8003a00 <_printf_common+0xa8>
 8003a32:	3601      	adds	r6, #1
 8003a34:	e7d9      	b.n	80039ea <_printf_common+0x92>
	...

08003a38 <_printf_i>:
 8003a38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003a3c:	7e0f      	ldrb	r7, [r1, #24]
 8003a3e:	4691      	mov	r9, r2
 8003a40:	2f78      	cmp	r7, #120	; 0x78
 8003a42:	4680      	mov	r8, r0
 8003a44:	460c      	mov	r4, r1
 8003a46:	469a      	mov	sl, r3
 8003a48:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003a4a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003a4e:	d807      	bhi.n	8003a60 <_printf_i+0x28>
 8003a50:	2f62      	cmp	r7, #98	; 0x62
 8003a52:	d80a      	bhi.n	8003a6a <_printf_i+0x32>
 8003a54:	2f00      	cmp	r7, #0
 8003a56:	f000 80d9 	beq.w	8003c0c <_printf_i+0x1d4>
 8003a5a:	2f58      	cmp	r7, #88	; 0x58
 8003a5c:	f000 80a4 	beq.w	8003ba8 <_printf_i+0x170>
 8003a60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003a64:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003a68:	e03a      	b.n	8003ae0 <_printf_i+0xa8>
 8003a6a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003a6e:	2b15      	cmp	r3, #21
 8003a70:	d8f6      	bhi.n	8003a60 <_printf_i+0x28>
 8003a72:	a101      	add	r1, pc, #4	; (adr r1, 8003a78 <_printf_i+0x40>)
 8003a74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003a78:	08003ad1 	.word	0x08003ad1
 8003a7c:	08003ae5 	.word	0x08003ae5
 8003a80:	08003a61 	.word	0x08003a61
 8003a84:	08003a61 	.word	0x08003a61
 8003a88:	08003a61 	.word	0x08003a61
 8003a8c:	08003a61 	.word	0x08003a61
 8003a90:	08003ae5 	.word	0x08003ae5
 8003a94:	08003a61 	.word	0x08003a61
 8003a98:	08003a61 	.word	0x08003a61
 8003a9c:	08003a61 	.word	0x08003a61
 8003aa0:	08003a61 	.word	0x08003a61
 8003aa4:	08003bf3 	.word	0x08003bf3
 8003aa8:	08003b15 	.word	0x08003b15
 8003aac:	08003bd5 	.word	0x08003bd5
 8003ab0:	08003a61 	.word	0x08003a61
 8003ab4:	08003a61 	.word	0x08003a61
 8003ab8:	08003c15 	.word	0x08003c15
 8003abc:	08003a61 	.word	0x08003a61
 8003ac0:	08003b15 	.word	0x08003b15
 8003ac4:	08003a61 	.word	0x08003a61
 8003ac8:	08003a61 	.word	0x08003a61
 8003acc:	08003bdd 	.word	0x08003bdd
 8003ad0:	682b      	ldr	r3, [r5, #0]
 8003ad2:	1d1a      	adds	r2, r3, #4
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	602a      	str	r2, [r5, #0]
 8003ad8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003adc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e0a4      	b.n	8003c2e <_printf_i+0x1f6>
 8003ae4:	6820      	ldr	r0, [r4, #0]
 8003ae6:	6829      	ldr	r1, [r5, #0]
 8003ae8:	0606      	lsls	r6, r0, #24
 8003aea:	f101 0304 	add.w	r3, r1, #4
 8003aee:	d50a      	bpl.n	8003b06 <_printf_i+0xce>
 8003af0:	680e      	ldr	r6, [r1, #0]
 8003af2:	602b      	str	r3, [r5, #0]
 8003af4:	2e00      	cmp	r6, #0
 8003af6:	da03      	bge.n	8003b00 <_printf_i+0xc8>
 8003af8:	232d      	movs	r3, #45	; 0x2d
 8003afa:	4276      	negs	r6, r6
 8003afc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b00:	230a      	movs	r3, #10
 8003b02:	485e      	ldr	r0, [pc, #376]	; (8003c7c <_printf_i+0x244>)
 8003b04:	e019      	b.n	8003b3a <_printf_i+0x102>
 8003b06:	680e      	ldr	r6, [r1, #0]
 8003b08:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003b0c:	602b      	str	r3, [r5, #0]
 8003b0e:	bf18      	it	ne
 8003b10:	b236      	sxthne	r6, r6
 8003b12:	e7ef      	b.n	8003af4 <_printf_i+0xbc>
 8003b14:	682b      	ldr	r3, [r5, #0]
 8003b16:	6820      	ldr	r0, [r4, #0]
 8003b18:	1d19      	adds	r1, r3, #4
 8003b1a:	6029      	str	r1, [r5, #0]
 8003b1c:	0601      	lsls	r1, r0, #24
 8003b1e:	d501      	bpl.n	8003b24 <_printf_i+0xec>
 8003b20:	681e      	ldr	r6, [r3, #0]
 8003b22:	e002      	b.n	8003b2a <_printf_i+0xf2>
 8003b24:	0646      	lsls	r6, r0, #25
 8003b26:	d5fb      	bpl.n	8003b20 <_printf_i+0xe8>
 8003b28:	881e      	ldrh	r6, [r3, #0]
 8003b2a:	2f6f      	cmp	r7, #111	; 0x6f
 8003b2c:	bf0c      	ite	eq
 8003b2e:	2308      	moveq	r3, #8
 8003b30:	230a      	movne	r3, #10
 8003b32:	4852      	ldr	r0, [pc, #328]	; (8003c7c <_printf_i+0x244>)
 8003b34:	2100      	movs	r1, #0
 8003b36:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003b3a:	6865      	ldr	r5, [r4, #4]
 8003b3c:	2d00      	cmp	r5, #0
 8003b3e:	bfa8      	it	ge
 8003b40:	6821      	ldrge	r1, [r4, #0]
 8003b42:	60a5      	str	r5, [r4, #8]
 8003b44:	bfa4      	itt	ge
 8003b46:	f021 0104 	bicge.w	r1, r1, #4
 8003b4a:	6021      	strge	r1, [r4, #0]
 8003b4c:	b90e      	cbnz	r6, 8003b52 <_printf_i+0x11a>
 8003b4e:	2d00      	cmp	r5, #0
 8003b50:	d04d      	beq.n	8003bee <_printf_i+0x1b6>
 8003b52:	4615      	mov	r5, r2
 8003b54:	fbb6 f1f3 	udiv	r1, r6, r3
 8003b58:	fb03 6711 	mls	r7, r3, r1, r6
 8003b5c:	5dc7      	ldrb	r7, [r0, r7]
 8003b5e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003b62:	4637      	mov	r7, r6
 8003b64:	42bb      	cmp	r3, r7
 8003b66:	460e      	mov	r6, r1
 8003b68:	d9f4      	bls.n	8003b54 <_printf_i+0x11c>
 8003b6a:	2b08      	cmp	r3, #8
 8003b6c:	d10b      	bne.n	8003b86 <_printf_i+0x14e>
 8003b6e:	6823      	ldr	r3, [r4, #0]
 8003b70:	07de      	lsls	r6, r3, #31
 8003b72:	d508      	bpl.n	8003b86 <_printf_i+0x14e>
 8003b74:	6923      	ldr	r3, [r4, #16]
 8003b76:	6861      	ldr	r1, [r4, #4]
 8003b78:	4299      	cmp	r1, r3
 8003b7a:	bfde      	ittt	le
 8003b7c:	2330      	movle	r3, #48	; 0x30
 8003b7e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003b82:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003b86:	1b52      	subs	r2, r2, r5
 8003b88:	6122      	str	r2, [r4, #16]
 8003b8a:	464b      	mov	r3, r9
 8003b8c:	4621      	mov	r1, r4
 8003b8e:	4640      	mov	r0, r8
 8003b90:	f8cd a000 	str.w	sl, [sp]
 8003b94:	aa03      	add	r2, sp, #12
 8003b96:	f7ff fedf 	bl	8003958 <_printf_common>
 8003b9a:	3001      	adds	r0, #1
 8003b9c:	d14c      	bne.n	8003c38 <_printf_i+0x200>
 8003b9e:	f04f 30ff 	mov.w	r0, #4294967295
 8003ba2:	b004      	add	sp, #16
 8003ba4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ba8:	4834      	ldr	r0, [pc, #208]	; (8003c7c <_printf_i+0x244>)
 8003baa:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003bae:	6829      	ldr	r1, [r5, #0]
 8003bb0:	6823      	ldr	r3, [r4, #0]
 8003bb2:	f851 6b04 	ldr.w	r6, [r1], #4
 8003bb6:	6029      	str	r1, [r5, #0]
 8003bb8:	061d      	lsls	r5, r3, #24
 8003bba:	d514      	bpl.n	8003be6 <_printf_i+0x1ae>
 8003bbc:	07df      	lsls	r7, r3, #31
 8003bbe:	bf44      	itt	mi
 8003bc0:	f043 0320 	orrmi.w	r3, r3, #32
 8003bc4:	6023      	strmi	r3, [r4, #0]
 8003bc6:	b91e      	cbnz	r6, 8003bd0 <_printf_i+0x198>
 8003bc8:	6823      	ldr	r3, [r4, #0]
 8003bca:	f023 0320 	bic.w	r3, r3, #32
 8003bce:	6023      	str	r3, [r4, #0]
 8003bd0:	2310      	movs	r3, #16
 8003bd2:	e7af      	b.n	8003b34 <_printf_i+0xfc>
 8003bd4:	6823      	ldr	r3, [r4, #0]
 8003bd6:	f043 0320 	orr.w	r3, r3, #32
 8003bda:	6023      	str	r3, [r4, #0]
 8003bdc:	2378      	movs	r3, #120	; 0x78
 8003bde:	4828      	ldr	r0, [pc, #160]	; (8003c80 <_printf_i+0x248>)
 8003be0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003be4:	e7e3      	b.n	8003bae <_printf_i+0x176>
 8003be6:	0659      	lsls	r1, r3, #25
 8003be8:	bf48      	it	mi
 8003bea:	b2b6      	uxthmi	r6, r6
 8003bec:	e7e6      	b.n	8003bbc <_printf_i+0x184>
 8003bee:	4615      	mov	r5, r2
 8003bf0:	e7bb      	b.n	8003b6a <_printf_i+0x132>
 8003bf2:	682b      	ldr	r3, [r5, #0]
 8003bf4:	6826      	ldr	r6, [r4, #0]
 8003bf6:	1d18      	adds	r0, r3, #4
 8003bf8:	6961      	ldr	r1, [r4, #20]
 8003bfa:	6028      	str	r0, [r5, #0]
 8003bfc:	0635      	lsls	r5, r6, #24
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	d501      	bpl.n	8003c06 <_printf_i+0x1ce>
 8003c02:	6019      	str	r1, [r3, #0]
 8003c04:	e002      	b.n	8003c0c <_printf_i+0x1d4>
 8003c06:	0670      	lsls	r0, r6, #25
 8003c08:	d5fb      	bpl.n	8003c02 <_printf_i+0x1ca>
 8003c0a:	8019      	strh	r1, [r3, #0]
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	4615      	mov	r5, r2
 8003c10:	6123      	str	r3, [r4, #16]
 8003c12:	e7ba      	b.n	8003b8a <_printf_i+0x152>
 8003c14:	682b      	ldr	r3, [r5, #0]
 8003c16:	2100      	movs	r1, #0
 8003c18:	1d1a      	adds	r2, r3, #4
 8003c1a:	602a      	str	r2, [r5, #0]
 8003c1c:	681d      	ldr	r5, [r3, #0]
 8003c1e:	6862      	ldr	r2, [r4, #4]
 8003c20:	4628      	mov	r0, r5
 8003c22:	f000 f921 	bl	8003e68 <memchr>
 8003c26:	b108      	cbz	r0, 8003c2c <_printf_i+0x1f4>
 8003c28:	1b40      	subs	r0, r0, r5
 8003c2a:	6060      	str	r0, [r4, #4]
 8003c2c:	6863      	ldr	r3, [r4, #4]
 8003c2e:	6123      	str	r3, [r4, #16]
 8003c30:	2300      	movs	r3, #0
 8003c32:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c36:	e7a8      	b.n	8003b8a <_printf_i+0x152>
 8003c38:	462a      	mov	r2, r5
 8003c3a:	4649      	mov	r1, r9
 8003c3c:	4640      	mov	r0, r8
 8003c3e:	6923      	ldr	r3, [r4, #16]
 8003c40:	47d0      	blx	sl
 8003c42:	3001      	adds	r0, #1
 8003c44:	d0ab      	beq.n	8003b9e <_printf_i+0x166>
 8003c46:	6823      	ldr	r3, [r4, #0]
 8003c48:	079b      	lsls	r3, r3, #30
 8003c4a:	d413      	bmi.n	8003c74 <_printf_i+0x23c>
 8003c4c:	68e0      	ldr	r0, [r4, #12]
 8003c4e:	9b03      	ldr	r3, [sp, #12]
 8003c50:	4298      	cmp	r0, r3
 8003c52:	bfb8      	it	lt
 8003c54:	4618      	movlt	r0, r3
 8003c56:	e7a4      	b.n	8003ba2 <_printf_i+0x16a>
 8003c58:	2301      	movs	r3, #1
 8003c5a:	4632      	mov	r2, r6
 8003c5c:	4649      	mov	r1, r9
 8003c5e:	4640      	mov	r0, r8
 8003c60:	47d0      	blx	sl
 8003c62:	3001      	adds	r0, #1
 8003c64:	d09b      	beq.n	8003b9e <_printf_i+0x166>
 8003c66:	3501      	adds	r5, #1
 8003c68:	68e3      	ldr	r3, [r4, #12]
 8003c6a:	9903      	ldr	r1, [sp, #12]
 8003c6c:	1a5b      	subs	r3, r3, r1
 8003c6e:	42ab      	cmp	r3, r5
 8003c70:	dcf2      	bgt.n	8003c58 <_printf_i+0x220>
 8003c72:	e7eb      	b.n	8003c4c <_printf_i+0x214>
 8003c74:	2500      	movs	r5, #0
 8003c76:	f104 0619 	add.w	r6, r4, #25
 8003c7a:	e7f5      	b.n	8003c68 <_printf_i+0x230>
 8003c7c:	08004605 	.word	0x08004605
 8003c80:	08004616 	.word	0x08004616

08003c84 <_putc_r>:
 8003c84:	b570      	push	{r4, r5, r6, lr}
 8003c86:	460d      	mov	r5, r1
 8003c88:	4614      	mov	r4, r2
 8003c8a:	4606      	mov	r6, r0
 8003c8c:	b118      	cbz	r0, 8003c96 <_putc_r+0x12>
 8003c8e:	6983      	ldr	r3, [r0, #24]
 8003c90:	b90b      	cbnz	r3, 8003c96 <_putc_r+0x12>
 8003c92:	f7ff fb27 	bl	80032e4 <__sinit>
 8003c96:	4b1c      	ldr	r3, [pc, #112]	; (8003d08 <_putc_r+0x84>)
 8003c98:	429c      	cmp	r4, r3
 8003c9a:	d124      	bne.n	8003ce6 <_putc_r+0x62>
 8003c9c:	6874      	ldr	r4, [r6, #4]
 8003c9e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003ca0:	07d8      	lsls	r0, r3, #31
 8003ca2:	d405      	bmi.n	8003cb0 <_putc_r+0x2c>
 8003ca4:	89a3      	ldrh	r3, [r4, #12]
 8003ca6:	0599      	lsls	r1, r3, #22
 8003ca8:	d402      	bmi.n	8003cb0 <_putc_r+0x2c>
 8003caa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003cac:	f7ff fbb8 	bl	8003420 <__retarget_lock_acquire_recursive>
 8003cb0:	68a3      	ldr	r3, [r4, #8]
 8003cb2:	3b01      	subs	r3, #1
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	60a3      	str	r3, [r4, #8]
 8003cb8:	da05      	bge.n	8003cc6 <_putc_r+0x42>
 8003cba:	69a2      	ldr	r2, [r4, #24]
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	db1c      	blt.n	8003cfa <_putc_r+0x76>
 8003cc0:	b2eb      	uxtb	r3, r5
 8003cc2:	2b0a      	cmp	r3, #10
 8003cc4:	d019      	beq.n	8003cfa <_putc_r+0x76>
 8003cc6:	6823      	ldr	r3, [r4, #0]
 8003cc8:	1c5a      	adds	r2, r3, #1
 8003cca:	6022      	str	r2, [r4, #0]
 8003ccc:	701d      	strb	r5, [r3, #0]
 8003cce:	b2ed      	uxtb	r5, r5
 8003cd0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003cd2:	07da      	lsls	r2, r3, #31
 8003cd4:	d405      	bmi.n	8003ce2 <_putc_r+0x5e>
 8003cd6:	89a3      	ldrh	r3, [r4, #12]
 8003cd8:	059b      	lsls	r3, r3, #22
 8003cda:	d402      	bmi.n	8003ce2 <_putc_r+0x5e>
 8003cdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003cde:	f7ff fba0 	bl	8003422 <__retarget_lock_release_recursive>
 8003ce2:	4628      	mov	r0, r5
 8003ce4:	bd70      	pop	{r4, r5, r6, pc}
 8003ce6:	4b09      	ldr	r3, [pc, #36]	; (8003d0c <_putc_r+0x88>)
 8003ce8:	429c      	cmp	r4, r3
 8003cea:	d101      	bne.n	8003cf0 <_putc_r+0x6c>
 8003cec:	68b4      	ldr	r4, [r6, #8]
 8003cee:	e7d6      	b.n	8003c9e <_putc_r+0x1a>
 8003cf0:	4b07      	ldr	r3, [pc, #28]	; (8003d10 <_putc_r+0x8c>)
 8003cf2:	429c      	cmp	r4, r3
 8003cf4:	bf08      	it	eq
 8003cf6:	68f4      	ldreq	r4, [r6, #12]
 8003cf8:	e7d1      	b.n	8003c9e <_putc_r+0x1a>
 8003cfa:	4629      	mov	r1, r5
 8003cfc:	4622      	mov	r2, r4
 8003cfe:	4630      	mov	r0, r6
 8003d00:	f7ff f91a 	bl	8002f38 <__swbuf_r>
 8003d04:	4605      	mov	r5, r0
 8003d06:	e7e3      	b.n	8003cd0 <_putc_r+0x4c>
 8003d08:	080045b4 	.word	0x080045b4
 8003d0c:	080045d4 	.word	0x080045d4
 8003d10:	08004594 	.word	0x08004594

08003d14 <_sbrk_r>:
 8003d14:	b538      	push	{r3, r4, r5, lr}
 8003d16:	2300      	movs	r3, #0
 8003d18:	4d05      	ldr	r5, [pc, #20]	; (8003d30 <_sbrk_r+0x1c>)
 8003d1a:	4604      	mov	r4, r0
 8003d1c:	4608      	mov	r0, r1
 8003d1e:	602b      	str	r3, [r5, #0]
 8003d20:	f7fc fc96 	bl	8000650 <_sbrk>
 8003d24:	1c43      	adds	r3, r0, #1
 8003d26:	d102      	bne.n	8003d2e <_sbrk_r+0x1a>
 8003d28:	682b      	ldr	r3, [r5, #0]
 8003d2a:	b103      	cbz	r3, 8003d2e <_sbrk_r+0x1a>
 8003d2c:	6023      	str	r3, [r4, #0]
 8003d2e:	bd38      	pop	{r3, r4, r5, pc}
 8003d30:	20000a24 	.word	0x20000a24

08003d34 <__sread>:
 8003d34:	b510      	push	{r4, lr}
 8003d36:	460c      	mov	r4, r1
 8003d38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d3c:	f000 f8ae 	bl	8003e9c <_read_r>
 8003d40:	2800      	cmp	r0, #0
 8003d42:	bfab      	itete	ge
 8003d44:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003d46:	89a3      	ldrhlt	r3, [r4, #12]
 8003d48:	181b      	addge	r3, r3, r0
 8003d4a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003d4e:	bfac      	ite	ge
 8003d50:	6563      	strge	r3, [r4, #84]	; 0x54
 8003d52:	81a3      	strhlt	r3, [r4, #12]
 8003d54:	bd10      	pop	{r4, pc}

08003d56 <__swrite>:
 8003d56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d5a:	461f      	mov	r7, r3
 8003d5c:	898b      	ldrh	r3, [r1, #12]
 8003d5e:	4605      	mov	r5, r0
 8003d60:	05db      	lsls	r3, r3, #23
 8003d62:	460c      	mov	r4, r1
 8003d64:	4616      	mov	r6, r2
 8003d66:	d505      	bpl.n	8003d74 <__swrite+0x1e>
 8003d68:	2302      	movs	r3, #2
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d70:	f000 f868 	bl	8003e44 <_lseek_r>
 8003d74:	89a3      	ldrh	r3, [r4, #12]
 8003d76:	4632      	mov	r2, r6
 8003d78:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003d7c:	81a3      	strh	r3, [r4, #12]
 8003d7e:	4628      	mov	r0, r5
 8003d80:	463b      	mov	r3, r7
 8003d82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003d86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003d8a:	f000 b817 	b.w	8003dbc <_write_r>

08003d8e <__sseek>:
 8003d8e:	b510      	push	{r4, lr}
 8003d90:	460c      	mov	r4, r1
 8003d92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d96:	f000 f855 	bl	8003e44 <_lseek_r>
 8003d9a:	1c43      	adds	r3, r0, #1
 8003d9c:	89a3      	ldrh	r3, [r4, #12]
 8003d9e:	bf15      	itete	ne
 8003da0:	6560      	strne	r0, [r4, #84]	; 0x54
 8003da2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003da6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003daa:	81a3      	strheq	r3, [r4, #12]
 8003dac:	bf18      	it	ne
 8003dae:	81a3      	strhne	r3, [r4, #12]
 8003db0:	bd10      	pop	{r4, pc}

08003db2 <__sclose>:
 8003db2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003db6:	f000 b813 	b.w	8003de0 <_close_r>
	...

08003dbc <_write_r>:
 8003dbc:	b538      	push	{r3, r4, r5, lr}
 8003dbe:	4604      	mov	r4, r0
 8003dc0:	4608      	mov	r0, r1
 8003dc2:	4611      	mov	r1, r2
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	4d05      	ldr	r5, [pc, #20]	; (8003ddc <_write_r+0x20>)
 8003dc8:	602a      	str	r2, [r5, #0]
 8003dca:	461a      	mov	r2, r3
 8003dcc:	f7fc fac2 	bl	8000354 <_write>
 8003dd0:	1c43      	adds	r3, r0, #1
 8003dd2:	d102      	bne.n	8003dda <_write_r+0x1e>
 8003dd4:	682b      	ldr	r3, [r5, #0]
 8003dd6:	b103      	cbz	r3, 8003dda <_write_r+0x1e>
 8003dd8:	6023      	str	r3, [r4, #0]
 8003dda:	bd38      	pop	{r3, r4, r5, pc}
 8003ddc:	20000a24 	.word	0x20000a24

08003de0 <_close_r>:
 8003de0:	b538      	push	{r3, r4, r5, lr}
 8003de2:	2300      	movs	r3, #0
 8003de4:	4d05      	ldr	r5, [pc, #20]	; (8003dfc <_close_r+0x1c>)
 8003de6:	4604      	mov	r4, r0
 8003de8:	4608      	mov	r0, r1
 8003dea:	602b      	str	r3, [r5, #0]
 8003dec:	f7fc fbff 	bl	80005ee <_close>
 8003df0:	1c43      	adds	r3, r0, #1
 8003df2:	d102      	bne.n	8003dfa <_close_r+0x1a>
 8003df4:	682b      	ldr	r3, [r5, #0]
 8003df6:	b103      	cbz	r3, 8003dfa <_close_r+0x1a>
 8003df8:	6023      	str	r3, [r4, #0]
 8003dfa:	bd38      	pop	{r3, r4, r5, pc}
 8003dfc:	20000a24 	.word	0x20000a24

08003e00 <_fstat_r>:
 8003e00:	b538      	push	{r3, r4, r5, lr}
 8003e02:	2300      	movs	r3, #0
 8003e04:	4d06      	ldr	r5, [pc, #24]	; (8003e20 <_fstat_r+0x20>)
 8003e06:	4604      	mov	r4, r0
 8003e08:	4608      	mov	r0, r1
 8003e0a:	4611      	mov	r1, r2
 8003e0c:	602b      	str	r3, [r5, #0]
 8003e0e:	f7fc fbf9 	bl	8000604 <_fstat>
 8003e12:	1c43      	adds	r3, r0, #1
 8003e14:	d102      	bne.n	8003e1c <_fstat_r+0x1c>
 8003e16:	682b      	ldr	r3, [r5, #0]
 8003e18:	b103      	cbz	r3, 8003e1c <_fstat_r+0x1c>
 8003e1a:	6023      	str	r3, [r4, #0]
 8003e1c:	bd38      	pop	{r3, r4, r5, pc}
 8003e1e:	bf00      	nop
 8003e20:	20000a24 	.word	0x20000a24

08003e24 <_isatty_r>:
 8003e24:	b538      	push	{r3, r4, r5, lr}
 8003e26:	2300      	movs	r3, #0
 8003e28:	4d05      	ldr	r5, [pc, #20]	; (8003e40 <_isatty_r+0x1c>)
 8003e2a:	4604      	mov	r4, r0
 8003e2c:	4608      	mov	r0, r1
 8003e2e:	602b      	str	r3, [r5, #0]
 8003e30:	f7fc fbf7 	bl	8000622 <_isatty>
 8003e34:	1c43      	adds	r3, r0, #1
 8003e36:	d102      	bne.n	8003e3e <_isatty_r+0x1a>
 8003e38:	682b      	ldr	r3, [r5, #0]
 8003e3a:	b103      	cbz	r3, 8003e3e <_isatty_r+0x1a>
 8003e3c:	6023      	str	r3, [r4, #0]
 8003e3e:	bd38      	pop	{r3, r4, r5, pc}
 8003e40:	20000a24 	.word	0x20000a24

08003e44 <_lseek_r>:
 8003e44:	b538      	push	{r3, r4, r5, lr}
 8003e46:	4604      	mov	r4, r0
 8003e48:	4608      	mov	r0, r1
 8003e4a:	4611      	mov	r1, r2
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	4d05      	ldr	r5, [pc, #20]	; (8003e64 <_lseek_r+0x20>)
 8003e50:	602a      	str	r2, [r5, #0]
 8003e52:	461a      	mov	r2, r3
 8003e54:	f7fc fbef 	bl	8000636 <_lseek>
 8003e58:	1c43      	adds	r3, r0, #1
 8003e5a:	d102      	bne.n	8003e62 <_lseek_r+0x1e>
 8003e5c:	682b      	ldr	r3, [r5, #0]
 8003e5e:	b103      	cbz	r3, 8003e62 <_lseek_r+0x1e>
 8003e60:	6023      	str	r3, [r4, #0]
 8003e62:	bd38      	pop	{r3, r4, r5, pc}
 8003e64:	20000a24 	.word	0x20000a24

08003e68 <memchr>:
 8003e68:	4603      	mov	r3, r0
 8003e6a:	b510      	push	{r4, lr}
 8003e6c:	b2c9      	uxtb	r1, r1
 8003e6e:	4402      	add	r2, r0
 8003e70:	4293      	cmp	r3, r2
 8003e72:	4618      	mov	r0, r3
 8003e74:	d101      	bne.n	8003e7a <memchr+0x12>
 8003e76:	2000      	movs	r0, #0
 8003e78:	e003      	b.n	8003e82 <memchr+0x1a>
 8003e7a:	7804      	ldrb	r4, [r0, #0]
 8003e7c:	3301      	adds	r3, #1
 8003e7e:	428c      	cmp	r4, r1
 8003e80:	d1f6      	bne.n	8003e70 <memchr+0x8>
 8003e82:	bd10      	pop	{r4, pc}

08003e84 <__malloc_lock>:
 8003e84:	4801      	ldr	r0, [pc, #4]	; (8003e8c <__malloc_lock+0x8>)
 8003e86:	f7ff bacb 	b.w	8003420 <__retarget_lock_acquire_recursive>
 8003e8a:	bf00      	nop
 8003e8c:	20000a19 	.word	0x20000a19

08003e90 <__malloc_unlock>:
 8003e90:	4801      	ldr	r0, [pc, #4]	; (8003e98 <__malloc_unlock+0x8>)
 8003e92:	f7ff bac6 	b.w	8003422 <__retarget_lock_release_recursive>
 8003e96:	bf00      	nop
 8003e98:	20000a19 	.word	0x20000a19

08003e9c <_read_r>:
 8003e9c:	b538      	push	{r3, r4, r5, lr}
 8003e9e:	4604      	mov	r4, r0
 8003ea0:	4608      	mov	r0, r1
 8003ea2:	4611      	mov	r1, r2
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	4d05      	ldr	r5, [pc, #20]	; (8003ebc <_read_r+0x20>)
 8003ea8:	602a      	str	r2, [r5, #0]
 8003eaa:	461a      	mov	r2, r3
 8003eac:	f7fc fb82 	bl	80005b4 <_read>
 8003eb0:	1c43      	adds	r3, r0, #1
 8003eb2:	d102      	bne.n	8003eba <_read_r+0x1e>
 8003eb4:	682b      	ldr	r3, [r5, #0]
 8003eb6:	b103      	cbz	r3, 8003eba <_read_r+0x1e>
 8003eb8:	6023      	str	r3, [r4, #0]
 8003eba:	bd38      	pop	{r3, r4, r5, pc}
 8003ebc:	20000a24 	.word	0x20000a24

08003ec0 <_init>:
 8003ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ec2:	bf00      	nop
 8003ec4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ec6:	bc08      	pop	{r3}
 8003ec8:	469e      	mov	lr, r3
 8003eca:	4770      	bx	lr

08003ecc <_fini>:
 8003ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ece:	bf00      	nop
 8003ed0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ed2:	bc08      	pop	{r3}
 8003ed4:	469e      	mov	lr, r3
 8003ed6:	4770      	bx	lr
